using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using WebZi.Plataform.Data.Models;

namespace WebZi.Plataform.Data.Database;

public partial class DbMobLinkDepositoPublicoDesenvolvimentoContext : DbContext
{
    public DbMobLinkDepositoPublicoDesenvolvimentoContext()
    {
    }

    public DbMobLinkDepositoPublicoDesenvolvimentoContext(DbContextOptions<DbMobLinkDepositoPublicoDesenvolvimentoContext> options)
        : base(options)
    {
    }

    public virtual DbSet<TbDepAgenciasBancaria> TbDepAgenciasBancarias { get; set; }

    public virtual DbSet<TbDepAgente> TbDepAgentes { get; set; }

    public virtual DbSet<TbDepAgentesImagemAssinatura> TbDepAgentesImagemAssinaturas { get; set; }

    public virtual DbSet<TbDepAlterdataConfiguracao> TbDepAlterdataConfiguracaos { get; set; }

    public virtual DbSet<TbDepAlterdataConfiguracaoCfop> TbDepAlterdataConfiguracaoCfops { get; set; }

    public virtual DbSet<TbDepAlterdataConfiguracaoIdentificadorFormaPagamento> TbDepAlterdataConfiguracaoIdentificadorFormaPagamentos { get; set; }

    public virtual DbSet<TbDepAlterdataConfiguracaoIdentificadorNaturezaLancamento> TbDepAlterdataConfiguracaoIdentificadorNaturezaLancamentos { get; set; }

    public virtual DbSet<TbDepAlterdataConfiguracaoIdentificadorProduto> TbDepAlterdataConfiguracaoIdentificadorProdutos { get; set; }

    public virtual DbSet<TbDepAlterdataConfiguracaoOperacao> TbDepAlterdataConfiguracaoOperacaos { get; set; }

    public virtual DbSet<TbDepAlterdataContaBancariaExecucao> TbDepAlterdataContaBancariaExecucaos { get; set; }

    public virtual DbSet<TbDepAlterdataContaBancarium> TbDepAlterdataContaBancaria { get; set; }

    public virtual DbSet<TbDepAlterdataCredencial> TbDepAlterdataCredencials { get; set; }

    public virtual DbSet<TbDepAlterdataDocumento> TbDepAlterdataDocumentos { get; set; }

    public virtual DbSet<TbDepAlterdataErro> TbDepAlterdataErros { get; set; }

    public virtual DbSet<TbDepAlterdataLoteBaixa> TbDepAlterdataLoteBaixas { get; set; }

    public virtual DbSet<TbDepAlterdataOperacao> TbDepAlterdataOperacaos { get; set; }

    public virtual DbSet<TbDepAlterdataRetorno> TbDepAlterdataRetornos { get; set; }

    public virtual DbSet<TbDepAlterdataTituloReceber> TbDepAlterdataTituloRecebers { get; set; }

    public virtual DbSet<TbDepAlterdatum> TbDepAlterdata { get; set; }

    public virtual DbSet<TbDepApreensaoVeiculoOrgao> TbDepApreensaoVeiculoOrgaos { get; set; }

    public virtual DbSet<TbDepAtendimento> TbDepAtendimentos { get; set; }

    public virtual DbSet<TbDepAtendimentoFotosResponsavei> TbDepAtendimentoFotosResponsaveis { get; set; }

    public virtual DbSet<TbDepAtendimentoSaidaReparo> TbDepAtendimentoSaidaReparos { get; set; }

    public virtual DbSet<TbDepAutoridadesClientesDeposito> TbDepAutoridadesClientesDepositos { get; set; }

    public virtual DbSet<TbDepAutoridadesResponsavei> TbDepAutoridadesResponsaveis { get; set; }

    public virtual DbSet<TbDepBanco> TbDepBancos { get; set; }

    public virtual DbSet<TbDepClassificaco> TbDepClassificacoes { get; set; }

    public virtual DbSet<TbDepCliente> TbDepClientes { get; set; }

    public virtual DbSet<TbDepClienteDepositoTiposVeiculo> TbDepClienteDepositoTiposVeiculos { get; set; }

    public virtual DbSet<TbDepClienteRegra> TbDepClienteRegras { get; set; }

    public virtual DbSet<TbDepClienteRegrasTipo> TbDepClienteRegrasTipos { get; set; }

    public virtual DbSet<TbDepClientesDeposito> TbDepClientesDepositos { get; set; }

    public virtual DbSet<TbDepComunicacaoEmail> TbDepComunicacaoEmails { get; set; }

    public virtual DbSet<TbDepCondutor> TbDepCondutors { get; set; }

    public virtual DbSet<TbDepCondutorEquipamentosOpcionai> TbDepCondutorEquipamentosOpcionais { get; set; }

    public virtual DbSet<TbDepCondutorEquipamentosOpcionaisNaoConformidade> TbDepCondutorEquipamentosOpcionaisNaoConformidades { get; set; }

    public virtual DbSet<TbDepConfiguraco> TbDepConfiguracoes { get; set; }

    public virtual DbSet<TbDepConfiguracoesNomeTabelaOrigem> TbDepConfiguracoesNomeTabelaOrigems { get; set; }

    public virtual DbSet<TbDepConfiguracoesTransacao> TbDepConfiguracoesTransacaos { get; set; }

    public virtual DbSet<TbDepConfiguracoesTransacaoAcao> TbDepConfiguracoesTransacaoAcaos { get; set; }

    public virtual DbSet<TbDepConfiguracoesTransacaoGrupo> TbDepConfiguracoesTransacaoGrupos { get; set; }

    public virtual DbSet<TbDepConsultaVeiculoAl> TbDepConsultaVeiculoAls { get; set; }

    public virtual DbSet<TbDepContasTemporaria> TbDepContasTemporarias { get; set; }

    public virtual DbSet<TbDepDeclaracaoAcesso> TbDepDeclaracaoAcessos { get; set; }

    public virtual DbSet<TbDepDeposito> TbDepDepositos { get; set; }

    public virtual DbSet<TbDepDetranAssociacaoTransacaoClienteDeposito> TbDepDetranAssociacaoTransacaoClienteDepositos { get; set; }

    public virtual DbSet<TbDepDetranGrvStatusTransacao> TbDepDetranGrvStatusTransacaos { get; set; }

    public virtual DbSet<TbDepDetranGrvStatusTransacaoResultado> TbDepDetranGrvStatusTransacaoResultados { get; set; }

    public virtual DbSet<TbDepDetranTransacaoConsultarPendenciasLiberacaoVeiculo> TbDepDetranTransacaoConsultarPendenciasLiberacaoVeiculos { get; set; }

    public virtual DbSet<TbDepDetranTransacaoConsultarVeiculo> TbDepDetranTransacaoConsultarVeiculos { get; set; }

    public virtual DbSet<TbDepDetranTransacaoIncluirVeiculoPatio> TbDepDetranTransacaoIncluirVeiculoPatios { get; set; }

    public virtual DbSet<TbDepDetranTransacaoLiberarVeiculoPatio> TbDepDetranTransacaoLiberarVeiculoPatios { get; set; }

    public virtual DbSet<TbDepDetranTransacaoRecolherVeiculo> TbDepDetranTransacaoRecolherVeiculos { get; set; }

    public virtual DbSet<TbDepDetranTransacaoStatus> TbDepDetranTransacaoStatuses { get; set; }

    public virtual DbSet<TbDepDetranTransacaoTipo> TbDepDetranTransacaoTipos { get; set; }

    public virtual DbSet<TbDepDetroGrv> TbDepDetroGrvs { get; set; }

    public virtual DbSet<TbDepDetroGrvMotivoNaoAutorizado> TbDepDetroGrvMotivoNaoAutorizados { get; set; }

    public virtual DbSet<TbDepEndereco> TbDepEnderecos { get; set; }

    public virtual DbSet<TbDepEnderecoEntrega> TbDepEnderecoEntregas { get; set; }

    public virtual DbSet<TbDepEnquadramentoInfraco> TbDepEnquadramentoInfracoes { get; set; }

    public virtual DbSet<TbDepEquipamentosOpcionai> TbDepEquipamentosOpcionais { get; set; }

    public virtual DbSet<TbDepEquipamentosOpcionaisLocalizacao> TbDepEquipamentosOpcionaisLocalizacaos { get; set; }

    public virtual DbSet<TbDepFaturamento> TbDepFaturamentos { get; set; }

    public virtual DbSet<TbDepFaturamentoBoleto> TbDepFaturamentoBoletos { get; set; }

    public virtual DbSet<TbDepFaturamentoBoletosBak> TbDepFaturamentoBoletosBaks { get; set; }

    public virtual DbSet<TbDepFaturamentoBoletosImagen> TbDepFaturamentoBoletosImagens { get; set; }

    public virtual DbSet<TbDepFaturamentoCartao> TbDepFaturamentoCartaos { get; set; }

    public virtual DbSet<TbDepFaturamentoCodigoAutorizacaoCartao> TbDepFaturamentoCodigoAutorizacaoCartaos { get; set; }

    public virtual DbSet<TbDepFaturamentoComposicao> TbDepFaturamentoComposicaos { get; set; }

    public virtual DbSet<TbDepFaturamentoComposicaoNf> TbDepFaturamentoComposicaoNfs { get; set; }

    public virtual DbSet<TbDepFaturamentoCondicaoPagamento> TbDepFaturamentoCondicaoPagamentos { get; set; }

    public virtual DbSet<TbDepFaturamentoProduto> TbDepFaturamentoProdutos { get; set; }

    public virtual DbSet<TbDepFaturamentoRegra> TbDepFaturamentoRegras { get; set; }

    public virtual DbSet<TbDepFaturamentoRegrasTipo> TbDepFaturamentoRegrasTipos { get; set; }

    public virtual DbSet<TbDepFaturamentoServicosAssociado> TbDepFaturamentoServicosAssociados { get; set; }

    public virtual DbSet<TbDepFaturamentoServicosGrv> TbDepFaturamentoServicosGrvs { get; set; }

    public virtual DbSet<TbDepFaturamentoServicosTipo> TbDepFaturamentoServicosTipos { get; set; }

    public virtual DbSet<TbDepFaturamentoServicosTipoVeiculo> TbDepFaturamentoServicosTipoVeiculos { get; set; }

    public virtual DbSet<TbDepFaturamentoTipoComposicao> TbDepFaturamentoTipoComposicaos { get; set; }

    public virtual DbSet<TbDepFuncionario> TbDepFuncionarios { get; set; }

    public virtual DbSet<TbDepGgvFoto> TbDepGgvFotos { get; set; }

    public virtual DbSet<TbDepGrv> TbDepGrvs { get; set; }

    public virtual DbSet<TbDepGrvBloqueio> TbDepGrvBloqueios { get; set; }

    public virtual DbSet<TbDepGrvBloqueioMotivo> TbDepGrvBloqueioMotivos { get; set; }

    public virtual DbSet<TbDepGrvCancelamento> TbDepGrvCancelamentos { get; set; }

    public virtual DbSet<TbDepGrvClientesCodigoIdentificacao> TbDepGrvClientesCodigoIdentificacaos { get; set; }

    public virtual DbSet<TbDepGrvCobrancasLegai> TbDepGrvCobrancasLegais { get; set; }

    public virtual DbSet<TbDepGrvDocumento> TbDepGrvDocumentos { get; set; }

    public virtual DbSet<TbDepGrvDocumentosQualificacao> TbDepGrvDocumentosQualificacaos { get; set; }

    public virtual DbSet<TbDepGrvDrfa> TbDepGrvDrfas { get; set; }

    public virtual DbSet<TbDepGrvDrfaAgendamentoRetiradum> TbDepGrvDrfaAgendamentoRetirada { get; set; }

    public virtual DbSet<TbDepGrvDrfaArquivoRegistro> TbDepGrvDrfaArquivoRegistros { get; set; }

    public virtual DbSet<TbDepGrvDrfaRegistroRecuperacao> TbDepGrvDrfaRegistroRecuperacaos { get; set; }

    public virtual DbSet<TbDepGrvDrfaTipoRegistro> TbDepGrvDrfaTipoRegistros { get; set; }

    public virtual DbSet<TbDepGrvEnquadramentoInfraco> TbDepGrvEnquadramentoInfracoes { get; set; }

    public virtual DbSet<TbDepGrvFoto> TbDepGrvFotos { get; set; }

    public virtual DbSet<TbDepGrvLacre> TbDepGrvLacres { get; set; }

    public virtual DbSet<TbDepGrvLacresMotivosDesassociacao> TbDepGrvLacresMotivosDesassociacaos { get; set; }

    public virtual DbSet<TbDepGrvMotivoApreensao> TbDepGrvMotivoApreensaos { get; set; }

    public virtual DbSet<TbDepGrvVistoriaArquivoLaudo> TbDepGrvVistoriaArquivoLaudos { get; set; }

    public virtual DbSet<TbDepGrvVistoriaSituacaoChassi> TbDepGrvVistoriaSituacaoChassis { get; set; }

    public virtual DbSet<TbDepGrvVistoriaStatus> TbDepGrvVistoriaStatuses { get; set; }

    public virtual DbSet<TbDepGrvVistorium> TbDepGrvVistoria { get; set; }

    public virtual DbSet<TbDepGtv> TbDepGtvs { get; set; }

    public virtual DbSet<TbDepGtvGrv> TbDepGtvGrvs { get; set; }

    public virtual DbSet<TbDepGtvGrvAvariasRelatada> TbDepGtvGrvAvariasRelatadas { get; set; }

    public virtual DbSet<TbDepGtvMotivosCancelamento> TbDepGtvMotivosCancelamentos { get; set; }

    public virtual DbSet<TbDepLeilaoUsuario> TbDepLeilaoUsuarios { get; set; }

    public virtual DbSet<TbDepLiberacao> TbDepLiberacaos { get; set; }

    public virtual DbSet<TbDepLiberacaoEspecial> TbDepLiberacaoEspecials { get; set; }

    public virtual DbSet<TbDepLiberacaoEspecialTipo> TbDepLiberacaoEspecialTipos { get; set; }

    public virtual DbSet<TbDepLiberacaoLeilao> TbDepLiberacaoLeilaos { get; set; }

    public virtual DbSet<TbDepLiberacaoLeilaoHistorico> TbDepLiberacaoLeilaoHistoricos { get; set; }

    public virtual DbSet<TbDepLiberacaoTipo> TbDepLiberacaoTipos { get; set; }

    public virtual DbSet<TbDepLiberacaoVeiculoOrgao> TbDepLiberacaoVeiculoOrgaos { get; set; }

    public virtual DbSet<TbDepLiberese> TbDepLibereses { get; set; }

    public virtual DbSet<TbDepLibereseCargoUsuario> TbDepLibereseCargoUsuarios { get; set; }

    public virtual DbSet<TbDepLibereseLayout> TbDepLibereseLayouts { get; set; }

    public virtual DbSet<TbDepLogSuporte> TbDepLogSuportes { get; set; }

    public virtual DbSet<TbDepMarcasModelo> TbDepMarcasModelos { get; set; }

    public virtual DbSet<TbDepMetasClienteDeposito> TbDepMetasClienteDepositos { get; set; }

    public virtual DbSet<TbDepMetasClienteDepositoRealizado> TbDepMetasClienteDepositoRealizados { get; set; }

    public virtual DbSet<TbDepMetasGrupo> TbDepMetasGrupos { get; set; }

    public virtual DbSet<TbDepMetasGrupoUsuario> TbDepMetasGrupoUsuarios { get; set; }

    public virtual DbSet<TbDepNfe> TbDepNves { get; set; }

    public virtual DbSet<TbDepNfeConfiguracaoImagem> TbDepNfeConfiguracaoImagems { get; set; }

    public virtual DbSet<TbDepNfeConfiguraco> TbDepNfeConfiguracoes { get; set; }

    public virtual DbSet<TbDepNfeFaturamentoComposicao> TbDepNfeFaturamentoComposicaos { get; set; }

    public virtual DbSet<TbDepNfeImagen> TbDepNfeImagens { get; set; }

    public virtual DbSet<TbDepNfeMensagen> TbDepNfeMensagens { get; set; }

    public virtual DbSet<TbDepNfeNotaFiscal> TbDepNfeNotaFiscals { get; set; }

    public virtual DbSet<TbDepNfePrestadorAvulso> TbDepNfePrestadorAvulsos { get; set; }

    public virtual DbSet<TbDepNfeRegra> TbDepNfeRegras { get; set; }

    public virtual DbSet<TbDepNfeRegrasTipo> TbDepNfeRegrasTipos { get; set; }

    public virtual DbSet<TbDepNfeRetornoSolicitacao> TbDepNfeRetornoSolicitacaos { get; set; }

    public virtual DbSet<TbDepNfeStatusDescricao> TbDepNfeStatusDescricaos { get; set; }

    public virtual DbSet<TbDepNfeWsErro> TbDepNfeWsErros { get; set; }

    public virtual DbSet<TbDepOrgaoExecutivoTransito> TbDepOrgaoExecutivoTransitos { get; set; }

    public virtual DbSet<TbDepPix> TbDepPixes { get; set; }

    public virtual DbSet<TbDepPixDinamico> TbDepPixDinamicos { get; set; }

    public virtual DbSet<TbDepPixDinamicoConfiguracao> TbDepPixDinamicoConfiguracaos { get; set; }

    public virtual DbSet<TbDepPixDinamicoConsultum> TbDepPixDinamicoConsulta { get; set; }

    public virtual DbSet<TbDepPixDinamicoSenhaConfirmacaoTranferencium> TbDepPixDinamicoSenhaConfirmacaoTranferencia { get; set; }

    public virtual DbSet<TbDepPixDinamicoTipoStatusGeracao> TbDepPixDinamicoTipoStatusGeracaos { get; set; }

    public virtual DbSet<TbDepPixDinamicoUrl> TbDepPixDinamicoUrls { get; set; }

    public virtual DbSet<TbDepPreGrv> TbDepPreGrvs { get; set; }

    public virtual DbSet<TbDepPreGrvFoto> TbDepPreGrvFotos { get; set; }

    public virtual DbSet<TbDepPropositoAcesso> TbDepPropositoAcessos { get; set; }

    public virtual DbSet<TbDepPropositoAcessoDeclaracao> TbDepPropositoAcessoDeclaracaos { get; set; }

    public virtual DbSet<TbDepQualificacaoResponsavel> TbDepQualificacaoResponsavels { get; set; }

    public virtual DbSet<TbDepReboque> TbDepReboques { get; set; }

    public virtual DbSet<TbDepReboquesTerceirizado> TbDepReboquesTerceirizados { get; set; }

    public virtual DbSet<TbDepReboquesTerceirizadosTarifa> TbDepReboquesTerceirizadosTarifas { get; set; }

    public virtual DbSet<TbDepReboquista> TbDepReboquistas { get; set; }

    public virtual DbSet<TbDepRepositorioArquivo> TbDepRepositorioArquivos { get; set; }

    public virtual DbSet<TbDepRetornoBancario> TbDepRetornoBancarios { get; set; }

    public virtual DbSet<TbDepRetornoBancarioControle> TbDepRetornoBancarioControles { get; set; }

    public virtual DbSet<TbDepRetornoBancarioLeilaoControle> TbDepRetornoBancarioLeilaoControles { get; set; }

    public virtual DbSet<TbDepRetornoBancarioLeilaoT> TbDepRetornoBancarioLeilaoTs { get; set; }

    public virtual DbSet<TbDepRetornoBancarioLeilaoU> TbDepRetornoBancarioLeilaoUs { get; set; }

    public virtual DbSet<TbDepSapCondicaoPagamento> TbDepSapCondicaoPagamentos { get; set; }

    public virtual DbSet<TbDepSapTipoComposicao> TbDepSapTipoComposicaos { get; set; }

    public virtual DbSet<TbDepSapTipoComposicaoGrupo> TbDepSapTipoComposicaoGrupos { get; set; }

    public virtual DbSet<TbDepSequence> TbDepSequences { get; set; }

    public virtual DbSet<TbDepSimulacaoFaturamento> TbDepSimulacaoFaturamentos { get; set; }

    public virtual DbSet<TbDepSimulacaoFaturamentoComposicao> TbDepSimulacaoFaturamentoComposicaos { get; set; }

    public virtual DbSet<TbDepSistemaAcesso> TbDepSistemaAcessos { get; set; }

    public virtual DbSet<TbDepSistemaModulo> TbDepSistemaModulos { get; set; }

    public virtual DbSet<TbDepSistemaPerfilAcesso> TbDepSistemaPerfilAcessos { get; set; }

    public virtual DbSet<TbDepSistemaPerfilAcessoSubModulo> TbDepSistemaPerfilAcessoSubModulos { get; set; }

    public virtual DbSet<TbDepSistemaPerfilAcessoUsuario> TbDepSistemaPerfilAcessoUsuarios { get; set; }

    public virtual DbSet<TbDepSistemaSubModulo> TbDepSistemaSubModulos { get; set; }

    public virtual DbSet<TbDepSolicitacaoReboque> TbDepSolicitacaoReboques { get; set; }

    public virtual DbSet<TbDepSolicitacaoReboqueDrfa> TbDepSolicitacaoReboqueDrfas { get; set; }

    public virtual DbSet<TbDepSolicitacaoReboqueGrv> TbDepSolicitacaoReboqueGrvs { get; set; }

    public virtual DbSet<TbDepSolicitacaoReboquePsv> TbDepSolicitacaoReboquePsvs { get; set; }

    public virtual DbSet<TbDepSolicitacaoReboqueStatus> TbDepSolicitacaoReboqueStatuses { get; set; }

    public virtual DbSet<TbDepSolicitacaoReboqueTipo> TbDepSolicitacaoReboqueTipos { get; set; }

    public virtual DbSet<TbDepStatusOperaco> TbDepStatusOperacoes { get; set; }

    public virtual DbSet<TbDepTarifa> TbDepTarifas { get; set; }

    public virtual DbSet<TbDepTarifasTipoVeiculo> TbDepTarifasTipoVeiculos { get; set; }

    public virtual DbSet<TbDepTipoCancelamentoGrv> TbDepTipoCancelamentoGrvs { get; set; }

    public virtual DbSet<TbDepTipoVeiculo> TbDepTipoVeiculos { get; set; }

    public virtual DbSet<TbDepTipoVeiculosClassificacao> TbDepTipoVeiculosClassificacaos { get; set; }

    public virtual DbSet<TbDepTipoVeiculosClassificacaoNome> TbDepTipoVeiculosClassificacaoNomes { get; set; }

    public virtual DbSet<TbDepTipoVeiculosEquipamentosAssociacao> TbDepTipoVeiculosEquipamentosAssociacaos { get; set; }

    public virtual DbSet<TbDepTiposCobrancasLegai> TbDepTiposCobrancasLegais { get; set; }

    public virtual DbSet<TbDepTiposCombustivei> TbDepTiposCombustiveis { get; set; }

    public virtual DbSet<TbDepTiposMeiosCobranca> TbDepTiposMeiosCobrancas { get; set; }

    public virtual DbSet<TbDepUsuario> TbDepUsuarios { get; set; }

    public virtual DbSet<TbDepUsuariosCliente> TbDepUsuariosClientes { get; set; }

    public virtual DbSet<TbDepUsuariosDeposito> TbDepUsuariosDepositos { get; set; }

    public virtual DbSet<TbDepUsuariosPermisso> TbDepUsuariosPermissoes { get; set; }

    public virtual DbSet<TbDepUsuariosTiposPermisso> TbDepUsuariosTiposPermissoes { get; set; }

    public virtual DbSet<TbDepUsuariosWa> TbDepUsuariosWas { get; set; }

    public virtual DbSet<TbDepWsUrl> TbDepWsUrls { get; set; }

    public virtual DbSet<TbImpDsinRelatorioSilver> TbImpDsinRelatorioSilvers { get; set; }

    public virtual DbSet<TbLogAcesso> TbLogAcessos { get; set; }

    public virtual DbSet<TbLogAgenciasBancaria> TbLogAgenciasBancarias { get; set; }

    public virtual DbSet<TbLogAgente> TbLogAgentes { get; set; }

    public virtual DbSet<TbLogAlterdataConfiguracao> TbLogAlterdataConfiguracaos { get; set; }

    public virtual DbSet<TbLogAlterdataOperacao> TbLogAlterdataOperacaos { get; set; }

    public virtual DbSet<TbLogAtendimento> TbLogAtendimentos { get; set; }

    public virtual DbSet<TbLogAtendimentoExclusao> TbLogAtendimentoExclusaos { get; set; }

    public virtual DbSet<TbLogAtendimentoFotosResponsavei> TbLogAtendimentoFotosResponsaveis { get; set; }

    public virtual DbSet<TbLogAtendimentoOld> TbLogAtendimentoOlds { get; set; }

    public virtual DbSet<TbLogAutoridadesResponsavei> TbLogAutoridadesResponsaveis { get; set; }

    public virtual DbSet<TbLogClassificaco> TbLogClassificacoes { get; set; }

    public virtual DbSet<TbLogCliente> TbLogClientes { get; set; }

    public virtual DbSet<TbLogClienteDepositoTiposVeiculo> TbLogClienteDepositoTiposVeiculos { get; set; }

    public virtual DbSet<TbLogClientesDeposito> TbLogClientesDepositos { get; set; }

    public virtual DbSet<TbLogCondutor> TbLogCondutors { get; set; }

    public virtual DbSet<TbLogCondutorEquipamentosOpcionai> TbLogCondutorEquipamentosOpcionais { get; set; }

    public virtual DbSet<TbLogConfiguraco> TbLogConfiguracoes { get; set; }

    public virtual DbSet<TbLogDeposito> TbLogDepositos { get; set; }

    public virtual DbSet<TbLogDetroGrv> TbLogDetroGrvs { get; set; }

    public virtual DbSet<TbLogEnquadramentoInfraco> TbLogEnquadramentoInfracoes { get; set; }

    public virtual DbSet<TbLogEquipamentosOpcionai> TbLogEquipamentosOpcionais { get; set; }

    public virtual DbSet<TbLogEquipamentosOpcionaisLocalizacao> TbLogEquipamentosOpcionaisLocalizacaos { get; set; }

    public virtual DbSet<TbLogErrosSistema> TbLogErrosSistemas { get; set; }

    public virtual DbSet<TbLogFaturamento> TbLogFaturamentos { get; set; }

    public virtual DbSet<TbLogFaturamentoBoleto> TbLogFaturamentoBoletos { get; set; }

    public virtual DbSet<TbLogFaturamentoBoletosImagen> TbLogFaturamentoBoletosImagens { get; set; }

    public virtual DbSet<TbLogFaturamentoCodigoAutorizacaoCartao> TbLogFaturamentoCodigoAutorizacaoCartaos { get; set; }

    public virtual DbSet<TbLogFaturamentoComposicao> TbLogFaturamentoComposicaos { get; set; }

    public virtual DbSet<TbLogFaturamentoComposicaoNf> TbLogFaturamentoComposicaoNfs { get; set; }

    public virtual DbSet<TbLogFaturamentoExclusao> TbLogFaturamentoExclusaos { get; set; }

    public virtual DbSet<TbLogFaturamentoRegra> TbLogFaturamentoRegras { get; set; }

    public virtual DbSet<TbLogFaturamentoServicosAssociado> TbLogFaturamentoServicosAssociados { get; set; }

    public virtual DbSet<TbLogFaturamentoServicosGrv> TbLogFaturamentoServicosGrvs { get; set; }

    public virtual DbSet<TbLogFaturamentoServicosTipo> TbLogFaturamentoServicosTipos { get; set; }

    public virtual DbSet<TbLogFaturamentoTemp> TbLogFaturamentoTemps { get; set; }

    public virtual DbSet<TbLogFuncionario> TbLogFuncionarios { get; set; }

    public virtual DbSet<TbLogGeracaoRelatorio> TbLogGeracaoRelatorios { get; set; }

    public virtual DbSet<TbLogGrv> TbLogGrvs { get; set; }

    public virtual DbSet<TbLogGrvClientesCodigoIdentificacao> TbLogGrvClientesCodigoIdentificacaos { get; set; }

    public virtual DbSet<TbLogGrvDrfa> TbLogGrvDrfas { get; set; }

    public virtual DbSet<TbLogGrvDrfaAgendamentoRetiradum> TbLogGrvDrfaAgendamentoRetirada { get; set; }

    public virtual DbSet<TbLogGrvDrfaArquivoRegistro> TbLogGrvDrfaArquivoRegistros { get; set; }

    public virtual DbSet<TbLogGrvDrfaRegistroRecuperacao> TbLogGrvDrfaRegistroRecuperacaos { get; set; }

    public virtual DbSet<TbLogGrvEnquadramentoInfraco> TbLogGrvEnquadramentoInfracoes { get; set; }

    public virtual DbSet<TbLogGrvExclusao> TbLogGrvExclusaos { get; set; }

    public virtual DbSet<TbLogGrvFoto> TbLogGrvFotos { get; set; }

    public virtual DbSet<TbLogGrvLacre> TbLogGrvLacres { get; set; }

    public virtual DbSet<TbLogGrvNew> TbLogGrvNews { get; set; }

    public virtual DbSet<TbLogGrvVistorium> TbLogGrvVistoria { get; set; }

    public virtual DbSet<TbLogLiberacaoEspecial> TbLogLiberacaoEspecials { get; set; }

    public virtual DbSet<TbLogLiberese> TbLogLibereses { get; set; }

    public virtual DbSet<TbLogNfe> TbLogNves { get; set; }

    public virtual DbSet<TbLogNfeRegra> TbLogNfeRegras { get; set; }

    public virtual DbSet<TbLogReboque> TbLogReboques { get; set; }

    public virtual DbSet<TbLogReboquista> TbLogReboquistas { get; set; }

    public virtual DbSet<TbLogRepositorioArquivo> TbLogRepositorioArquivos { get; set; }

    public virtual DbSet<TbLogSistemaPerfilAcesso> TbLogSistemaPerfilAcessos { get; set; }

    public virtual DbSet<TbLogTipoVeiculo> TbLogTipoVeiculos { get; set; }

    public virtual DbSet<TbLogTipoVeiculosEquipamentosAssociacao> TbLogTipoVeiculosEquipamentosAssociacaos { get; set; }

    public virtual DbSet<TbLogTiposCombustivei> TbLogTiposCombustiveis { get; set; }

    public virtual DbSet<TbLogTransmissaoGgv> TbLogTransmissaoGgvs { get; set; }

    public virtual DbSet<TbLogUsuario> TbLogUsuarios { get; set; }

    public virtual DbSet<TbLogUsuariosCliente> TbLogUsuariosClientes { get; set; }

    public virtual DbSet<TbLogUsuariosDeposito> TbLogUsuariosDepositos { get; set; }

    public virtual DbSet<TbLogWebpatiosAcesso> TbLogWebpatiosAcessos { get; set; }

    public virtual DbSet<TbSapCliente> TbSapClientes { get; set; }

    public virtual DbSet<TbSapClientesLeilao> TbSapClientesLeilaos { get; set; }

    public virtual DbSet<TbSapErro> TbSapErros { get; set; }

    public virtual DbSet<TbSapFaturamentoComposicao> TbSapFaturamentoComposicaos { get; set; }

    public virtual DbSet<TbSapFaturamentoComposicaoIten> TbSapFaturamentoComposicaoItens { get; set; }

    public virtual DbSet<TbSapRequest> TbSapRequests { get; set; }

    public virtual DbSet<TbSapRetorno> TbSapRetornos { get; set; }

    public virtual DbSet<TbSapSolicitacao> TbSapSolicitacaos { get; set; }

    public virtual DbSet<TbTipoRelatorio> TbTipoRelatorios { get; set; }

    public virtual DbSet<TdLogVoltarProcesso> TdLogVoltarProcessos { get; set; }

    public virtual DbSet<VwCdxBoleto> VwCdxBoletos { get; set; }

    public virtual DbSet<VwConsultarGrv> VwConsultarGrvs { get; set; }

    public virtual DbSet<VwDashFaturamento> VwDashFaturamentos { get; set; }

    public virtual DbSet<VwDashboardEstoqueVeiculo> VwDashboardEstoqueVeiculos { get; set; }

    public virtual DbSet<VwDashboardQliksense> VwDashboardQliksenses { get; set; }

    public virtual DbSet<VwDashboardQliksenseDetro> VwDashboardQliksenseDetros { get; set; }

    public virtual DbSet<VwDashboardQliksenseResumido> VwDashboardQliksenseResumidos { get; set; }

    public virtual DbSet<VwDepAlterdataDocumento> VwDepAlterdataDocumentos { get; set; }

    public virtual DbSet<VwDepAlterdataLoteBaixa> VwDepAlterdataLoteBaixas { get; set; }

    public virtual DbSet<VwDepAlterdataOperacao> VwDepAlterdataOperacaos { get; set; }

    public virtual DbSet<VwDepAlterdataTituloReceber> VwDepAlterdataTituloRecebers { get; set; }

    public virtual DbSet<VwDepAtendimento> VwDepAtendimentos { get; set; }

    public virtual DbSet<VwDepAtendimentoLiberado> VwDepAtendimentoLiberados { get; set; }

    public virtual DbSet<VwDepAtendimentoRelacionado> VwDepAtendimentoRelacionados { get; set; }

    public virtual DbSet<VwDepAutoridadesResponsavei> VwDepAutoridadesResponsaveis { get; set; }

    public virtual DbSet<VwDepBoleto> VwDepBoletos { get; set; }

    public virtual DbSet<VwDepBoletoOld> VwDepBoletoOlds { get; set; }

    public virtual DbSet<VwDepCliente> VwDepClientes { get; set; }

    public virtual DbSet<VwDepClientesDeposito> VwDepClientesDepositos { get; set; }

    public virtual DbSet<VwDepDetranClienteDepositoApto> VwDepDetranClienteDepositoAptos { get; set; }

    public virtual DbSet<VwDepEquipamentosOpcionai> VwDepEquipamentosOpcionais { get; set; }

    public virtual DbSet<VwDepFaturamento> VwDepFaturamentos { get; set; }

    public virtual DbSet<VwDepFaturamentoComposicao> VwDepFaturamentoComposicaos { get; set; }

    public virtual DbSet<VwDepFaturamentoComposicaoServicoSap> VwDepFaturamentoComposicaoServicoSaps { get; set; }

    public virtual DbSet<VwDepFaturamentoComposicaoServicoSapAberto> VwDepFaturamentoComposicaoServicoSapAbertos { get; set; }

    public virtual DbSet<VwDepFaturamentoRegra> VwDepFaturamentoRegras { get; set; }

    public virtual DbSet<VwDepFaturamentoSemCodigoSap> VwDepFaturamentoSemCodigoSaps { get; set; }

    public virtual DbSet<VwDepFaturamentoServicosAssociado> VwDepFaturamentoServicosAssociados { get; set; }

    public virtual DbSet<VwDepFaturamentoServicosAssociadosVeiculo> VwDepFaturamentoServicosAssociadosVeiculos { get; set; }

    public virtual DbSet<VwDepFaturamentoServicosGrv> VwDepFaturamentoServicosGrvs { get; set; }

    public virtual DbSet<VwDepGrvAptoEmissaoNfe> VwDepGrvAptoEmissaoNves { get; set; }

    public virtual DbSet<VwDepGrvAptoFaturamento> VwDepGrvAptoFaturamentos { get; set; }

    public virtual DbSet<VwDepGrvDocumento> VwDepGrvDocumentos { get; set; }

    public virtual DbSet<VwDepGrvEquipamento> VwDepGrvEquipamentos { get; set; }

    public virtual DbSet<VwDepGrvEquipamentosPorTipoVeiculo> VwDepGrvEquipamentosPorTipoVeiculos { get; set; }

    public virtual DbSet<VwDepLeilaoArrematante> VwDepLeilaoArrematantes { get; set; }

    public virtual DbSet<VwDepLeilaoArrematanteOld> VwDepLeilaoArrematanteOlds { get; set; }

    public virtual DbSet<VwDepLiberacaoLeilao> VwDepLiberacaoLeilaos { get; set; }

    public virtual DbSet<VwDepLiberacaoLeilaoOld> VwDepLiberacaoLeilaoOlds { get; set; }

    public virtual DbSet<VwDepLiberacoesGrv> VwDepLiberacoesGrvs { get; set; }

    public virtual DbSet<VwDepMaxNumeroGrvPorClidep> VwDepMaxNumeroGrvPorClideps { get; set; }

    public virtual DbSet<VwDepNfe> VwDepNves { get; set; }

    public virtual DbSet<VwDepNfeErro> VwDepNfeErros { get; set; }

    public virtual DbSet<VwDepNfeFaturamentoComposicao> VwDepNfeFaturamentoComposicaos { get; set; }

    public virtual DbSet<VwDepNfeFaturamentoComposicaoAgrupado> VwDepNfeFaturamentoComposicaoAgrupados { get; set; }

    public virtual DbSet<VwDepNfeFaturamentoComposicaoAgrupadoDescricao> VwDepNfeFaturamentoComposicaoAgrupadoDescricaos { get; set; }

    public virtual DbSet<VwDepNfeFaturamentoComposicaoAgrupadoDescricaoPorFaturamento> VwDepNfeFaturamentoComposicaoAgrupadoDescricaoPorFaturamentos { get; set; }

    public virtual DbSet<VwDepNfeFaturamentoComposicaoAgrupadoPorFaturamento> VwDepNfeFaturamentoComposicaoAgrupadoPorFaturamentos { get; set; }

    public virtual DbSet<VwDepNfeFaturamentoComposicaoPorFatura> VwDepNfeFaturamentoComposicaoPorFaturas { get; set; }

    public virtual DbSet<VwDepNfeFaturamentoComposicaoTipo> VwDepNfeFaturamentoComposicaoTipos { get; set; }

    public virtual DbSet<VwDepNfeImagen> VwDepNfeImagens { get; set; }

    public virtual DbSet<VwDepNfeRegra> VwDepNfeRegras { get; set; }

    public virtual DbSet<VwDepObterTermoBa> VwDepObterTermoBas { get; set; }

    public virtual DbSet<VwDepPerfilAcessoSubModulo> VwDepPerfilAcessoSubModulos { get; set; }

    public virtual DbSet<VwDepPerfilAcessoUsuario> VwDepPerfilAcessoUsuarios { get; set; }

    public virtual DbSet<VwDepRelatFaturamentoSap> VwDepRelatFaturamentoSaps { get; set; }

    public virtual DbSet<VwDepRelatorioEspelhoGrv> VwDepRelatorioEspelhoGrvs { get; set; }

    public virtual DbSet<VwDepRelatorioLiberacao> VwDepRelatorioLiberacaos { get; set; }

    public virtual DbSet<VwDepRelatorioLiberacaoLeilaoSite> VwDepRelatorioLiberacaoLeilaoSites { get; set; }

    public virtual DbSet<VwDepRelatorioLiberacaoSite> VwDepRelatorioLiberacaoSites { get; set; }

    public virtual DbSet<VwDepRelatorioLiberacaoSiteNovo> VwDepRelatorioLiberacaoSiteNovos { get; set; }

    public virtual DbSet<VwDepRepGrv> VwDepRepGrvs { get; set; }

    public virtual DbSet<VwDepRepGrvRelatorio> VwDepRepGrvRelatorios { get; set; }

    public virtual DbSet<VwDepRepGrvRelatoriosGrv> VwDepRepGrvRelatoriosGrvs { get; set; }

    public virtual DbSet<VwDepRepGuiaPagamentoEstadiaReboque> VwDepRepGuiaPagamentoEstadiaReboques { get; set; }

    public virtual DbSet<VwDepRepGuiaPagamentoEstadiaReboqueSite> VwDepRepGuiaPagamentoEstadiaReboqueSites { get; set; }

    public virtual DbSet<VwDepStatusOperaco> VwDepStatusOperacoes { get; set; }

    public virtual DbSet<VwDepStatusOperacoesGrv> VwDepStatusOperacoesGrvs { get; set; }

    public virtual DbSet<VwDepTarifa> VwDepTarifas { get; set; }

    public virtual DbSet<VwDepTarifasAtivo> VwDepTarifasAtivos { get; set; }

    public virtual DbSet<VwDepTarifasBasico> VwDepTarifasBasicos { get; set; }

    public virtual DbSet<VwDepTarifasTipoVeiculo> VwDepTarifasTipoVeiculos { get; set; }

    public virtual DbSet<VwDepTarifasTipoVeiculosVigente> VwDepTarifasTipoVeiculosVigentes { get; set; }

    public virtual DbSet<VwDepUltimoAtendimento> VwDepUltimoAtendimentos { get; set; }

    public virtual DbSet<VwDepUltimoFaturamento> VwDepUltimoFaturamentos { get; set; }

    public virtual DbSet<VwDepUltimoGrv> VwDepUltimoGrvs { get; set; }

    public virtual DbSet<VwDepUsuariosCliente> VwDepUsuariosClientes { get; set; }

    public virtual DbSet<VwDepUsuariosClientesDeposito> VwDepUsuariosClientesDepositos { get; set; }

    public virtual DbSet<VwDepUsuariosDeposito> VwDepUsuariosDepositos { get; set; }

    public virtual DbSet<VwDepUsuariosNome> VwDepUsuariosNomes { get; set; }

    public virtual DbSet<VwDetranBaAnaliseApreensaoEnvio> VwDetranBaAnaliseApreensaoEnvios { get; set; }

    public virtual DbSet<VwDetranBaAnaliseLiberacaoEnvio> VwDetranBaAnaliseLiberacaoEnvios { get; set; }

    public virtual DbSet<VwDetranRjAnaliseLogEnvio> VwDetranRjAnaliseLogEnvios { get; set; }

    public virtual DbSet<VwEstoqueVeiculo> VwEstoqueVeiculos { get; set; }

    public virtual DbSet<VwFaturamentoAssociadoCnae> VwFaturamentoAssociadoCnaes { get; set; }

    public virtual DbSet<VwGloDetranBaDadosProprietario> VwGloDetranBaDadosProprietarios { get; set; }

    public virtual DbSet<VwGrvAptoEmissaoNfe> VwGrvAptoEmissaoNves { get; set; }

    public virtual DbSet<VwGrvDigitalManual> VwGrvDigitalManuals { get; set; }

    public virtual DbSet<VwLeilao060117v2BoletosEmitido> VwLeilao060117v2BoletosEmitidos { get; set; }

    public virtual DbSet<VwLeilaoBoletosPago> VwLeilaoBoletosPagos { get; set; }

    public virtual DbSet<VwLiberacaoGrv> VwLiberacaoGrvs { get; set; }

    public virtual DbSet<VwNewSapNotasEmitida> VwNewSapNotasEmitidas { get; set; }

    public virtual DbSet<VwReboquesTerceirizado> VwReboquesTerceirizados { get; set; }

    public virtual DbSet<VwRelatEstimativaArrecadacao> VwRelatEstimativaArrecadacaos { get; set; }

    public virtual DbSet<VwRelatEstoqueVeiculo> VwRelatEstoqueVeiculos { get; set; }

    public virtual DbSet<VwRelatRecolhimentoVeicular> VwRelatRecolhimentoVeiculars { get; set; }

    public virtual DbSet<VwRelatVeiculosLiberado> VwRelatVeiculosLiberados { get; set; }

    public virtual DbSet<VwRelatVeiculosRecolhido> VwRelatVeiculosRecolhidos { get; set; }

    public virtual DbSet<VwRelatorioEstoque> VwRelatorioEstoques { get; set; }

    public virtual DbSet<VwRelatorioEstoque04072017> VwRelatorioEstoque04072017s { get; set; }

    public virtual DbSet<VwSapCadastroClienteFinalizado> VwSapCadastroClienteFinalizados { get; set; }

    public virtual DbSet<VwSapCadastroOrdemVendaFinalizado> VwSapCadastroOrdemVendaFinalizados { get; set; }

    public virtual DbSet<VwSapClientesEnviado> VwSapClientesEnviados { get; set; }

    public virtual DbSet<VwSapClientesRetorno> VwSapClientesRetornos { get; set; }

    public virtual DbSet<VwSapCriacaoCliente> VwSapCriacaoClientes { get; set; }

    public virtual DbSet<VwSapErroCadastroCliente> VwSapErroCadastroClientes { get; set; }

    public virtual DbSet<VwSapErroCadastroOrdemVendum> VwSapErroCadastroOrdemVenda { get; set; }

    public virtual DbSet<VwSapNotasEmitida> VwSapNotasEmitidas { get; set; }

    public virtual DbSet<VwSapOrdensVendasEnviada> VwSapOrdensVendasEnviadas { get; set; }

    public virtual DbSet<VwSapOrdensVendasYb01> VwSapOrdensVendasYb01s { get; set; }

    public virtual DbSet<VwSapOrdensVendasYb02> VwSapOrdensVendasYb02s { get; set; }

    public virtual DbSet<VwSapVeiculoLiberado> VwSapVeiculoLiberados { get; set; }

    public virtual DbSet<VwTableDashboardQliksense> VwTableDashboardQliksenses { get; set; }

    public virtual DbSet<VwTableDashboardQliksenseDetro> VwTableDashboardQliksenseDetros { get; set; }

    public virtual DbSet<VwTeste> VwTestes { get; set; }

    public virtual DbSet<VwTipoVeiculoClassificacao> VwTipoVeiculoClassificacaos { get; set; }

    public virtual DbSet<VwTransacoesDetranBaDadosProprietario> VwTransacoesDetranBaDadosProprietarios { get; set; }

    public virtual DbSet<VwTransacoesDetranBaStatus> VwTransacoesDetranBaStatuses { get; set; }

    public virtual DbSet<VwTransacoesDetranRjDadosProprietario> VwTransacoesDetranRjDadosProprietarios { get; set; }

    public virtual DbSet<VwTransacoesDetranRjStatus> VwTransacoesDetranRjStatuses { get; set; }

    public virtual DbSet<VwTransacoesRelatorioPrf> VwTransacoesRelatorioPrves { get; set; }

    public virtual DbSet<VwVeiculosLiberado> VwVeiculosLiberados { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=177.39.16.6;Initial Catalog=dbMobLinkDepositoPublicoDesenvolvimento;User ID=sa;Password=@Studio55Webzi;MultipleActiveResultSets=True;Persist Security Info=True;Transaction Binding=Implicit Unbind;Connection Timeout=60;TrustServerCertificate=True;");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("SQL_Latin1_General_CP1_CI_AS");

        modelBuilder.Entity<TbDepAgenciasBancaria>(entity =>
        {
            entity.HasKey(e => e.IdAgenciaBancaria).HasName("pk_tb_dep_agencias_bancarias");

            entity.ToTable("tb_dep_agencias_bancarias", tb => tb.HasTrigger("tr_log_upd_agencias_bancarias"));

            entity.HasIndex(e => e.IdBanco, "idx_tb_dep_agencias_bancarias1");

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_agencias_bancarias2");

            entity.HasIndex(e => e.IdUsuarioAlteracao, "idx_tb_dep_agencias_bancarias3");

            entity.Property(e => e.IdAgenciaBancaria).HasColumnName("id_agencia_bancaria");
            entity.Property(e => e.CodigoAgencia)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("codigo_agencia");
            entity.Property(e => e.CodigoCedente)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("codigo_cedente");
            entity.Property(e => e.ContaCorrente)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("conta_corrente");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DigitoVerificador)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("digito_verificador");
            entity.Property(e => e.FlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasColumnName("flag_ativo");
            entity.Property(e => e.IdBanco).HasColumnName("id_banco");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.SacadoCarteira)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("sacado_carteira");
            entity.Property(e => e.SapCodigoBanco)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("sap_codigo_banco");

            entity.HasOne(d => d.IdUsuarioAlteracaoNavigation).WithMany(p => p.TbDepAgenciasBancariaIdUsuarioAlteracaoNavigations)
                .HasForeignKey(d => d.IdUsuarioAlteracao)
                .HasConstraintName("fk_tb_dep_agencias_bancarias3");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.TbDepAgenciasBancariaIdUsuarioCadastroNavigations)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_agencias_bancarias2");
        });

        modelBuilder.Entity<TbDepAgente>(entity =>
        {
            entity.HasKey(e => e.AgenteId);

            entity.ToTable("tb_dep_agentes", tb => tb.HasTrigger("tr_log_upd_agentes"));

            entity.HasIndex(e => e.AutoridadeResponsavelId, "IDX_tb_dep_agentes1");

            entity.HasIndex(e => e.TipoProfissaoId, "IDX_tb_dep_agentes2");

            entity.HasIndex(e => e.OrgaoEmissorId, "IDX_tb_dep_agentes3");

            entity.HasIndex(e => e.AutoridadeDivisaoId, "IDX_tb_dep_agentes4");

            entity.HasIndex(e => e.UsuarioCadastroId, "IDX_tb_dep_agentes5");

            entity.HasIndex(e => e.UsuarioAlteracaoId, "IDX_tb_dep_agentes6");

            entity.Property(e => e.AgenteId).HasColumnName("AgenteID");
            entity.Property(e => e.AutoridadeDivisaoId).HasColumnName("AutoridadeDivisaoID");
            entity.Property(e => e.AutoridadeResponsavelId).HasColumnName("AutoridadeResponsavelID");
            entity.Property(e => e.DataAlteracao).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.DataDesativacao).HasColumnType("smalldatetime");
            entity.Property(e => e.DataUltimaAlteracaoSenha).HasColumnType("smalldatetime");
            entity.Property(e => e.DataUltimoLogin).HasColumnType("smalldatetime");
            entity.Property(e => e.FlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength();
            entity.Property(e => e.Login)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Matricula)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Nome)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.OrgaoEmissorId).HasColumnName("OrgaoEmissorID");
            entity.Property(e => e.Senha)
                .IsRequired()
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasDefaultValueSql("(hashbytes('MD5','NONE'))");
            entity.Property(e => e.TipoProfissaoId).HasColumnName("TipoProfissaoID");
            entity.Property(e => e.UsuarioAlteracaoId).HasColumnName("UsuarioAlteracaoID");
            entity.Property(e => e.UsuarioCadastroId).HasColumnName("UsuarioCadastroID");

            entity.HasOne(d => d.AutoridadeResponsavel).WithMany(p => p.TbDepAgentes)
                .HasForeignKey(d => d.AutoridadeResponsavelId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tb_dep_agentes1");

            entity.HasOne(d => d.UsuarioAlteracao).WithMany(p => p.TbDepAgenteUsuarioAlteracaos)
                .HasForeignKey(d => d.UsuarioAlteracaoId)
                .HasConstraintName("FK_tb_dep_agentes3");

            entity.HasOne(d => d.UsuarioCadastro).WithMany(p => p.TbDepAgenteUsuarioCadastros)
                .HasForeignKey(d => d.UsuarioCadastroId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tb_dep_agentes2");
        });

        modelBuilder.Entity<TbDepAgentesImagemAssinatura>(entity =>
        {
            entity.HasKey(e => e.AgenteImagemAssinaturaId);

            entity.ToTable("tb_dep_agentes_imagem_assinatura");

            entity.HasIndex(e => e.AgenteId, "IDX_tb_dep_agentes_imagem_assinatura1").IsUnique();

            entity.Property(e => e.AgenteImagemAssinaturaId).HasColumnName("AgenteImagemAssinaturaID");
            entity.Property(e => e.AgenteId).HasColumnName("AgenteID");

            entity.HasOne(d => d.Agente).WithOne(p => p.TbDepAgentesImagemAssinatura)
                .HasForeignKey<TbDepAgentesImagemAssinatura>(d => d.AgenteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tb_dep_agentes_imagem_assinatura1");
        });

        modelBuilder.Entity<TbDepAlterdataConfiguracao>(entity =>
        {
            entity.HasKey(e => e.AlterDataConfiguracaoId);

            entity.ToTable("tb_dep_alterdata_configuracao", tb => tb.HasTrigger("tr_log_upd_alterdata_configuracao"));

            entity.HasIndex(e => e.ClienteDepositoId, "IDX_tb_dep_alterdata_configuracao1").IsUnique();

            entity.HasIndex(e => e.IdentificadorNaturezaLancamentoId, "IDX_tb_dep_alterdata_configuracao2");

            entity.HasIndex(e => e.UsuarioCadastroId, "IDX_tb_dep_alterdata_configuracao3");

            entity.HasIndex(e => e.UsuarioAlteracaoId, "IDX_tb_dep_alterdata_configuracao4");

            entity.Property(e => e.CodigoEmpresa)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DataAlteracao).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasDefaultValueSql("((1))");

            entity.HasOne(d => d.ClienteDeposito).WithOne(p => p.TbDepAlterdataConfiguracao)
                .HasForeignKey<TbDepAlterdataConfiguracao>(d => d.ClienteDepositoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tb_dep_alterdata_configuracao1");

            entity.HasOne(d => d.IdentificadorNaturezaLancamento).WithMany(p => p.TbDepAlterdataConfiguracaos)
                .HasForeignKey(d => d.IdentificadorNaturezaLancamentoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tb_dep_alterdata_configuracao2");

            entity.HasOne(d => d.UsuarioAlteracao).WithMany(p => p.TbDepAlterdataConfiguracaoUsuarioAlteracaos)
                .HasForeignKey(d => d.UsuarioAlteracaoId)
                .HasConstraintName("FK_tb_dep_alterdata_configuracao4");

            entity.HasOne(d => d.UsuarioCadastro).WithMany(p => p.TbDepAlterdataConfiguracaoUsuarioCadastros)
                .HasForeignKey(d => d.UsuarioCadastroId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tb_dep_alterdata_configuracao3");
        });

        modelBuilder.Entity<TbDepAlterdataConfiguracaoCfop>(entity =>
        {
            entity.HasKey(e => e.CfopId);

            entity.ToTable("tb_dep_alterdata_configuracao_cfop");

            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Descricao)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TbDepAlterdataConfiguracaoIdentificadorFormaPagamento>(entity =>
        {
            entity.HasKey(e => e.IdentificadorFormaPagamentoId);

            entity.ToTable("tb_dep_alterdata_configuracao_identificador_forma_pagamento");

            entity.HasIndex(e => e.TipoMeioCobrancaId, "IDX_tb_dep_alterdata_configuracao_identificador_forma_pagamento1");

            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.TipoMeioCobranca).WithMany(p => p.TbDepAlterdataConfiguracaoIdentificadorFormaPagamentos)
                .HasForeignKey(d => d.TipoMeioCobrancaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tb_dep_alterdata_configuracao_identificador_forma_pagamento1");
        });

        modelBuilder.Entity<TbDepAlterdataConfiguracaoIdentificadorNaturezaLancamento>(entity =>
        {
            entity.HasKey(e => e.IdentificadorNaturezaLancamentoId);

            entity.ToTable("tb_dep_alterdata_configuracao_identificador_natureza_lancamento");

            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Descricao)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TbDepAlterdataConfiguracaoIdentificadorProduto>(entity =>
        {
            entity.HasKey(e => e.IdentificadorProdutoId);

            entity.ToTable("tb_dep_alterdata_configuracao_identificador_produto");

            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Descricao)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TbDepAlterdataConfiguracaoOperacao>(entity =>
        {
            entity.HasKey(e => e.OperacaoId);

            entity.ToTable("tb_dep_alterdata_configuracao_operacao");

            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TbDepAlterdataContaBancariaExecucao>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tb_dep_alterdata_conta_bancaria_execucao");

            entity.Property(e => e.DataExecucao).HasColumnType("datetime");
        });

        modelBuilder.Entity<TbDepAlterdataContaBancarium>(entity =>
        {
            entity.HasKey(e => e.AlterDataContaBancariaId);

            entity.ToTable("tb_dep_alterdata_conta_bancaria");

            entity.HasIndex(e => e.ClienteId, "IDX_tb_dep_alterdata_conta_bancaria1");

            entity.HasIndex(e => e.Identificador, "IDX_tb_dep_alterdata_conta_bancaria2").IsUnique();

            entity.Property(e => e.Agencia)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Ativa)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.Descricao)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Identificador)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NumeroConta)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.Cliente).WithMany(p => p.TbDepAlterdataContaBancaria)
                .HasForeignKey(d => d.ClienteId)
                .HasConstraintName("FK_tb_dep_alterdata_conta_bancaria1");
        });

        modelBuilder.Entity<TbDepAlterdataCredencial>(entity =>
        {
            entity.HasKey(e => e.AlterDataCredencialId);

            entity.ToTable("tb_dep_alterdata_credencial");

            entity.Property(e => e.AlterDataCredencialId).ValueGeneratedOnAdd();
            entity.Property(e => e.ApiHostUrl)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ApiOauthUrl)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ApiUrl)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientSecret)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TbDepAlterdataDocumento>(entity =>
        {
            entity.HasKey(e => e.AlterDataDocumentoId);

            entity.ToTable("tb_dep_alterdata_documento");

            entity.HasIndex(e => new { e.NfeId, e.Identificador }, "IDX_tb_dep_alterdata_documento1").IsUnique();

            entity.HasIndex(e => e.Identificador, "IDX_tb_dep_alterdata_documento2");

            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.DataDeBaixa).HasColumnType("datetime");
            entity.Property(e => e.Identificador)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.IdentificadorFormaPagamento)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.IdentificadorLoteEstoque)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ItemIdentificador)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ItemIdentificadorProduto)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.JsonEnvio)
                .IsRequired()
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.JsonRetorno)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.PagamentoIdentificador)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TituloReceberEnviado)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength();

            entity.HasOne(d => d.Nfe).WithMany(p => p.TbDepAlterdataDocumentos)
                .HasForeignKey(d => d.NfeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tb_dep_alterdata_documento1");
        });

        modelBuilder.Entity<TbDepAlterdataErro>(entity =>
        {
            entity.HasKey(e => e.AlterDataErroId);

            entity.ToTable("tb_dep_alterdata_erro");

            entity.HasIndex(e => e.GrvOrigemId, "IDX_tb_dep_alterdata_erro1");

            entity.Property(e => e.CodigoErro)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.JsonEnvio)
                .IsRequired()
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.JsonRetorno)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.MensagemErro)
                .IsRequired()
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.MetodoOrigemErro)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.GrvOrigem).WithMany(p => p.TbDepAlterdataErros)
                .HasForeignKey(d => d.GrvOrigemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tb_dep_alterdata_erro1");
        });

        modelBuilder.Entity<TbDepAlterdataLoteBaixa>(entity =>
        {
            entity.HasKey(e => e.AlterDataLoteBaixaId);

            entity.ToTable("tb_dep_alterdata_lote_baixa");

            entity.HasIndex(e => e.AlterDataTituloReceberId, "IDX_tb_dep_alterdata_lote_baixa1");

            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.Identificador)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.JsonEnvio)
                .IsRequired()
                .HasMaxLength(400)
                .IsUnicode(false);
            entity.Property(e => e.JsonRetorno)
                .IsRequired()
                .HasMaxLength(400)
                .IsUnicode(false);

            entity.HasOne(d => d.AlterDataTituloReceber).WithMany(p => p.TbDepAlterdataLoteBaixas)
                .HasForeignKey(d => d.AlterDataTituloReceberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tb_dep_alterdata_lote_baixa1");
        });

        modelBuilder.Entity<TbDepAlterdataOperacao>(entity =>
        {
            entity.HasKey(e => e.AlterDataOperacaoId);

            entity.ToTable("tb_dep_alterdata_operacao", tb => tb.HasTrigger("tr_log_upd_alterdata_operacao"));

            entity.HasIndex(e => e.AlterDataConfiguracaoId, "IDX_tb_dep_alterdata_operacao1");

            entity.HasIndex(e => e.OperacaoId, "IDX_tb_dep_alterdata_operacao2");

            entity.HasIndex(e => e.ParametroMunicipioId, "IDX_tb_dep_alterdata_operacao3");

            entity.HasIndex(e => e.CfopId, "IDX_tb_dep_alterdata_operacao4");

            entity.HasIndex(e => e.IdentificadorProdutoId, "IDX_tb_dep_alterdata_operacao5");

            entity.HasIndex(e => e.UsuarioCadastroId, "IDX_tb_dep_alterdata_operacao6");

            entity.HasIndex(e => e.UsuarioAlteracaoId, "IDX_tb_dep_alterdata_operacao7");

            entity.Property(e => e.DataAlteracao).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");

            entity.HasOne(d => d.AlterDataConfiguracao).WithMany(p => p.TbDepAlterdataOperacaos)
                .HasForeignKey(d => d.AlterDataConfiguracaoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tb_dep_alterdata_operacao1");

            entity.HasOne(d => d.Cfop).WithMany(p => p.TbDepAlterdataOperacaos)
                .HasForeignKey(d => d.CfopId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tb_dep_alterdata_operacao2");

            entity.HasOne(d => d.IdentificadorProduto).WithMany(p => p.TbDepAlterdataOperacaos)
                .HasForeignKey(d => d.IdentificadorProdutoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tb_dep_alterdata_operacao3");

            entity.HasOne(d => d.UsuarioAlteracao).WithMany(p => p.TbDepAlterdataOperacaoUsuarioAlteracaos)
                .HasForeignKey(d => d.UsuarioAlteracaoId)
                .HasConstraintName("FK_tb_dep_alterdata_operacao5");

            entity.HasOne(d => d.UsuarioCadastro).WithMany(p => p.TbDepAlterdataOperacaoUsuarioCadastros)
                .HasForeignKey(d => d.UsuarioCadastroId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tb_dep_alterdata_operacao4");
        });

        modelBuilder.Entity<TbDepAlterdataRetorno>(entity =>
        {
            entity.HasKey(e => e.AlterDataRetornoId);

            entity.ToTable("tb_dep_alterdata_retorno");

            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.Envio)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.Metodo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Retorno)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.Token)
                .IsRequired()
                .HasMaxLength(1000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TbDepAlterdataTituloReceber>(entity =>
        {
            entity.HasKey(e => e.AlterDataTituloReceberId);

            entity.ToTable("tb_dep_alterdata_titulo_receber");

            entity.HasIndex(e => e.AlterDataDocumentoId, "IDX_tb_dep_alterdata_titulo_receber1");

            entity.Property(e => e.CodigoEmpresa)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.Identificador)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.JsonEnvio)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.JsonRetorno)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.LoteBaixaEnviado)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength();

            entity.HasOne(d => d.AlterDataDocumento).WithMany(p => p.TbDepAlterdataTituloRecebers)
                .HasForeignKey(d => d.AlterDataDocumentoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tb_dep_alterdata_titulo_receber1");
        });

        modelBuilder.Entity<TbDepAlterdatum>(entity =>
        {
            entity.HasKey(e => e.AlterDataId).HasName("PK_dep_alterdata");

            entity.ToTable("tb_dep_alterdata");

            entity.HasIndex(e => e.Identificador, "IDX_tb_dep_alterdata1").IsUnique();

            entity.HasIndex(e => e.GrvOrigemId, "IDX_tb_dep_alterdata2").IsUnique();

            entity.HasIndex(e => e.UsuarioCadastroId, "IDX_tb_dep_alterdata3");

            entity.HasIndex(e => e.TipoDocumentoIdentificacaoId, "IDX_tb_dep_alterdata4");

            entity.HasIndex(e => e.Documento, "IDX_tb_dep_alterdata5");

            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.Documento)
                .IsRequired()
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.Identificador)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.JsonEnvio)
                .IsRequired()
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.JsonRetorno)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false);

            entity.HasOne(d => d.GrvOrigem).WithOne(p => p.TbDepAlterdatum)
                .HasForeignKey<TbDepAlterdatum>(d => d.GrvOrigemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dep_alterdata1");

            entity.HasOne(d => d.UsuarioCadastro).WithMany(p => p.TbDepAlterdata)
                .HasForeignKey(d => d.UsuarioCadastroId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dep_alterdata2");
        });

        modelBuilder.Entity<TbDepApreensaoVeiculoOrgao>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tb_dep_apreensao_veiculo_orgaos");

            entity.HasIndex(e => e.IdGrv, "_coisdio");

            entity.Property(e => e.Chassi)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("chassi");
            entity.Property(e => e.CodDeposito)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cod_deposito");
            entity.Property(e => e.CodMotivo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cod_motivo");
            entity.Property(e => e.CodigoDetran)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codigo_detran");
            entity.Property(e => e.CodigoRetorno).HasColumnName("codigo_retorno");
            entity.Property(e => e.DataApre)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("data_apre");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.HoraApre)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("hora_apre");
            entity.Property(e => e.IdApreensaoVeiculoOrgao)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_apreensao_veiculo_orgao");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.JsonEnvio)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("jsonEnvio");
            entity.Property(e => e.JsonRetorno)
                .IsRequired()
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("jsonRetorno");
            entity.Property(e => e.Matricula)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("matricula");
            entity.Property(e => e.MensagemRetorno)
                .IsUnicode(false)
                .HasColumnName("mensagem_retorno");
            entity.Property(e => e.NumeroAutoRetirada)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("numero_auto_retirada");
            entity.Property(e => e.Observacao)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("observacao");
            entity.Property(e => e.Password)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("password");
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("placa");
            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status");
            entity.Property(e => e.TipoEntrada)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo_entrada");
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("username");
        });

        modelBuilder.Entity<TbDepAtendimento>(entity =>
        {
            entity.HasKey(e => e.IdAtendimento).HasName("pk_tb_dep_atendimento");

            entity.ToTable("tb_dep_atendimento", tb =>
                {
                    tb.HasTrigger("tr_log_del_atendimento");
                    tb.HasTrigger("tr_log_upd_atendimento");
                });

            entity.HasIndex(e => e.IdGrv, "idx_tb_dep_atendimento1").IsUnique();

            entity.HasIndex(e => e.IdQualificacaoResponsavel, "idx_tb_dep_atendimento2");

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_atendimento3");

            entity.HasIndex(e => e.IdUsuarioAlteracao, "idx_tb_dep_atendimento4");

            entity.HasIndex(e => e.NotaFiscalCpf, "idx_tb_dep_atendimento5");

            entity.HasIndex(e => e.NotaFiscalCep, "idx_tb_dep_atendimento6");

            entity.Property(e => e.IdAtendimento).HasColumnName("id_atendimento");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataHoraInicioAtendimento)
                .HasColumnType("datetime")
                .HasColumnName("data_hora_inicio_atendimento");
            entity.Property(e => e.DataImpressao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_impressao");
            entity.Property(e => e.FlagAtendimentoWs)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_atendimento_ws");
            entity.Property(e => e.FlagPagamentoFinanciado)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_pagamento_financiado");
            entity.Property(e => e.FormaLiberacao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("forma_liberacao");
            entity.Property(e => e.FormaLiberacaoCnh)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("forma_liberacao_cnh");
            entity.Property(e => e.FormaLiberacaoCpf)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("forma_liberacao_cpf");
            entity.Property(e => e.FormaLiberacaoNome)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("forma_liberacao_nome");
            entity.Property(e => e.FormaLiberacaoPlaca)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("forma_liberacao_placa");
            entity.Property(e => e.IdDocumentoSap)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_documento_sap");
            entity.Property(e => e.IdEmpresaFaturamento).HasColumnName("id_empresa_faturamento");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdPessoaFaturamento).HasColumnName("id_pessoa_faturamento");
            entity.Property(e => e.IdQualificacaoResponsavel).HasColumnName("id_qualificacao_responsavel");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.NotaFiscalBairro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_bairro");
            entity.Property(e => e.NotaFiscalCep)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nota_fiscal_cep");
            entity.Property(e => e.NotaFiscalComplemento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_complemento");
            entity.Property(e => e.NotaFiscalCpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_cpf");
            entity.Property(e => e.NotaFiscalDdd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nota_fiscal_ddd");
            entity.Property(e => e.NotaFiscalEmail)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_email");
            entity.Property(e => e.NotaFiscalEndereco)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_endereco");
            entity.Property(e => e.NotaFiscalIdTipoLogradouro).HasColumnName("nota_fiscal_id_tipo_logradouro");
            entity.Property(e => e.NotaFiscalInscricaoMunicipal)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_inscricao_municipal");
            entity.Property(e => e.NotaFiscalMunicipio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_municipio");
            entity.Property(e => e.NotaFiscalNome)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_nome");
            entity.Property(e => e.NotaFiscalNumero)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_numero");
            entity.Property(e => e.NotaFiscalTelefone)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_telefone");
            entity.Property(e => e.NotaFiscalUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nota_fiscal_uf");
            entity.Property(e => e.ProprietarioBairro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("proprietario_bairro");
            entity.Property(e => e.ProprietarioCep)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("proprietario_cep");
            entity.Property(e => e.ProprietarioComplemento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("proprietario_complemento");
            entity.Property(e => e.ProprietarioDdd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("proprietario_ddd");
            entity.Property(e => e.ProprietarioDocumento)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("proprietario_documento");
            entity.Property(e => e.ProprietarioEndereco)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("proprietario_endereco");
            entity.Property(e => e.ProprietarioIdTipoDocumento).HasColumnName("proprietario_id_tipo_documento");
            entity.Property(e => e.ProprietarioMunicipio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("proprietario_municipio");
            entity.Property(e => e.ProprietarioNome)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("proprietario_nome");
            entity.Property(e => e.ProprietarioNumero)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("proprietario_numero");
            entity.Property(e => e.ProprietarioTelefone)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("proprietario_telefone");
            entity.Property(e => e.ProprietarioUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("proprietario_uf");
            entity.Property(e => e.ResponsavelBairro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("responsavel_bairro");
            entity.Property(e => e.ResponsavelCep)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("responsavel_cep");
            entity.Property(e => e.ResponsavelCnh)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("responsavel_cnh");
            entity.Property(e => e.ResponsavelComplemento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("responsavel_complemento");
            entity.Property(e => e.ResponsavelDdd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("responsavel_ddd");
            entity.Property(e => e.ResponsavelDocumento)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("responsavel_documento");
            entity.Property(e => e.ResponsavelEndereco)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("responsavel_endereco");
            entity.Property(e => e.ResponsavelMunicipio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("responsavel_municipio");
            entity.Property(e => e.ResponsavelNome)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("responsavel_nome");
            entity.Property(e => e.ResponsavelNumero)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("responsavel_numero");
            entity.Property(e => e.ResponsavelTelefone)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("responsavel_telefone");
            entity.Property(e => e.ResponsavelUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("responsavel_uf");
            entity.Property(e => e.StatusCadastroOrdensVendaSap)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("status_cadastro_ordens_venda_sap");
            entity.Property(e => e.StatusCadastroSap)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("status_cadastro_sap");
            entity.Property(e => e.TotalImpressoes).HasColumnName("total_impressoes");

            entity.HasOne(d => d.IdGrvNavigation).WithOne(p => p.TbDepAtendimento)
                .HasForeignKey<TbDepAtendimento>(d => d.IdGrv)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_atendimento2");

            entity.HasOne(d => d.IdQualificacaoResponsavelNavigation).WithMany(p => p.TbDepAtendimentos)
                .HasForeignKey(d => d.IdQualificacaoResponsavel)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_atendimento3");

            entity.HasOne(d => d.IdUsuarioAlteracaoNavigation).WithMany(p => p.TbDepAtendimentoIdUsuarioAlteracaoNavigations)
                .HasForeignKey(d => d.IdUsuarioAlteracao)
                .HasConstraintName("fk_tb_dep_atendimento5");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.TbDepAtendimentoIdUsuarioCadastroNavigations)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_atendimento4");
        });

        modelBuilder.Entity<TbDepAtendimentoFotosResponsavei>(entity =>
        {
            entity.HasKey(e => e.IdAtendimentoFotoResponsavel).HasName("pk_tb_dep_atendimento_fotos_responsaveis");

            entity.ToTable("tb_dep_atendimento_fotos_responsaveis", tb => tb.HasTrigger("tr_del_atendimento_fotos_responsaveis"));

            entity.HasIndex(e => e.IdAtendimento, "idx_tb_dep_atendimento_fotos_responsaveis1");

            entity.Property(e => e.IdAtendimentoFotoResponsavel).HasColumnName("id_atendimento_foto_responsavel");
            entity.Property(e => e.Foto).HasColumnName("foto");
            entity.Property(e => e.IdAtendimento).HasColumnName("id_atendimento");

            entity.HasOne(d => d.IdAtendimentoNavigation).WithMany(p => p.TbDepAtendimentoFotosResponsaveis)
                .HasForeignKey(d => d.IdAtendimento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_atendimento_fotos_responsaveis1");
        });

        modelBuilder.Entity<TbDepAtendimentoSaidaReparo>(entity =>
        {
            entity.ToTable("tb_dep_atendimento_saida_reparo");

            entity.HasIndex(e => e.AtendimentoId, "idx_tb_dep_atendimento_saida_reparo1");

            entity.Property(e => e.DataPrevisaoRetorno).HasColumnType("smalldatetime");
            entity.Property(e => e.DataSaida).HasColumnType("smalldatetime");
            entity.Property(e => e.MotivoSaida)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false);

            entity.HasOne(d => d.Atendimento).WithMany(p => p.TbDepAtendimentoSaidaReparos)
                .HasForeignKey(d => d.AtendimentoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tb_dep_atendimento_saida_reparo1");
        });

        modelBuilder.Entity<TbDepAutoridadesClientesDeposito>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tb_dep_autoridades_clientes_depositos");

            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.FlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasColumnName("flag_ativo");
            entity.Property(e => e.IdAutoridadeClienteDeposito)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_autoridade_cliente_deposito");
            entity.Property(e => e.IdAutoridadeResponsavel).HasColumnName("id_autoridade_responsavel");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
        });

        modelBuilder.Entity<TbDepAutoridadesResponsavei>(entity =>
        {
            entity.HasKey(e => e.IdAutoridadeResponsavel).HasName("pk_tb_dep_autoridades_responsaveis1");

            entity.ToTable("tb_dep_autoridades_responsaveis");

            entity.HasIndex(e => e.IdOrgaoEmissor, "idx_tb_dep_autoridades_responsaveis1");

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_autoridades_responsaveis2");

            entity.HasIndex(e => e.IdUsuarioAlteracao, "idx_tb_dep_autoridades_responsaveis3");

            entity.Property(e => e.IdAutoridadeResponsavel).HasColumnName("id_autoridade_responsavel");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.Divisao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("divisao");
            entity.Property(e => e.FlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasColumnName("flag_ativo");
            entity.Property(e => e.IdExterno).HasColumnName("id_externo");
            entity.Property(e => e.IdOrgaoEmissor).HasColumnName("id_orgao_emissor");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");

            entity.HasOne(d => d.IdUsuarioAlteracaoNavigation).WithMany(p => p.TbDepAutoridadesResponsaveiIdUsuarioAlteracaoNavigations)
                .HasForeignKey(d => d.IdUsuarioAlteracao)
                .HasConstraintName("fk_tb_dep_autoridades_responsaveis2");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.TbDepAutoridadesResponsaveiIdUsuarioCadastroNavigations)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_autoridades_responsaveis1");
        });

        modelBuilder.Entity<TbDepBanco>(entity =>
        {
            entity.HasKey(e => e.IdBanco).HasName("pk_tb_dep_bancos");

            entity.ToTable("tb_dep_bancos");

            entity.HasIndex(e => e.CodigoFebraban, "idx_tb_dep_bancos1").IsUnique();

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_bancos2");

            entity.HasIndex(e => e.IdUsuarioAlteracao, "idx_tb_dep_bancos3");

            entity.Property(e => e.IdBanco).HasColumnName("id_banco");
            entity.Property(e => e.CodigoFebraban)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("codigo_febraban");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.FlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasColumnName("flag_ativo");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.Nome)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nome");

            entity.HasOne(d => d.IdUsuarioAlteracaoNavigation).WithMany(p => p.TbDepBancoIdUsuarioAlteracaoNavigations)
                .HasForeignKey(d => d.IdUsuarioAlteracao)
                .HasConstraintName("fk_tb_dep_bancos2");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.TbDepBancoIdUsuarioCadastroNavigations)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_bancos1");
        });

        modelBuilder.Entity<TbDepClassificaco>(entity =>
        {
            entity.HasKey(e => e.IdClassificao).HasName("pk_tb_dep_classificacoes1");

            entity.ToTable("tb_dep_classificacoes", tb => tb.HasTrigger("tr_log_upd_classificacoes"));

            entity.HasIndex(e => e.IdClassificao, "idx_tb_dep_classificacoes1");

            entity.HasIndex(e => e.Descricao, "idx_tb_dep_classificacoes2");

            entity.HasIndex(e => e.IdUsuario, "idx_tb_dep_classificacoes3");

            entity.Property(e => e.IdClassificao)
                .ValueGeneratedOnAdd()
                .HasColumnType("numeric(3, 0)")
                .HasColumnName("id_classificao");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasColumnName("status");

            entity.HasOne(d => d.IdUsuarioNavigation).WithMany(p => p.TbDepClassificacos)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_classificacoes1");
        });

        modelBuilder.Entity<TbDepCliente>(entity =>
        {
            entity.HasKey(e => e.IdCliente).HasName("pk_tb_dep_clientes");

            entity.ToTable("tb_dep_clientes", tb =>
                {
                    tb.HasComment("Esta coluna informa se o Cliente possui um Código que representa o GRV em seu próprio cadastro, caso positivo o Depósito Público habilita a coluna label_cliente_codigo_identificacao.");
                    tb.HasTrigger("tr_log_upd_clientes");
                });

            entity.HasIndex(e => e.IdCliente, "idx_tb_dep_clientes1");

            entity.HasIndex(e => e.IdAgenciaBancaria, "idx_tb_dep_clientes2");

            entity.HasIndex(e => e.IdCep, "idx_tb_dep_clientes3");

            entity.HasIndex(e => e.IdTipoLogradouro, "idx_tb_dep_clientes4");

            entity.HasIndex(e => e.IdBairro, "idx_tb_dep_clientes5");

            entity.HasIndex(e => e.IdTipoMeioCobranca, "idx_tb_dep_clientes6");

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_clientes7");

            entity.HasIndex(e => e.IdUsuarioAlteracao, "idx_tb_dep_clientes8");

            entity.HasIndex(e => e.IdEmpresa, "idx_tb_dep_clientes9");

            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.Cnpj)
                .IsRequired()
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("cnpj");
            entity.Property(e => e.CodigoOrgao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("codigo_orgao");
            entity.Property(e => e.CodigoSap)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("codigo_sap");
            entity.Property(e => e.Complemento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("complemento");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.FlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasColumnName("flag_ativo");
            entity.Property(e => e.FlagCadastrarQuilometragem)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasColumnName("flag_cadastrar_quilometragem");
            entity.Property(e => e.FlagClienteRealizaFaturamentoArrecadacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_cliente_realiza_faturamento_arrecadacao");
            entity.Property(e => e.FlagCobrarDiariasDiasCorridos)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_cobrar_diarias_dias_corridos");
            entity.Property(e => e.FlagEmissaoNotaFiscalSap)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasColumnName("flag_emissao_nota_fiscal_sap");
            entity.Property(e => e.FlagEnderecoCadastroManual)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_endereco_cadastro_manual");
            entity.Property(e => e.FlagLancarIpvaMultas)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_lancar_ipva_multas");
            entity.Property(e => e.FlagPermiteAlteracaoTipoVeiculo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_permite_alteracao_tipo_veiculo");
            entity.Property(e => e.FlagPossuiClienteCodigoIdentificacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_possui_cliente_codigo_identificacao");
            entity.Property(e => e.FlagPossuiPix)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FlagPossuiPixDinamico)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength();
            entity.Property(e => e.FlagPossuiPixEstatico)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength();
            entity.Property(e => e.FlagUsarHoraDiaria)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasColumnName("flag_usar_hora_diaria");
            entity.Property(e => e.GpsLatitude)
                .HasColumnType("numeric(10, 8)")
                .HasColumnName("gps_latitude");
            entity.Property(e => e.GpsLongitude)
                .HasColumnType("numeric(10, 8)")
                .HasColumnName("gps_longitude");
            entity.Property(e => e.HoraDiaria)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValueSql("('00:00')")
                .HasColumnName("hora_diaria");
            entity.Property(e => e.IdAgenciaBancaria).HasColumnName("id_agencia_bancaria");
            entity.Property(e => e.IdBairro).HasColumnName("id_bairro");
            entity.Property(e => e.IdCep).HasColumnName("id_cep");
            entity.Property(e => e.IdEmpresa).HasColumnName("id_empresa");
            entity.Property(e => e.IdOrgaoExecutivoTransito).HasColumnName("id_orgao_executivo_transito");
            entity.Property(e => e.IdTipoLogradouro).HasColumnName("id_tipo_logradouro");
            entity.Property(e => e.IdTipoMeioCobranca).HasColumnName("id_tipo_meio_cobranca");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.LabelClienteCodigoIdentificacao)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("label_cliente_codigo_identificacao");
            entity.Property(e => e.Logradouro)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("logradouro");
            entity.Property(e => e.MaximoDiariasParaCobranca).HasColumnName("maximo_diarias_para_cobranca");
            entity.Property(e => e.MaximoDiasVencimento).HasColumnName("maximo_dias_vencimento");
            entity.Property(e => e.MetragemGuarda)
                .HasColumnType("numeric(5, 2)")
                .HasColumnName("metragem_guarda");
            entity.Property(e => e.MetragemTotal)
                .HasColumnType("numeric(5, 2)")
                .HasColumnName("metragem_total");
            entity.Property(e => e.Nome)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nome");
            entity.Property(e => e.Numero)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("numero");
            entity.Property(e => e.PixChave)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TipoPix)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.IdAgenciaBancariaNavigation).WithMany(p => p.TbDepClientes)
                .HasForeignKey(d => d.IdAgenciaBancaria)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_clientes2");

            entity.HasOne(d => d.IdOrgaoExecutivoTransitoNavigation).WithMany(p => p.TbDepClientes)
                .HasForeignKey(d => d.IdOrgaoExecutivoTransito)
                .HasConstraintName("fk_tb_dep_orgao_executivo_transito");

            entity.HasOne(d => d.IdUsuarioAlteracaoNavigation).WithMany(p => p.TbDepClienteIdUsuarioAlteracaoNavigations)
                .HasForeignKey(d => d.IdUsuarioAlteracao)
                .HasConstraintName("fk_tb_dep_clientes4");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.TbDepClienteIdUsuarioCadastroNavigations)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_clientes3");
        });

        modelBuilder.Entity<TbDepClienteDepositoTiposVeiculo>(entity =>
        {
            entity.HasKey(e => e.IdClienteDepositoTipoVeiculo).HasName("pk_tb_dep_cliente_deposito_tipos_veiculos");

            entity.ToTable("tb_dep_cliente_deposito_tipos_veiculos", tb => tb.HasTrigger("tr_log_cliente_deposito_tipos_veiculos"));

            entity.HasIndex(e => new { e.IdClienteDeposito, e.IdTipoVeiculo }, "idx_tb_dep_cliente_deposito_tipos_veiculos1").IsUnique();

            entity.HasIndex(e => e.IdTipoVeiculo, "idx_tb_dep_cliente_deposito_tipos_veiculos2");

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_cliente_deposito_tipos_veiculos3");

            entity.HasIndex(e => e.IdUsuarioAlteracao, "idx_tb_dep_cliente_deposito_tipos_veiculos4");

            entity.Property(e => e.IdClienteDepositoTipoVeiculo).HasColumnName("id_cliente_deposito_tipo_veiculo");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.FlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasColumnName("flag_ativo");
            entity.Property(e => e.IdClienteDeposito).HasColumnName("id_cliente_deposito");
            entity.Property(e => e.IdTipoVeiculo).HasColumnName("id_tipo_veiculo");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");

            entity.HasOne(d => d.IdClienteDepositoNavigation).WithMany(p => p.TbDepClienteDepositoTiposVeiculos)
                .HasForeignKey(d => d.IdClienteDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_cliente_deposito_tipos_veiculos1");

            entity.HasOne(d => d.IdTipoVeiculoNavigation).WithMany(p => p.TbDepClienteDepositoTiposVeiculos)
                .HasForeignKey(d => d.IdTipoVeiculo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_cliente_deposito_tipos_veiculos2");

            entity.HasOne(d => d.IdUsuarioAlteracaoNavigation).WithMany(p => p.TbDepClienteDepositoTiposVeiculoIdUsuarioAlteracaoNavigations)
                .HasForeignKey(d => d.IdUsuarioAlteracao)
                .HasConstraintName("fk_tb_dep_cliente_deposito_tipos_veiculos4");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.TbDepClienteDepositoTiposVeiculoIdUsuarioCadastroNavigations)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_cliente_deposito_tipos_veiculos3");
        });

        modelBuilder.Entity<TbDepClienteRegra>(entity =>
        {
            entity.HasKey(e => e.ClienteRegraId);

            entity.ToTable("tb_dep_cliente_regras");

            entity.HasIndex(e => e.ClienteRegraTipoId, "idx_tb_dep_cliente_regras1");

            entity.HasIndex(e => e.ClienteId, "idx_tb_dep_cliente_regras2");

            entity.HasIndex(e => e.UsuarioCadastroId, "idx_tb_dep_cliente_regras4");

            entity.HasIndex(e => e.UsuarioAlteracaoId, "idx_tb_dep_cliente_regras5");

            entity.Property(e => e.ClienteRegraId).HasColumnName("ClienteRegraID");
            entity.Property(e => e.ClienteId).HasColumnName("ClienteID");
            entity.Property(e => e.ClienteRegraTipoId).HasColumnName("ClienteRegraTipoID");
            entity.Property(e => e.DataVigenciaFinal).HasColumnType("smalldatetime");
            entity.Property(e => e.DataVigenciaInicial)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UsuarioAlteracaoId).HasColumnName("UsuarioAlteracaoID");
            entity.Property(e => e.UsuarioCadastroId).HasColumnName("UsuarioCadastroID");
            entity.Property(e => e.Valor)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.Cliente).WithMany(p => p.TbDepClienteRegras)
                .HasForeignKey(d => d.ClienteId)
                .HasConstraintName("FK_tb_dep_cliente_regras2");

            entity.HasOne(d => d.ClienteRegraTipo).WithMany(p => p.TbDepClienteRegras)
                .HasForeignKey(d => d.ClienteRegraTipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tb_dep_cliente_regras1");

            entity.HasOne(d => d.UsuarioAlteracao).WithMany(p => p.TbDepClienteRegraUsuarioAlteracaos)
                .HasForeignKey(d => d.UsuarioAlteracaoId)
                .HasConstraintName("FK_tb_dep_cliente_regras4");

            entity.HasOne(d => d.UsuarioCadastro).WithMany(p => p.TbDepClienteRegraUsuarioCadastros)
                .HasForeignKey(d => d.UsuarioCadastroId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tb_dep_cliente_regras3");
        });

        modelBuilder.Entity<TbDepClienteRegrasTipo>(entity =>
        {
            entity.HasKey(e => e.ClienteRegraTipoId);

            entity.ToTable("tb_dep_cliente_regras_tipos");

            entity.HasIndex(e => e.Codigo, "idx_tb_dep_cliente_regras_tipos1").IsUnique();

            entity.Property(e => e.ClienteRegraTipoId).HasColumnName("ClienteRegraTipoID");
            entity.Property(e => e.Ativo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength();
            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PossuiValor)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength();
        });

        modelBuilder.Entity<TbDepClientesDeposito>(entity =>
        {
            entity.HasKey(e => e.IdClienteDeposito).HasName("pk_tb_dep_clientes_depositos");

            entity.ToTable("tb_dep_clientes_depositos", tb => tb.HasTrigger("tr_log_upd_clientes_depositos"));

            entity.HasIndex(e => e.IdCliente, "idx_tb_dep_clientes_depositos1");

            entity.HasIndex(e => e.IdDeposito, "idx_tb_dep_clientes_depositos2");

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_clientes_depositos3");

            entity.HasIndex(e => e.IdUsuarioAlteracao, "idx_tb_dep_clientes_depositos4");

            entity.HasIndex(e => new { e.IdCliente, e.IdDeposito }, "idx_tb_dep_clientes_depositos5").IsUnique();

            entity.HasIndex(e => e.IdEmpresa, "idx_tb_dep_clientes_depositos6");

            entity.Property(e => e.IdClienteDeposito).HasColumnName("id_cliente_deposito");
            entity.Property(e => e.AliquotaIss).HasColumnType("smallmoney");
            entity.Property(e => e.CodigoDetran)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("codigo_detran");
            entity.Property(e => e.CodigoSap)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("codigo_sap");
            entity.Property(e => e.CodigoSapOrdemVendas)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codigo_sap_ordem_vendas");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.FlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasColumnName("flag_ativo");
            entity.Property(e => e.FlagCadastrarGrvBloqueado)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasColumnName("flag_cadastrar_grv_bloqueado");
            entity.Property(e => e.FlagUtilizaSistemaMobileGgv)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_utiliza_sistema_mobile_ggv");
            entity.Property(e => e.FlagValorIssIgualProdutoBaseCalculoAliquota)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength();
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdEmpresa).HasColumnName("id_empresa");
            entity.Property(e => e.IdOrgaoEmissor).HasColumnName("id_orgao_emissor");
            entity.Property(e => e.IdSistemaExterno)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("id_sistema_externo");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");

            entity.HasOne(d => d.IdClienteNavigation).WithMany(p => p.TbDepClientesDepositos)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_clientes_depositos1");

            entity.HasOne(d => d.IdDepositoNavigation).WithMany(p => p.TbDepClientesDepositos)
                .HasForeignKey(d => d.IdDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_clientes_depositos2");

            entity.HasOne(d => d.IdUsuarioAlteracaoNavigation).WithMany(p => p.TbDepClientesDepositoIdUsuarioAlteracaoNavigations)
                .HasForeignKey(d => d.IdUsuarioAlteracao)
                .HasConstraintName("fk_tb_dep_clientes_depositos4");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.TbDepClientesDepositoIdUsuarioCadastroNavigations)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_clientes_depositos3");
        });

        modelBuilder.Entity<TbDepComunicacaoEmail>(entity =>
        {
            entity.HasKey(e => e.IdComunicacaoEmail).HasName("pk_tb_dep_comunicacao_email");

            entity.ToTable("tb_dep_comunicacao_email");

            entity.HasIndex(e => e.IdClienteDeposito, "idx_tb_dep_comunicacao_email1");

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_comunicacao_email2");

            entity.Property(e => e.IdComunicacaoEmail).HasColumnName("id_comunicacao_email");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.IdClienteDeposito).HasColumnName("id_cliente_deposito");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.Nome)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nome");

            entity.HasOne(d => d.IdClienteDepositoNavigation).WithMany(p => p.TbDepComunicacaoEmails)
                .HasForeignKey(d => d.IdClienteDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_comunicacao_email1");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.TbDepComunicacaoEmails)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_comunicacao_email2");
        });

        modelBuilder.Entity<TbDepCondutor>(entity =>
        {
            entity.HasKey(e => e.IdCondutor).HasName("pk_tb_dep_condutor1");

            entity.ToTable("tb_dep_condutor", tb => tb.HasTrigger("tr_log_upd_condutor"));

            entity.HasIndex(e => e.IdGrv, "idx_tb_dep_condutor1").IsUnique();

            entity.HasIndex(e => e.IdEnquadramentoInfracao, "idx_tb_dep_condutor2");

            entity.Property(e => e.IdCondutor).HasColumnName("id_condutor");
            entity.Property(e => e.Celular)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("celular");
            entity.Property(e => e.CelularDdd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("celular_ddd");
            entity.Property(e => e.Documento)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("documento");
            entity.Property(e => e.Email)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.FlagChaveVeiculo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_chave_veiculo");
            entity.Property(e => e.FlagDocumentacaoVeiculo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_documentacao_veiculo");
            entity.Property(e => e.IdEnquadramentoInfracao)
                .HasColumnType("numeric(4, 0)")
                .HasColumnName("id_enquadramento_infracao");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdPessoa).HasColumnName("id_pessoa");
            entity.Property(e => e.Identidade)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("identidade");
            entity.Property(e => e.InformacoesAdicionais)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("informacoes_adicionais");
            entity.Property(e => e.Nome)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("nome");
            entity.Property(e => e.NumeroChaveVeiculo)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("numero_chave_veiculo");
            entity.Property(e => e.NumeroInfracao)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("numero_infracao");
            entity.Property(e => e.OrgaoExpedidor)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("orgao_expedidor");
            entity.Property(e => e.OutrosEquipamentos1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("outros_equipamentos1");
            entity.Property(e => e.OutrosEquipamentos2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("outros_equipamentos2");
            entity.Property(e => e.OutrosEquipamentos3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("outros_equipamentos3");
            entity.Property(e => e.OutrosEquipamentos4)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("outros_equipamentos4");
            entity.Property(e => e.OutrosEquipamentos5)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("outros_equipamentos5");
            entity.Property(e => e.StatusAssinaturaCondutor)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('2')")
                .IsFixedLength()
                .HasComment("1 = ASSINOU;\r\n2 = AUSENTE;\r\n3 = EVADIU-SE;\r\n4 = RECUSOU-SE.")
                .HasColumnName("status_assinatura_condutor");
            entity.Property(e => e.Telefone)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("telefone");
            entity.Property(e => e.TelefoneDdd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("telefone_ddd");

            entity.HasOne(d => d.IdEnquadramentoInfracaoNavigation).WithMany(p => p.TbDepCondutors)
                .HasForeignKey(d => d.IdEnquadramentoInfracao)
                .HasConstraintName("fk_tb_dep_condutor2");

            entity.HasOne(d => d.IdGrvNavigation).WithOne(p => p.TbDepCondutor)
                .HasForeignKey<TbDepCondutor>(d => d.IdGrv)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_condutor1");
        });

        modelBuilder.Entity<TbDepCondutorEquipamentosOpcionai>(entity =>
        {
            entity.HasKey(e => e.IdCondutorEquipamentoOpcional).HasName("pk_tb_dep_condutor_equipamentos_opcionais1");

            entity.ToTable("tb_dep_condutor_equipamentos_opcionais", tb => tb.HasTrigger("tr_log_upd_condutor_equipamentos_opcionais"));

            entity.HasIndex(e => e.IdGrv, "idx_tb_dep_condutor_equipamentos_opcionais1");

            entity.HasIndex(e => e.IdEquipamentoOpcional, "idx_tb_dep_condutor_equipamentos_opcionais2");

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_condutor_equipamentos_opcionais3");

            entity.HasIndex(e => e.IdUsuarioAtualizacao, "idx_tb_dep_condutor_equipamentos_opcionais4");

            entity.HasIndex(e => e.CodAvaria, "idx_tb_dep_condutor_equipamentos_opcionais5");

            entity.Property(e => e.IdCondutorEquipamentoOpcional).HasColumnName("id_condutor_equipamento_opcional");
            entity.Property(e => e.Avariado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("avariado");
            entity.Property(e => e.CodAvaria).HasColumnName("cod_avaria");
            entity.Property(e => e.DataAtualizacao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_atualizacao");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.FlagPossuiEquipamento)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasColumnName("flag_possui_equipamento");
            entity.Property(e => e.IdEquipamentoOpcional)
                .HasColumnType("numeric(3, 0)")
                .HasColumnName("id_equipamento_opcional");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdUsuarioAtualizacao).HasColumnName("id_usuario_atualizacao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");

            entity.HasOne(d => d.IdEquipamentoOpcionalNavigation).WithMany(p => p.TbDepCondutorEquipamentosOpcionais)
                .HasForeignKey(d => d.IdEquipamentoOpcional)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_condutor_equipamentos_opcionais2");

            entity.HasOne(d => d.IdGrvNavigation).WithMany(p => p.TbDepCondutorEquipamentosOpcionais)
                .HasForeignKey(d => d.IdGrv)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_condutor_equipamentos_opcionais1");

            entity.HasOne(d => d.IdUsuarioAtualizacaoNavigation).WithMany(p => p.TbDepCondutorEquipamentosOpcionaiIdUsuarioAtualizacaoNavigations)
                .HasForeignKey(d => d.IdUsuarioAtualizacao)
                .HasConstraintName("fk_tb_dep_condutor_equipamentos_opcionais4");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.TbDepCondutorEquipamentosOpcionaiIdUsuarioCadastroNavigations)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .HasConstraintName("fk_tb_dep_condutor_equipamentos_opcionais3");
        });

        modelBuilder.Entity<TbDepCondutorEquipamentosOpcionaisNaoConformidade>(entity =>
        {
            entity.HasKey(e => e.IdCondutorEquipamentoOpcionalNaoConformidade).HasName("pk_tb_dep_condutor_equipamentos_opcionais_nao_conformidade");

            entity.ToTable("tb_dep_condutor_equipamentos_opcionais_nao_conformidade");

            entity.HasIndex(e => e.IdCondutorEquipamentoOpcional, "idx_tb_dep_condutor_equipamentos_opcionais1");

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_condutor_equipamentos_opcionais2");

            entity.Property(e => e.IdCondutorEquipamentoOpcionalNaoConformidade).HasColumnName("id_condutor_equipamento_opcional_nao_conformidade");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.Explicacao)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("explicacao");
            entity.Property(e => e.IdCondutorEquipamentoOpcional).HasColumnName("id_condutor_equipamento_opcional");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");

            entity.HasOne(d => d.IdCondutorEquipamentoOpcionalNavigation).WithMany(p => p.TbDepCondutorEquipamentosOpcionaisNaoConformidades)
                .HasForeignKey(d => d.IdCondutorEquipamentoOpcional)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_condutor_equipamentos_opcionais_nao_conformidade1");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.TbDepCondutorEquipamentosOpcionaisNaoConformidades)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_condutor_equipamentos_opcionais_nao_conformidade2");
        });

        modelBuilder.Entity<TbDepConfiguraco>(entity =>
        {
            entity.HasKey(e => e.IdConfiguracao).HasName("pk_tb_dep_configuracoes");

            entity.ToTable("tb_dep_configuracoes", tb => tb.HasTrigger("tr_log_upd_configuracoes"));

            entity.Property(e => e.IdConfiguracao)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_configuracao");
            entity.Property(e => e.CheckUrl)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("check_url");
            entity.Property(e => e.DataNovaVersao)
                .HasColumnType("datetime")
                .HasColumnName("data_nova_versao");
            entity.Property(e => e.FlagAtualizacaoObrigatoria)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasColumnName("flag_atualizacao_obrigatoria");
            entity.Property(e => e.FlagDetranDesenvolvimentoOnline)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasColumnName("flag_detran_desenvolvimento_online");
            entity.Property(e => e.FlagDetranOnline)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasColumnName("flag_detran_online");
            entity.Property(e => e.FlagDetranProducaoOnline)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasColumnName("flag_detran_producao_online");
            entity.Property(e => e.FlagServicosWindowsAtivos)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_servicos_windows_ativos");
            entity.Property(e => e.FtpGrvDocumentosIp)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("FtpGrvDocumentosIP");
            entity.Property(e => e.FtpGrvDocumentosPass)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.FtpGrvDocumentosUser)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.HorarioVerao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PixPassword)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PixUrl)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PixUsername)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RepositorioArquivoNomeBucket)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RepositorioArquivoPassword)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RepositorioArquivoUrl)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RepositorioArquivoUsername)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SystemUpdateFtpHost)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SystemUpdateFtpPassword)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.SystemUpdateFtpPort)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.SystemUpdateFtpUserName)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.SystemUpdateInstallDirectory)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.TamanhoMaximoArquivoEnvioServidor).HasColumnName("tamanho_maximo_arquivo_envio_servidor");
            entity.Property(e => e.VersaoSistema)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("versao_sistema");
        });

        modelBuilder.Entity<TbDepConfiguracoesNomeTabelaOrigem>(entity =>
        {
            entity.HasKey(e => e.NomeTabelaOrigemId);

            entity.ToTable("tb_dep_configuracoes_nome_tabela_origem");

            entity.HasIndex(e => e.Codigo, "IDX_tb_dep_configuracoes_nome_tabela_origem1").IsUnique();

            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DiretorioRemoto)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Nome)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TbDepConfiguracoesTransacao>(entity =>
        {
            entity.HasKey(e => e.IdConfigTransacao).HasName("pk_id_config_transacao");

            entity.ToTable("tb_dep_configuracoes_transacao");

            entity.Property(e => e.IdConfigTransacao).HasColumnName("id_config_transacao");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.FlagDataApreensaoStart)
                .HasColumnType("smalldatetime")
                .HasColumnName("flag_data_apreensao_start");
            entity.Property(e => e.FlagDataInicio)
                .HasColumnType("smalldatetime")
                .HasColumnName("flag_data_inicio");
            entity.Property(e => e.FlagIntervaloCadastroHoras)
                .HasDefaultValueSql("((1))")
                .HasColumnName("flag_intervalo_cadastro_horas");
            entity.Property(e => e.FlagIntervaloLogHoras)
                .HasDefaultValueSql("((24))")
                .HasColumnName("flag_intervalo_log_horas");
            entity.Property(e => e.FlagServicoLiberado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasColumnName("flag_servico_liberado");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdConfigAcao).HasColumnName("id_config_acao");
            entity.Property(e => e.IdConfigGrupo).HasColumnName("id_config_grupo");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");

            entity.HasOne(d => d.IdConfigAcaoNavigation).WithMany(p => p.TbDepConfiguracoesTransacaos)
                .HasForeignKey(d => d.IdConfigAcao)
                .HasConstraintName("fk_id_config_acao");

            entity.HasOne(d => d.IdConfigGrupoNavigation).WithMany(p => p.TbDepConfiguracoesTransacaos)
                .HasForeignKey(d => d.IdConfigGrupo)
                .HasConstraintName("fk_id_config_grupo");
        });

        modelBuilder.Entity<TbDepConfiguracoesTransacaoAcao>(entity =>
        {
            entity.HasKey(e => e.IdConfigAcao).HasName("pk_id_config_acao");

            entity.ToTable("tb_dep_configuracoes_transacao_acao");

            entity.Property(e => e.IdConfigAcao).HasColumnName("id_config_acao");
            entity.Property(e => e.Descricao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.HoraExecucao)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("hora_execucao");
        });

        modelBuilder.Entity<TbDepConfiguracoesTransacaoGrupo>(entity =>
        {
            entity.HasKey(e => e.IdConfigGrupo).HasName("pk_id_config_grupo");

            entity.ToTable("tb_dep_configuracoes_transacao_grupo");

            entity.Property(e => e.IdConfigGrupo).HasColumnName("id_config_grupo");
            entity.Property(e => e.Descricao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.FlagServicoLiberado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasColumnName("flag_servico_liberado");
        });

        modelBuilder.Entity<TbDepConsultaVeiculoAl>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tb_dep_consulta_veiculo_al");

            entity.Property(e => e.Chassi)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("chassi");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("id");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.JsonEnvio)
                .IsRequired()
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("jsonEnvio");
            entity.Property(e => e.JsonRetorno)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("jsonRetorno");
            entity.Property(e => e.Placa)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("placa");
        });

        modelBuilder.Entity<TbDepContasTemporaria>(entity =>
        {
            entity.HasKey(e => e.IdContaTemporaria).HasName("pk_tb_dep_contas_temporarias");

            entity.ToTable("tb_dep_contas_temporarias");

            entity.HasIndex(e => e.IdClienteDeposito, "idx_tb_dep_contas_temporarias1");

            entity.HasIndex(e => e.IdAgenciaBancaria, "idx_tb_dep_contas_temporarias2");

            entity.Property(e => e.IdContaTemporaria).HasColumnName("id_conta_temporaria");
            entity.Property(e => e.DataVigenciaFinal)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vigencia_final");
            entity.Property(e => e.DataVigenciaInicial)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vigencia_inicial");
            entity.Property(e => e.FlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasColumnName("flag_ativo");
            entity.Property(e => e.IdAgenciaBancaria).HasColumnName("id_agencia_bancaria");
            entity.Property(e => e.IdClienteDeposito).HasColumnName("id_cliente_deposito");

            entity.HasOne(d => d.IdAgenciaBancariaNavigation).WithMany(p => p.TbDepContasTemporaria)
                .HasForeignKey(d => d.IdAgenciaBancaria)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_contas_temporarias2");

            entity.HasOne(d => d.IdClienteDepositoNavigation).WithMany(p => p.TbDepContasTemporaria)
                .HasForeignKey(d => d.IdClienteDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_contas_temporarias1");
        });

        modelBuilder.Entity<TbDepDeclaracaoAcesso>(entity =>
        {
            entity.HasKey(e => e.IdDeclaracaoAcesso).HasName("PK_td_dep_declaracao_acesso");

            entity.ToTable("tb_dep_declaracao_acesso");

            entity.HasIndex(e => e.IdDeclaracaoAcesso, "IX_td_dep_declaracao_acesso");

            entity.Property(e => e.IdDeclaracaoAcesso).HasColumnName("id_declaracao_acesso");
            entity.Property(e => e.Cpf)
                .IsRequired()
                .HasMaxLength(15)
                .IsFixedLength()
                .HasColumnName("cpf");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("datetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataDeclaracao)
                .HasColumnType("datetime")
                .HasColumnName("data_declaracao");
            entity.Property(e => e.IdGrv)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("id_grv");
            entity.Property(e => e.IdPropositoAcesso).HasColumnName("id_proposito_acesso");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.Observacao)
                .IsRequired()
                .HasMaxLength(200)
                .IsFixedLength()
                .HasColumnName("observacao");
            entity.Property(e => e.Responsavel)
                .IsRequired()
                .HasMaxLength(200)
                .IsFixedLength()
                .HasColumnName("responsavel");
            entity.Property(e => e.Rg)
                .IsRequired()
                .HasMaxLength(15)
                .IsFixedLength()
                .HasColumnName("rg");
        });

        modelBuilder.Entity<TbDepDeposito>(entity =>
        {
            entity.HasKey(e => e.IdDeposito).HasName("pk_tb_dep_depositos");

            entity.ToTable("tb_dep_depositos", tb => tb.HasTrigger("tr_log_upd_depositos"));

            entity.HasIndex(e => e.IdCep, "idx_tb_dep_depositos1");

            entity.HasIndex(e => e.IdTipoLogradouro, "idx_tb_dep_depositos2");

            entity.HasIndex(e => e.IdBairro, "idx_tb_dep_depositos3");

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_depositos4");

            entity.HasIndex(e => e.IdUsuarioAlteracao, "idx_tb_dep_depositos5");

            entity.HasIndex(e => e.IdEmpresa, "idx_tb_dep_depositos6");

            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.Complemento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("complemento");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.EmailNfe)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasDefaultValueSql("('contato@mob-link.net.br')")
                .HasColumnName("email_nfe");
            entity.Property(e => e.EnderecoMob)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("endereco_mob");
            entity.Property(e => e.FlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasColumnName("flag_ativo");
            entity.Property(e => e.FlagEnderecoCadastroManual)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_endereco_cadastro_manual");
            entity.Property(e => e.FlagVirtual)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_virtual");
            entity.Property(e => e.GrvLimiteMinimoDatahoraGuarda).HasColumnName("grv_limite_minimo_datahora_guarda");
            entity.Property(e => e.GrvMinimoFotosExigidas).HasColumnName("grv_minimo_fotos_exigidas");
            entity.Property(e => e.IdBairro).HasColumnName("id_bairro");
            entity.Property(e => e.IdCep).HasColumnName("id_cep");
            entity.Property(e => e.IdEmpresa).HasColumnName("id_empresa");
            entity.Property(e => e.IdSistemaExterno).HasColumnName("id_sistema_externo");
            entity.Property(e => e.IdTipoLogradouro).HasColumnName("id_tipo_logradouro");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.Latitude)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("latitude");
            entity.Property(e => e.Logradouro)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("logradouro");
            entity.Property(e => e.Longitude)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("longitude");
            entity.Property(e => e.Numero)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("numero");
            entity.Property(e => e.TelefoneMob)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("telefone_mob");

            entity.HasOne(d => d.IdUsuarioAlteracaoNavigation).WithMany(p => p.TbDepDepositoIdUsuarioAlteracaoNavigations)
                .HasForeignKey(d => d.IdUsuarioAlteracao)
                .HasConstraintName("fk_tb_dep_depositos2");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.TbDepDepositoIdUsuarioCadastroNavigations)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_depositos1");
        });

        modelBuilder.Entity<TbDepDetranAssociacaoTransacaoClienteDeposito>(entity =>
        {
            entity.HasKey(e => e.IdTransacaoClienteDeposito).HasName("pk_tb_dep_detran_associacao_transacao_cliente_deposito");

            entity.ToTable("tb_dep_detran_associacao_transacao_cliente_deposito");

            entity.HasIndex(e => e.IdTransacaoStatus, "idx_tb_dep_detran_associacao_transacao_cliente_deposito1");

            entity.HasIndex(e => e.IdClienteDeposito, "idx_tb_dep_detran_associacao_transacao_cliente_deposito2");

            entity.Property(e => e.IdTransacaoClienteDeposito).HasColumnName("id_transacao_cliente_deposito");
            entity.Property(e => e.FlagObrigatorio)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasColumnName("flag_obrigatorio");
            entity.Property(e => e.IdClienteDeposito).HasColumnName("id_cliente_deposito");
            entity.Property(e => e.IdTransacaoStatus).HasColumnName("id_transacao_status");
            entity.Property(e => e.Ordenacao).HasColumnName("ordenacao");

            entity.HasOne(d => d.IdClienteDepositoNavigation).WithMany(p => p.TbDepDetranAssociacaoTransacaoClienteDepositos)
                .HasForeignKey(d => d.IdClienteDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_detran_associacao_transacao_cliente_deposito2");

            entity.HasOne(d => d.IdTransacaoStatusNavigation).WithMany(p => p.TbDepDetranAssociacaoTransacaoClienteDepositos)
                .HasForeignKey(d => d.IdTransacaoStatus)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_detran_associacao_transacao_cliente_deposito1");
        });

        modelBuilder.Entity<TbDepDetranGrvStatusTransacao>(entity =>
        {
            entity.HasKey(e => e.IdDetranGrvTransacao).HasName("pk_tb_dep_detran_grv_status_transacao");

            entity.ToTable("tb_dep_detran_grv_status_transacao");

            entity.HasIndex(e => e.IdGrv, "idx_tb_dep_detran_grv_status_transacao1");

            entity.HasIndex(e => e.IdTransacaoClienteDeposito, "idx_tb_dep_detran_grv_status_transacao2");

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_detran_grv_status_transacao3");

            entity.Property(e => e.IdDetranGrvTransacao).HasColumnName("id_detran_grv_transacao");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdTransacaoClienteDeposito).HasColumnName("id_transacao_cliente_deposito");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValueSql("('PE')")
                .IsFixedLength()
                .HasComment("PE = Pendente de Envio. Quando é realizado o cadastro na Tabela antes de executar o WS DETRAN;\r\nEN = Enviado;\r\nRS = Recebido com Sucesso;\r\nRE = Recebido com Erro. Quando o DETRAN informa algum problema com o Veículo;\r\nEF = Erro Fatal. Quando ocorre erro na execução do WS DETRAN, nestes casos o WS deve ser reexecutado")
                .HasColumnName("status");

            entity.HasOne(d => d.IdGrvNavigation).WithMany(p => p.TbDepDetranGrvStatusTransacaos)
                .HasForeignKey(d => d.IdGrv)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_detran_grv_status_transacao1");

            entity.HasOne(d => d.IdTransacaoClienteDepositoNavigation).WithMany(p => p.TbDepDetranGrvStatusTransacaos)
                .HasForeignKey(d => d.IdTransacaoClienteDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_detran_grv_status_transacao2");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.TbDepDetranGrvStatusTransacaos)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_detran_grv_status_transacao3");
        });

        modelBuilder.Entity<TbDepDetranGrvStatusTransacaoResultado>(entity =>
        {
            entity.HasKey(e => e.IdDetranGrvTransacaoResultado).HasName("pk_tb_dep_detran_grv_status_transacao_resultado");

            entity.ToTable("tb_dep_detran_grv_status_transacao_resultado");

            entity.HasIndex(e => e.IdDetranGrvTransacao, "idx_tb_dep_detran_grv_status_transacao_resultado1");

            entity.HasIndex(e => e.IdTransacaoClienteDeposito, "idx_tb_dep_detran_grv_status_transacao_resultado2");

            entity.Property(e => e.IdDetranGrvTransacaoResultado).HasColumnName("id_detran_grv_transacao_resultado");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.IdDetranGrvTransacao).HasColumnName("id_detran_grv_transacao");
            entity.Property(e => e.IdTransacaoClienteDeposito).HasColumnName("id_transacao_cliente_deposito");
            entity.Property(e => e.Resultado)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasColumnName("resultado");
            entity.Property(e => e.Sucesso)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("sucesso");
        });

        modelBuilder.Entity<TbDepDetranTransacaoConsultarPendenciasLiberacaoVeiculo>(entity =>
        {
            entity.HasKey(e => e.IdDetranTransacaoConsultarPendenciasLiberacaoVeiculo).HasName("pk_tb_detran_transacao_consultar_pendencias_liberacao_veiculo");

            entity.ToTable("tb_dep_detran_transacao_consultar_pendencias_liberacao_veiculo");

            entity.HasIndex(e => e.IdDetranGrvTransacao, "idx_tb_dep_detran_transacao_consultar_pendencias_liberacao_veiculo1");

            entity.Property(e => e.IdDetranTransacaoConsultarPendenciasLiberacaoVeiculo).HasColumnName("id_detran_transacao_consultar_pendencias_liberacao_veiculo");
            entity.Property(e => e.Chassi)
                .HasMaxLength(17)
                .IsUnicode(false);
            entity.Property(e => e.DocumentoLiberador)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.IdDetranGrvTransacao).HasColumnName("id_detran_grv_transacao");
            entity.Property(e => e.NumeroGuiaRecolhimento)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Operador)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TipoDocLiberador)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.IdDetranGrvTransacaoNavigation).WithMany(p => p.TbDepDetranTransacaoConsultarPendenciasLiberacaoVeiculos)
                .HasForeignKey(d => d.IdDetranGrvTransacao)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_detran_transacao_consultar_pendencias_liberacao_veiculo1");
        });

        modelBuilder.Entity<TbDepDetranTransacaoConsultarVeiculo>(entity =>
        {
            entity.HasKey(e => e.IdDetranTransacaoConsultarVeiculo).HasName("pk_tb_detran_transacao_consultar_veiculo");

            entity.ToTable("tb_dep_detran_transacao_consultar_veiculo");

            entity.HasIndex(e => e.IdDetranGrvTransacao, "idx_tb_dep_detran_transacao_consultar_veiculo1");

            entity.Property(e => e.IdDetranTransacaoConsultarVeiculo).HasColumnName("id_detran_transacao_consultar_veiculo");
            entity.Property(e => e.Chassi)
                .HasMaxLength(17)
                .IsUnicode(false);
            entity.Property(e => e.IdDetranGrvTransacao).HasColumnName("id_detran_grv_transacao");
            entity.Property(e => e.Operador)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.IdDetranGrvTransacaoNavigation).WithMany(p => p.TbDepDetranTransacaoConsultarVeiculos)
                .HasForeignKey(d => d.IdDetranGrvTransacao)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_detran_transacao_consultar_veiculo1");
        });

        modelBuilder.Entity<TbDepDetranTransacaoIncluirVeiculoPatio>(entity =>
        {
            entity.HasKey(e => e.IdDetranTransacaoIncluirVeiculoPatio).HasName("pk_tb_detran_transacao_incluir_veiculo_patio");

            entity.ToTable("tb_dep_detran_transacao_incluir_veiculo_patio");

            entity.HasIndex(e => e.IdDetranGrvTransacao, "idx_tb_dep_detran_transacao_incluir_veiculo_patio1");

            entity.Property(e => e.IdDetranTransacaoIncluirVeiculoPatio).HasColumnName("id_detran_transacao_incluir_veiculo_patio");
            entity.Property(e => e.Chassi)
                .HasMaxLength(18)
                .IsUnicode(false);
            entity.Property(e => e.DataGuarda)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.HoraGuarda)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IdDetranGrvTransacao).HasColumnName("id_detran_grv_transacao");
            entity.Property(e => e.NumeroGuiaRecolhimento)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Operador)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UsoReboque)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.IdDetranGrvTransacaoNavigation).WithMany(p => p.TbDepDetranTransacaoIncluirVeiculoPatios)
                .HasForeignKey(d => d.IdDetranGrvTransacao)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_detran_transacao_incluir_veiculo_patio1");
        });

        modelBuilder.Entity<TbDepDetranTransacaoLiberarVeiculoPatio>(entity =>
        {
            entity.HasKey(e => e.IdDetranTransacaoLiberarVeiculoPatio).HasName("pk_tb_detran_transacao_liberar_veiculo_patio");

            entity.ToTable("tb_dep_detran_transacao_liberar_veiculo_patio");

            entity.HasIndex(e => e.IdDetranGrvTransacao, "idx_tb_dep_detran_transacao_liberar_veiculo_patio1");

            entity.Property(e => e.IdDetranTransacaoLiberarVeiculoPatio).HasColumnName("id_detran_transacao_liberar_veiculo_patio");
            entity.Property(e => e.Chassi)
                .HasMaxLength(17)
                .IsUnicode(false);
            entity.Property(e => e.CpfCnpjLiberador)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.DataLiberacao)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.HoraLiberacao)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IdDetranGrvTransacao).HasColumnName("id_detran_grv_transacao");
            entity.Property(e => e.MotivoLiberacao)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Operador)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TipoDocumentoLiberador)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.IdDetranGrvTransacaoNavigation).WithMany(p => p.TbDepDetranTransacaoLiberarVeiculoPatios)
                .HasForeignKey(d => d.IdDetranGrvTransacao)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_detran_transacao_liberar_veiculo_patio1");
        });

        modelBuilder.Entity<TbDepDetranTransacaoRecolherVeiculo>(entity =>
        {
            entity.HasKey(e => e.IdDetranTransacaoRecolherVeiculo).HasName("pk_tb_detran_transacao_recolher_veiculo");

            entity.ToTable("tb_dep_detran_transacao_recolher_veiculo");

            entity.HasIndex(e => e.IdDetranGrvTransacao, "idx_tb_dep_detran_transacao_recolher_veiculo1");

            entity.Property(e => e.IdDetranTransacaoRecolherVeiculo).HasColumnName("id_detran_transacao_recolher_veiculo");
            entity.Property(e => e.Chassi)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Classificacao)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Condicionalidade)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DataRecolhimento)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.HoraRecolhimento)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IdDetranGrvTransacao).HasColumnName("id_detran_grv_transacao");
            entity.Property(e => e.NumGuiaRecolhimento)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Operador)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Uf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("uf");

            entity.HasOne(d => d.IdDetranGrvTransacaoNavigation).WithMany(p => p.TbDepDetranTransacaoRecolherVeiculos)
                .HasForeignKey(d => d.IdDetranGrvTransacao)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_detran_transacao_recolher_veiculo1");
        });

        modelBuilder.Entity<TbDepDetranTransacaoStatus>(entity =>
        {
            entity.HasKey(e => e.IdTransacaoStatus).HasName("pk_tb_dep_detran_transacao_status");

            entity.ToTable("tb_dep_detran_transacao_status");

            entity.HasIndex(e => e.IdTransacaoTipo, "idx_tb_dep_detran_transacao_status1");

            entity.Property(e => e.IdTransacaoStatus)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_transacao_status");
            entity.Property(e => e.DescricaoStatus)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descricao_status");
            entity.Property(e => e.IdTransacaoTipo).HasColumnName("id_transacao_tipo");
            entity.Property(e => e.TipoEvento)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('R')")
                .IsFixedLength()
                .HasColumnName("tipo_evento");

            entity.HasOne(d => d.IdTransacaoTipoNavigation).WithMany(p => p.TbDepDetranTransacaoStatuses)
                .HasForeignKey(d => d.IdTransacaoTipo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_detran_transacao_status1");
        });

        modelBuilder.Entity<TbDepDetranTransacaoTipo>(entity =>
        {
            entity.HasKey(e => e.IdTransacaoTipo).HasName("pk_tb_dep_detran_transacao_tipo");

            entity.ToTable("tb_dep_detran_transacao_tipo");

            entity.HasIndex(e => e.Codigo, "idx_tb_dep_detran_transacao_tipo1").IsUnique();

            entity.HasIndex(e => e.CodigoTransacao, "idx_tb_dep_detran_transacao_tipo2").IsUnique();

            entity.Property(e => e.IdTransacaoTipo)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_transacao_tipo");
            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codigo");
            entity.Property(e => e.CodigoTransacao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codigo_transacao");
            entity.Property(e => e.DescricaoTipo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descricao_tipo");
        });

        modelBuilder.Entity<TbDepDetroGrv>(entity =>
        {
            entity.HasKey(e => e.IdDetroGrv).HasName("pk_tb_dep_detro_grv");

            entity.ToTable("tb_dep_detro_grv", tb => tb.HasTrigger("tr_log_detro_grv"));

            entity.HasIndex(e => e.IdGrv, "idx_tb_dep_detro_grv1").IsUnique();

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_detro_grv2");

            entity.HasIndex(e => e.IdUsuarioAlteracao, "idx_tb_dep_detro_grv3");

            entity.HasIndex(e => e.DataCadastro, "idx_tb_dep_detro_grv4");

            entity.Property(e => e.IdDetroGrv).HasColumnName("id_detro_grv");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('B')")
                .IsFixedLength()
                .HasComment("A = AUTORIZADOS;\r\nB = BLOQUEIO AUTOMÁTICO (Valor Padrão);\r\nN = NÃO AUTORIZADO.")
                .HasColumnName("status");

            entity.HasOne(d => d.IdGrvNavigation).WithOne(p => p.TbDepDetroGrv)
                .HasForeignKey<TbDepDetroGrv>(d => d.IdGrv)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_detro_grv1");

            entity.HasOne(d => d.IdUsuarioAlteracaoNavigation).WithMany(p => p.TbDepDetroGrvIdUsuarioAlteracaoNavigations)
                .HasForeignKey(d => d.IdUsuarioAlteracao)
                .HasConstraintName("fk_tb_dep_detro_grv3");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.TbDepDetroGrvIdUsuarioCadastroNavigations)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_detro_grv2");
        });

        modelBuilder.Entity<TbDepDetroGrvMotivoNaoAutorizado>(entity =>
        {
            entity.HasKey(e => e.IdDetroGrvMotivoNaoAutorizado).HasName("pk_tb_dep_detro_grv_motivo_nao_autorizado");

            entity.ToTable("tb_dep_detro_grv_motivo_nao_autorizado");

            entity.HasIndex(e => e.IdDetroGrv, "idx_tb_dep_detro_grv_motivo_nao_autorizado1");

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_detro_grv_motivo_nao_autorizado2");

            entity.Property(e => e.IdDetroGrvMotivoNaoAutorizado).HasColumnName("id_detro_grv_motivo_nao_autorizado");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.IdDetroGrv).HasColumnName("id_detro_grv");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.MotivoNaoAutorizado)
                .IsRequired()
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("motivo_nao_autorizado");

            entity.HasOne(d => d.IdDetroGrvNavigation).WithMany(p => p.TbDepDetroGrvMotivoNaoAutorizados)
                .HasForeignKey(d => d.IdDetroGrv)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_detro_grv_motivo_nao_autorizado1");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.TbDepDetroGrvMotivoNaoAutorizados)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_detro_grv_motivo_nao_autorizado2");
        });

        modelBuilder.Entity<TbDepEndereco>(entity =>
        {
            entity.HasKey(e => e.IdEndereco);

            entity.ToTable("tb_dep_enderecos");

            entity.Property(e => e.IdEndereco).HasColumnName("id_endereco");
            entity.Property(e => e.Bairro)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("bairro");
            entity.Property(e => e.Cep)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("cep");
            entity.Property(e => e.Complemento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("complemento");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("datetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("datetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.Logradouro)
                .IsRequired()
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("logradouro");
            entity.Property(e => e.Municipio)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("municipio");
            entity.Property(e => e.Numero).HasColumnName("numero");
            entity.Property(e => e.Uf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("uf");
        });

        modelBuilder.Entity<TbDepEnderecoEntrega>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tb_dep_endereco_entrega");

            entity.Property(e => e.DataCadastro)
                .HasColumnType("datetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.IdAtendimento).HasColumnName("id_atendimento");
            entity.Property(e => e.IdEndereco).HasColumnName("id_endereco");
            entity.Property(e => e.IdEnderecoEntrega).HasColumnName("id_endereco_entrega");
            entity.Property(e => e.Login)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("login");
        });

        modelBuilder.Entity<TbDepEnquadramentoInfraco>(entity =>
        {
            entity.HasKey(e => e.IdEnquadramentoInfracao).HasName("pk_tb_dep_enquadramento_infracoes1");

            entity.ToTable("tb_dep_enquadramento_infracoes", tb => tb.HasTrigger("tr_log_upd_enquadramento_infracoes"));

            entity.HasIndex(e => e.IdEnquadramentoInfracao, "idx_tb_dep_enquadramento_infracoes1");

            entity.HasIndex(e => e.CodigoInfracao, "idx_tb_dep_enquadramento_infracoes2").IsUnique();

            entity.HasIndex(e => e.Descricao, "idx_tb_dep_enquadramento_infracoes3");

            entity.Property(e => e.IdEnquadramentoInfracao)
                .ValueGeneratedOnAdd()
                .HasColumnType("numeric(4, 0)")
                .HasColumnName("id_enquadramento_infracao");
            entity.Property(e => e.Artigo).HasColumnName("artigo");
            entity.Property(e => e.CodigoInfracao)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("codigo_infracao");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.Inciso)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("inciso");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasColumnName("status");

            entity.HasOne(d => d.IdUsuarioNavigation).WithMany(p => p.TbDepEnquadramentoInfracos)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_enquadramento_infracoes1");
        });

        modelBuilder.Entity<TbDepEquipamentosOpcionai>(entity =>
        {
            entity.HasKey(e => e.IdEquipamentoOpcional).HasName("pk_tb_dep_equipamentos_opcionais1");

            entity.ToTable("tb_dep_equipamentos_opcionais", tb => tb.HasTrigger("tr_log_upd_equipamentos_opcionais"));

            entity.HasIndex(e => e.Descricao, "idx_tb_dep_equipamentos_opcionais1").IsUnique();

            entity.HasIndex(e => e.IdUsuario, "idx_tb_dep_equipamentos_opcionais2");

            entity.HasIndex(e => e.IdUsuarioAlteracao, "idx_tb_dep_equipamentos_opcionais3");

            entity.Property(e => e.IdEquipamentoOpcional)
                .ValueGeneratedOnAdd()
                .HasColumnType("numeric(3, 0)")
                .HasColumnName("id_equipamento_opcional");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.IdEquipamentoOpcionalLocalizacao).HasColumnName("id_equipamento_opcional_localizacao");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.ItemObrigatorio)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .HasColumnName("item_obrigatorio");
            entity.Property(e => e.ItemOcorrenciaDetranBa)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("item_ocorrencia_detran_ba");
            entity.Property(e => e.OrdemVistoria)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ordem_vistoria");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasColumnName("status");

            entity.HasOne(d => d.IdEquipamentoOpcionalLocalizacaoNavigation).WithMany(p => p.TbDepEquipamentosOpcionais)
                .HasForeignKey(d => d.IdEquipamentoOpcionalLocalizacao)
                .HasConstraintName("fk_tb_dep_equipamentos_opcionais1");

            entity.HasOne(d => d.IdUsuarioNavigation).WithMany(p => p.TbDepEquipamentosOpcionaiIdUsuarioNavigations)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_equipamentos_opcionais2");

            entity.HasOne(d => d.IdUsuarioAlteracaoNavigation).WithMany(p => p.TbDepEquipamentosOpcionaiIdUsuarioAlteracaoNavigations)
                .HasForeignKey(d => d.IdUsuarioAlteracao)
                .HasConstraintName("fk_tb_dep_equipamentos_opcionais3");
        });

        modelBuilder.Entity<TbDepEquipamentosOpcionaisLocalizacao>(entity =>
        {
            entity.HasKey(e => e.IdEquipamentoOpcionalLocalizacao).HasName("pk_tb_dep_equipamentos_opcionais_localizacao");

            entity.ToTable("tb_dep_equipamentos_opcionais_localizacao", tb => tb.HasTrigger("tr_log_upd_equipamentos_opcionais_localizacao"));

            entity.HasIndex(e => e.Descricao, "idx_tb_dep_equipamentos_opcionais_localizacao1").IsUnique();

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_equipamentos_opcionais_localizacao2");

            entity.HasIndex(e => e.IdUsuarioAlteracao, "idx_tb_dep_equipamentos_opcionais_localizacao3");

            entity.Property(e => e.IdEquipamentoOpcionalLocalizacao)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_equipamento_opcional_localizacao");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");

            entity.HasOne(d => d.IdUsuarioAlteracaoNavigation).WithMany(p => p.TbDepEquipamentosOpcionaisLocalizacaoIdUsuarioAlteracaoNavigations)
                .HasForeignKey(d => d.IdUsuarioAlteracao)
                .HasConstraintName("fk_tb_dep_equipamentos_opcionais_localizacao2");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.TbDepEquipamentosOpcionaisLocalizacaoIdUsuarioCadastroNavigations)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_equipamentos_opcionais_localizacao1");
        });

        modelBuilder.Entity<TbDepFaturamento>(entity =>
        {
            entity.HasKey(e => e.IdFaturamento).HasName("pk_tb_dep_faturamento1");

            entity.ToTable("tb_dep_faturamento", tb =>
                {
                    tb.HasTrigger("tr_del_faturamento");
                    tb.HasTrigger("tr_log_upd_faturamento");
                });

            entity.HasIndex(e => e.IdAtendimento, "idx_tb_dep_faturamento1");

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_faturamento2");

            entity.HasIndex(e => e.IdUsuarioAlteracao, "idx_tb_dep_faturamento3");

            entity.HasIndex(e => e.NumeroIdentificacao, "idx_tb_dep_faturamento5");

            entity.Property(e => e.IdFaturamento).HasColumnName("id_faturamento");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataCalculo)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_calculo");
            entity.Property(e => e.DataEmissaoDocumento)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_emissao_documento");
            entity.Property(e => e.DataEmissaoNotaFiscal)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_emissao_nota_fiscal");
            entity.Property(e => e.DataPagamento)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_pagamento");
            entity.Property(e => e.DataPrazoRetiradaVeiculo)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_prazo_retirada_veiculo");
            entity.Property(e => e.DataRetroativa)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_retroativa");
            entity.Property(e => e.DataVencimento)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vencimento");
            entity.Property(e => e.FlagClienteRealizaFaturamentoArrecadacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_cliente_realiza_faturamento_arrecadacao");
            entity.Property(e => e.FlagCobrarDiariasDiasCorridos)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_cobrar_diarias_dias_corridos");
            entity.Property(e => e.FlagLimitacaoJudicial)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_limitacao_judicial");
            entity.Property(e => e.FlagPermissaoDataRetroativaFaturamento)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_permissao_data_retroativa_faturamento");
            entity.Property(e => e.FlagUsarHoraDiaria)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_usar_hora_diaria");
            entity.Property(e => e.HoraDiaria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("hora_diaria");
            entity.Property(e => e.IdAtendimento).HasColumnName("id_atendimento");
            entity.Property(e => e.IdTipoMeioCobranca)
                .HasDefaultValueSql("((1))")
                .HasColumnName("id_tipo_meio_cobranca");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.MaximoDiariasParaCobranca).HasColumnName("maximo_diarias_para_cobranca");
            entity.Property(e => e.MaximoDiasVencimento).HasColumnName("maximo_dias_vencimento");
            entity.Property(e => e.NumeroIdentificacao)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("numero_identificacao");
            entity.Property(e => e.NumeroNotaFiscal)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("numero_nota_fiscal");
            entity.Property(e => e.Sequencia)
                .HasDefaultValueSql("((1))")
                .HasColumnName("sequencia");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("status");
            entity.Property(e => e.ValorFaturado)
                .HasColumnType("money")
                .HasColumnName("valor_faturado");
            entity.Property(e => e.ValorPagamento)
                .HasColumnType("money")
                .HasColumnName("valor_pagamento");

            entity.HasOne(d => d.IdAtendimentoNavigation).WithMany(p => p.TbDepFaturamentos)
                .HasForeignKey(d => d.IdAtendimento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_faturamento1");

            entity.HasOne(d => d.IdTipoMeioCobrancaNavigation).WithMany(p => p.TbDepFaturamentos)
                .HasForeignKey(d => d.IdTipoMeioCobranca)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_faturamento2");

            entity.HasOne(d => d.IdUsuarioAlteracaoNavigation).WithMany(p => p.TbDepFaturamentoIdUsuarioAlteracaoNavigations)
                .HasForeignKey(d => d.IdUsuarioAlteracao)
                .HasConstraintName("fk_tb_dep_faturamento4");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.TbDepFaturamentoIdUsuarioCadastroNavigations)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_faturamento3");
        });

        modelBuilder.Entity<TbDepFaturamentoBoleto>(entity =>
        {
            entity.HasKey(e => e.IdFaturamentoBoleto).HasName("pk_tb_dep_faturamento_boletos");

            entity.ToTable("tb_dep_faturamento_boletos", tb => tb.HasTrigger("tr_del_faturamento_boletos"));

            entity.HasIndex(e => e.IdFaturamento, "idx_tb_dep_faturamento_boletos1");

            entity.HasIndex(e => e.IdBoleto, "idx_tb_dep_faturamento_boletos2");

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_faturamento_boletos3");

            entity.Property(e => e.IdFaturamentoBoleto).HasColumnName("id_faturamento_boleto");
            entity.Property(e => e.DataEmissao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_emissao");
            entity.Property(e => e.DiasConfiguracaoDataVencimento).HasColumnName("dias_configuracao_data_vencimento");
            entity.Property(e => e.IdBoleto).HasColumnName("id_boleto");
            entity.Property(e => e.IdFaturamento).HasColumnName("id_faturamento");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.Linha)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("linha");
            entity.Property(e => e.SequenciaEmissao)
                .HasDefaultValueSql("((1))")
                .HasColumnName("sequencia_emissao");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("Status:\r\nN = Não Pago;\r\nP = Pago;\r\nC = Cancelado.")
                .HasColumnName("status");
            entity.Property(e => e.Valor)
                .HasColumnType("money")
                .HasColumnName("valor");
            entity.Property(e => e.Via).HasColumnName("via");

            entity.HasOne(d => d.IdFaturamentoNavigation).WithMany(p => p.TbDepFaturamentoBoletos)
                .HasForeignKey(d => d.IdFaturamento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_faturamento_boletos1");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.TbDepFaturamentoBoletos)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_faturamento_boletos2");
        });

        modelBuilder.Entity<TbDepFaturamentoBoletosBak>(entity =>
        {
            entity.HasKey(e => e.IdFaturamentoBoleto).HasName("pk_tb_dep_faturamento_boletos_bak");

            entity.ToTable("tb_dep_faturamento_boletos_bak");

            entity.Property(e => e.IdFaturamentoBoleto).HasColumnName("id_faturamento_boleto");
            entity.Property(e => e.DataEmissao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_emissao");
            entity.Property(e => e.DiasConfiguracaoDataVencimento).HasColumnName("dias_configuracao_data_vencimento");
            entity.Property(e => e.IdBoleto).HasColumnName("id_boleto");
            entity.Property(e => e.IdFaturamento).HasColumnName("id_faturamento");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.Linha)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("linha");
            entity.Property(e => e.SequenciaEmissao).HasColumnName("sequencia_emissao");
            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status");
            entity.Property(e => e.Valor)
                .HasColumnType("money")
                .HasColumnName("valor");
            entity.Property(e => e.Via).HasColumnName("via");
        });

        modelBuilder.Entity<TbDepFaturamentoBoletosImagen>(entity =>
        {
            entity.HasKey(e => e.IdFaturamentoBoletoImagem).HasName("pk_tb_dep_faturamento_boletos_imagens");

            entity.ToTable("tb_dep_faturamento_boletos_imagens");

            entity.HasIndex(e => e.IdFaturamentoBoleto, "idx_tb_dep_faturamento_boletos_imagens1");

            entity.Property(e => e.IdFaturamentoBoletoImagem).HasColumnName("id_faturamento_boleto_imagem");
            entity.Property(e => e.IdFaturamentoBoleto).HasColumnName("id_faturamento_boleto");
            entity.Property(e => e.Imagem)
                .IsRequired()
                .HasColumnName("imagem");

            entity.HasOne(d => d.IdFaturamentoBoletoNavigation).WithMany(p => p.TbDepFaturamentoBoletosImagens)
                .HasForeignKey(d => d.IdFaturamentoBoleto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_faturamento_boletos_imagens1");
        });

        modelBuilder.Entity<TbDepFaturamentoCartao>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tb_dep_faturamento_cartao");

            entity.Property(e => e.DataExpiration)
                .HasColumnType("datetime")
                .HasColumnName("data_expiration");
            entity.Property(e => e.DataIntencao)
                .HasColumnType("datetime")
                .HasColumnName("data_intencao");
            entity.Property(e => e.IdFaturamento).HasColumnName("id_faturamento");
            entity.Property(e => e.IdFaturamentoCartao).HasColumnName("id_faturamento_cartao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.ReferenceId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("referenceId");
            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("valor");
        });

        modelBuilder.Entity<TbDepFaturamentoCodigoAutorizacaoCartao>(entity =>
        {
            entity.HasKey(e => e.IdFaturamentoCodigoAutorizacaoCartao).HasName("pk_tb_dep_faturamento_codigo_autorizacao_cartao");

            entity.ToTable("tb_dep_faturamento_codigo_autorizacao_cartao", tb => tb.HasTrigger("tr_del_faturamento_codigo_autorizacao_cartao"));

            entity.HasIndex(e => e.IdFaturamento, "idx_tb_dep_faturamento_codigo_autorizacao_cartao1");

            entity.Property(e => e.IdFaturamentoCodigoAutorizacaoCartao).HasColumnName("id_faturamento_codigo_autorizacao_cartao");
            entity.Property(e => e.CodigoAutorizacaoCartao)
                .IsRequired()
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("codigo_autorizacao_cartao");
            entity.Property(e => e.IdCartao).HasColumnName("id_cartao");
            entity.Property(e => e.IdFaturamento).HasColumnName("id_faturamento");
            entity.Property(e => e.NumeroCartao)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.Valor)
                .HasColumnType("money")
                .HasColumnName("valor");

            entity.HasOne(d => d.IdFaturamentoNavigation).WithMany(p => p.TbDepFaturamentoCodigoAutorizacaoCartaos)
                .HasForeignKey(d => d.IdFaturamento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_faturamento_codigo_autorizacao_cartao1");
        });

        modelBuilder.Entity<TbDepFaturamentoComposicao>(entity =>
        {
            entity.HasKey(e => e.IdFaturamentoComposicao).HasName("pk_tb_dep_faturamento_composicao1");

            entity.ToTable("tb_dep_faturamento_composicao", tb =>
                {
                    tb.HasTrigger("tr_del_faturamento_composicao");
                    tb.HasTrigger("tr_log_upd_faturamento_composicao");
                });

            entity.HasIndex(e => e.IdFaturamento, "idx_tb_dep_faturamento_composicao1");

            entity.HasIndex(e => e.IdFaturamentoServicoTipoVeiculo, "idx_tb_dep_faturamento_composicao2");

            entity.HasIndex(e => e.IdFaturamentoTipoComposicao, "idx_tb_dep_faturamento_composicao3");

            entity.HasIndex(e => e.IdUsuarioDesconto, "idx_tb_dep_faturamento_composicao4");

            entity.Property(e => e.IdFaturamentoComposicao).HasColumnName("id_faturamento_composicao");
            entity.Property(e => e.IdDocumentoSap)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_documento_sap");
            entity.Property(e => e.IdFaturamento).HasColumnName("id_faturamento");
            entity.Property(e => e.IdFaturamentoServicoTipoVeiculo).HasColumnName("id_faturamento_servico_tipo_veiculo");
            entity.Property(e => e.IdFaturamentoTipoComposicao).HasColumnName("id_faturamento_tipo_composicao");
            entity.Property(e => e.IdUsuarioAlteracaoQuantidade).HasColumnName("id_usuario_alteracao_quantidade");
            entity.Property(e => e.IdUsuarioDesconto).HasColumnName("id_usuario_desconto");
            entity.Property(e => e.ObservacaoDesconto)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("observacao_desconto");
            entity.Property(e => e.ObservacaoQuantidadeAlterada)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("observacao_quantidade_alterada");
            entity.Property(e => e.QuantidadeAlterada)
                .HasColumnType("smallmoney")
                .HasColumnName("quantidade_alterada");
            entity.Property(e => e.QuantidadeComposicao)
                .HasDefaultValueSql("((0))")
                .HasColumnType("smallmoney")
                .HasColumnName("quantidade_composicao");
            entity.Property(e => e.QuantidadeDesconto).HasColumnName("quantidade_desconto");
            entity.Property(e => e.TipoComposicao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("TIPOS DE COBRANÇA:\r\nD = Diárias;\r\nH = Quantidade de HH:MM vezes o Preço;\r\nP = Porcentagem;\r\nQ = Quantidade;\r\nT = Tempo entre duas Datas;\r\nV = Valor.")
                .HasColumnName("tipo_composicao");
            entity.Property(e => e.TipoDesconto)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo_desconto");
            entity.Property(e => e.TipoLancamento)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('C')")
                .IsFixedLength()
                .HasColumnName("tipo_lancamento");
            entity.Property(e => e.ValorComposicao)
                .HasColumnType("money")
                .HasColumnName("valor_composicao");
            entity.Property(e => e.ValorDesconto)
                .HasColumnType("money")
                .HasColumnName("valor_desconto");
            entity.Property(e => e.ValorFaturado)
                .HasColumnType("money")
                .HasColumnName("valor_faturado");
            entity.Property(e => e.ValorTipoComposicao)
                .HasColumnType("money")
                .HasColumnName("valor_tipo_composicao");

            entity.HasOne(d => d.IdFaturamentoNavigation).WithMany(p => p.TbDepFaturamentoComposicaos)
                .HasForeignKey(d => d.IdFaturamento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_faturamento_composicao1");

            entity.HasOne(d => d.IdFaturamentoServicoTipoVeiculoNavigation).WithMany(p => p.TbDepFaturamentoComposicaos)
                .HasForeignKey(d => d.IdFaturamentoServicoTipoVeiculo)
                .HasConstraintName("fk_tb_dep_faturamento_composicao2");

            entity.HasOne(d => d.IdFaturamentoTipoComposicaoNavigation).WithMany(p => p.TbDepFaturamentoComposicaos)
                .HasForeignKey(d => d.IdFaturamentoTipoComposicao)
                .HasConstraintName("fk_tb_dep_faturamento_composicao3");

            entity.HasOne(d => d.IdUsuarioAlteracaoQuantidadeNavigation).WithMany(p => p.TbDepFaturamentoComposicaoIdUsuarioAlteracaoQuantidadeNavigations)
                .HasForeignKey(d => d.IdUsuarioAlteracaoQuantidade)
                .HasConstraintName("fk_tb_dep_faturamento_composicao5");

            entity.HasOne(d => d.IdUsuarioDescontoNavigation).WithMany(p => p.TbDepFaturamentoComposicaoIdUsuarioDescontoNavigations)
                .HasForeignKey(d => d.IdUsuarioDesconto)
                .HasConstraintName("fk_tb_dep_faturamento_composicao4");
        });

        modelBuilder.Entity<TbDepFaturamentoComposicaoNf>(entity =>
        {
            entity.HasKey(e => e.IdFaturamentoComposicaoNf).HasName("pk_tb_dep_faturamento_composicao_nf");

            entity.ToTable("tb_dep_faturamento_composicao_nf", tb => tb.HasTrigger("tr_del_faturamento_composicao_nf"));

            entity.HasIndex(e => e.IdFaturamentoComposicao, "idx_tb_dep_faturamento_composicao_nf1");

            entity.Property(e => e.IdFaturamentoComposicaoNf).HasColumnName("id_faturamento_composicao_nf");
            entity.Property(e => e.DataEmissaoNota)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_emissao_nota");
            entity.Property(e => e.IdFaturamentoComposicao).HasColumnName("id_faturamento_composicao");
            entity.Property(e => e.Nota)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("nota");

            entity.HasOne(d => d.IdFaturamentoComposicaoNavigation).WithMany(p => p.TbDepFaturamentoComposicaoNfs)
                .HasForeignKey(d => d.IdFaturamentoComposicao)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_faturamento_composicao_nf1");
        });

        modelBuilder.Entity<TbDepFaturamentoCondicaoPagamento>(entity =>
        {
            entity.HasKey(e => e.IdFaturamentoCondicaoPagamento).HasName("pk_tb_dep_faturamento_condicao_pagamento");

            entity.ToTable("tb_dep_faturamento_condicao_pagamento");

            entity.Property(e => e.IdFaturamentoCondicaoPagamento)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_faturamento_condicao_pagamento");
            entity.Property(e => e.Descricao)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("descricao");
        });

        modelBuilder.Entity<TbDepFaturamentoProduto>(entity =>
        {
            entity.HasKey(e => e.FaturamentoProdutoCodigo).HasName("pk_tb_dep_faturamento_produtos");

            entity.ToTable("tb_dep_faturamento_produtos");

            entity.HasIndex(e => e.Descricao, "idx_tb_dep_faturamento_produtos1").IsUnique();

            entity.Property(e => e.FaturamentoProdutoCodigo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("faturamento_produto_codigo");
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.FlagSolicitacaoReboque)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_solicitacao_reboque");
        });

        modelBuilder.Entity<TbDepFaturamentoRegra>(entity =>
        {
            entity.HasKey(e => e.IdFaturamentoRegra).HasName("pk_tb_dep_faturamento_regras");

            entity.ToTable("tb_dep_faturamento_regras", tb => tb.HasTrigger("tr_log_upd_faturamento_regras"));

            entity.HasIndex(e => e.IdFaturamentoRegraTipo, "idx_tb_dep_faturamento_regras1");

            entity.HasIndex(e => e.IdCliente, "idx_tb_dep_faturamento_regras2");

            entity.HasIndex(e => e.IdDeposito, "idx_tb_dep_faturamento_regras3");

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_faturamento_regras4");

            entity.HasIndex(e => e.IdUsuarioAlteracao, "idx_tb_dep_faturamento_regras5");

            entity.Property(e => e.IdFaturamentoRegra).HasColumnName("id_faturamento_regra");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataVigenciaFinal)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vigencia_final");
            entity.Property(e => e.DataVigenciaInicial)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vigencia_inicial");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdFaturamentoRegraTipo).HasColumnName("id_faturamento_regra_tipo");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.Valor)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("valor");

            entity.HasOne(d => d.IdClienteNavigation).WithMany(p => p.TbDepFaturamentoRegras)
                .HasForeignKey(d => d.IdCliente)
                .HasConstraintName("fk_tb_dep_faturamento_regras2");

            entity.HasOne(d => d.IdDepositoNavigation).WithMany(p => p.TbDepFaturamentoRegras)
                .HasForeignKey(d => d.IdDeposito)
                .HasConstraintName("fk_tb_dep_faturamento_regras3");

            entity.HasOne(d => d.IdFaturamentoRegraTipoNavigation).WithMany(p => p.TbDepFaturamentoRegras)
                .HasForeignKey(d => d.IdFaturamentoRegraTipo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_faturamento_regras1");

            entity.HasOne(d => d.IdUsuarioAlteracaoNavigation).WithMany(p => p.TbDepFaturamentoRegraIdUsuarioAlteracaoNavigations)
                .HasForeignKey(d => d.IdUsuarioAlteracao)
                .HasConstraintName("fk_tb_dep_faturamento_regras5");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.TbDepFaturamentoRegraIdUsuarioCadastroNavigations)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_faturamento_regras4");
        });

        modelBuilder.Entity<TbDepFaturamentoRegrasTipo>(entity =>
        {
            entity.HasKey(e => e.IdFaturamentoRegraTipo).HasName("pk_tb_dep_faturamento_regras_tipos");

            entity.ToTable("tb_dep_faturamento_regras_tipos");

            entity.HasIndex(e => e.Codigo, "idx_tb_dep_faturamento_regras_tipos1").IsUnique();

            entity.Property(e => e.IdFaturamentoRegraTipo).HasColumnName("id_faturamento_regra_tipo");
            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("codigo");
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.FlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasColumnName("flag_ativo");
            entity.Property(e => e.FlagPossuiValor)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasColumnName("flag_possui_valor");
        });

        modelBuilder.Entity<TbDepFaturamentoServicosAssociado>(entity =>
        {
            entity.HasKey(e => e.IdFaturamentoServicoAssociado).HasName("pk_tb_dep_faturamento_servicos_associados");

            entity.ToTable("tb_dep_faturamento_servicos_associados", tb => tb.HasTrigger("tr_log_upd_faturamento_servicos_associados"));

            entity.HasIndex(e => e.IdCliente, "idx_tb_dep_faturamento_servicos_associados1");

            entity.HasIndex(e => e.IdDeposito, "idx_tb_dep_faturamento_servicos_associados2");

            entity.HasIndex(e => e.IdFaturamentoServicoTipo, "idx_tb_dep_faturamento_servicos_associados3");

            entity.HasIndex(e => e.IdSapTipoComposicao, "idx_tb_dep_faturamento_servicos_associados4");

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_faturamento_servicos_associados5");

            entity.HasIndex(e => e.IdUsuarioAlteracao, "idx_tb_dep_faturamento_servicos_associados6");

            entity.HasIndex(e => e.IdFaturamentoRegra, "idx_tb_dep_faturamento_servicos_associados7");

            entity.Property(e => e.IdFaturamentoServicoAssociado).HasColumnName("id_faturamento_servico_associado");
            entity.Property(e => e.CnaeId).HasColumnName("CnaeID");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataVigenciaFinal)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vigencia_final");
            entity.Property(e => e.DataVigenciaInicial)
                .HasDefaultValueSql("(CONVERT([date],getdate()+(1),(0)))")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vigencia_inicial");
            entity.Property(e => e.Descricao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.DescricaoConfiguracaoNfe)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FlagCobrarSomentePrimeiraFatura)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_cobrar_somente_primeira_fatura");
            entity.Property(e => e.FlagEnviarInscricaoEstadual)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength();
            entity.Property(e => e.FlagEnviarValorIss)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FlagPermiteAlteracaoValor)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_permite_alteracao_valor");
            entity.Property(e => e.FlagPermiteDesconto)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_permite_desconto");
            entity.Property(e => e.FlagServicoObrigatorio)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_servico_obrigatorio");
            entity.Property(e => e.FormaCobranca)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValueSql("('VA')")
                .IsFixedLength()
                .HasComment("AM: Ambos;\r\nVA: Vigência Atual (Valor Padrão);\r\nVI: Vigência Inicial.")
                .HasColumnName("forma_cobranca");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdFaturamentoRegra).HasColumnName("id_faturamento_regra");
            entity.Property(e => e.IdFaturamentoServicoTipo).HasColumnName("id_faturamento_servico_tipo");
            entity.Property(e => e.IdSapTipoComposicao).HasColumnName("id_sap_tipo_composicao");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.ListaServicoId).HasColumnName("ListaServicoID");
            entity.Property(e => e.PrecoPadrao)
                .HasColumnType("smallmoney")
                .HasColumnName("preco_padrao");
            entity.Property(e => e.PrecoValorMinimo)
                .HasColumnType("smallmoney")
                .HasColumnName("preco_valor_minimo");

            entity.HasOne(d => d.IdClienteNavigation).WithMany(p => p.TbDepFaturamentoServicosAssociados)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_faturamento_servicos_associados2");

            entity.HasOne(d => d.IdDepositoNavigation).WithMany(p => p.TbDepFaturamentoServicosAssociados)
                .HasForeignKey(d => d.IdDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_faturamento_servicos_associados3");

            entity.HasOne(d => d.IdFaturamentoRegraNavigation).WithMany(p => p.TbDepFaturamentoServicosAssociados)
                .HasForeignKey(d => d.IdFaturamentoRegra)
                .HasConstraintName("fk_tb_dep_faturamento_servicos_associados7");

            entity.HasOne(d => d.IdFaturamentoServicoTipoNavigation).WithMany(p => p.TbDepFaturamentoServicosAssociados)
                .HasForeignKey(d => d.IdFaturamentoServicoTipo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_faturamento_servicos_associados1");

            entity.HasOne(d => d.IdSapTipoComposicaoNavigation).WithMany(p => p.TbDepFaturamentoServicosAssociados)
                .HasForeignKey(d => d.IdSapTipoComposicao)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_faturamento_servicos_associados4");

            entity.HasOne(d => d.IdUsuarioAlteracaoNavigation).WithMany(p => p.TbDepFaturamentoServicosAssociadoIdUsuarioAlteracaoNavigations)
                .HasForeignKey(d => d.IdUsuarioAlteracao)
                .HasConstraintName("fk_tb_dep_faturamento_servicos_associados6");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.TbDepFaturamentoServicosAssociadoIdUsuarioCadastroNavigations)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_faturamento_servicos_associados5");
        });

        modelBuilder.Entity<TbDepFaturamentoServicosGrv>(entity =>
        {
            entity.HasKey(e => e.IdFaturamentoServicoGrv).HasName("pk_tb_dep_faturamento_servicos_grv");

            entity.ToTable("tb_dep_faturamento_servicos_grv");

            entity.HasIndex(e => new { e.IdGrv, e.IdFaturamentoServicoTipoVeiculo }, "idx_tb_dep_faturamento_servicos_grv1").IsUnique();

            entity.Property(e => e.IdFaturamentoServicoGrv).HasColumnName("id_faturamento_servico_grv");
            entity.Property(e => e.FlagRealizarCobranca)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasColumnName("flag_realizar_cobranca");
            entity.Property(e => e.IdFaturamentoServicoTipoVeiculo).HasColumnName("id_faturamento_servico_tipo_veiculo");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdUsuarioDesconto).HasColumnName("id_usuario_desconto");
            entity.Property(e => e.ObservacaoDesconto)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("observacao_desconto");
            entity.Property(e => e.OrigemCadastro)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('G')")
                .IsFixedLength()
                .HasColumnName("origem_cadastro");
            entity.Property(e => e.QuantidadeDesconto).HasColumnName("quantidade_desconto");
            entity.Property(e => e.TempoTrabalhado)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("tempo_trabalhado");
            entity.Property(e => e.TipoDesconto)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo_desconto");
            entity.Property(e => e.Valor)
                .HasColumnType("smallmoney")
                .HasColumnName("valor");
            entity.Property(e => e.ValorDesconto)
                .HasColumnType("money")
                .HasColumnName("valor_desconto");

            entity.HasOne(d => d.IdFaturamentoServicoTipoVeiculoNavigation).WithMany(p => p.TbDepFaturamentoServicosGrvs)
                .HasForeignKey(d => d.IdFaturamentoServicoTipoVeiculo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_faturamento_servicos_grv2");

            entity.HasOne(d => d.IdGrvNavigation).WithMany(p => p.TbDepFaturamentoServicosGrvs)
                .HasForeignKey(d => d.IdGrv)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_faturamento_servicos_grv1");
        });

        modelBuilder.Entity<TbDepFaturamentoServicosTipo>(entity =>
        {
            entity.HasKey(e => e.IdFaturamentoServicoTipo).HasName("pk_tb_dep_faturamento_servicos_tipos");

            entity.ToTable("tb_dep_faturamento_servicos_tipos", tb => tb.HasTrigger("tr_log_upd_faturamento_servicos_tipos"));

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_faturamento_servicos_tipos1");

            entity.HasIndex(e => e.IdUsuarioAlteracao, "idx_tb_dep_faturamento_servicos_tipos2");

            entity.Property(e => e.IdFaturamentoServicoTipo).HasColumnName("id_faturamento_servico_tipo");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.FaturamentoProdutoCodigo)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValueSql("('DEP')")
                .IsFixedLength()
                .HasColumnName("faturamento_produto_codigo");
            entity.Property(e => e.FlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasColumnName("flag_ativo");
            entity.Property(e => e.FlagCobrancaPorHora)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_cobranca_por_hora");
            entity.Property(e => e.FlagCobrarTelaGrv)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_cobrar_tela_grv");
            entity.Property(e => e.FlagImpressaoAgrupada)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_impressao_agrupada");
            entity.Property(e => e.FlagNaoCobrarSeNaoUsouReboque)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_nao_cobrar_se_nao_usou_reboque");
            entity.Property(e => e.FlagRebocada)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_rebocada");
            entity.Property(e => e.FlagServicoObrigatorio)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_servico_obrigatorio");
            entity.Property(e => e.FlagTributacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_tributacao");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.OrdemImpressao)
                .HasDefaultValueSql("((1))")
                .HasColumnName("ordem_impressao");
            entity.Property(e => e.TipoCobranca)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("TIPOS DE COBRANÇA:\r\nD = Diárias;\r\nH = Quantidade de HH:MM vezes o Preço;\r\nP = Porcentagem;\r\nQ = Quantidade;\r\nT = Tempo entre duas Datas;\r\nV = Valor.")
                .HasColumnName("tipo_cobranca");

            entity.HasOne(d => d.FaturamentoProdutoCodigoNavigation).WithMany(p => p.TbDepFaturamentoServicosTipos)
                .HasForeignKey(d => d.FaturamentoProdutoCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_faturamento_servicos_tipos3");

            entity.HasOne(d => d.IdUsuarioAlteracaoNavigation).WithMany(p => p.TbDepFaturamentoServicosTipoIdUsuarioAlteracaoNavigations)
                .HasForeignKey(d => d.IdUsuarioAlteracao)
                .HasConstraintName("fk_tb_dep_faturamento_servicos_tipos2");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.TbDepFaturamentoServicosTipoIdUsuarioCadastroNavigations)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_faturamento_servicos_tipos1");
        });

        modelBuilder.Entity<TbDepFaturamentoServicosTipoVeiculo>(entity =>
        {
            entity.HasKey(e => e.IdFaturamentoServicoTipoVeiculo).HasName("pk_tb_dep_faturamento_servicos_tipo_veiculos");

            entity.ToTable("tb_dep_faturamento_servicos_tipo_veiculos");

            entity.HasIndex(e => e.IdFaturamentoServicoAssociado, "idx_tb_dep_faturamento_servicos_tipo_veiculos1");

            entity.HasIndex(e => e.IdTipoVeiculo, "idx_tb_dep_faturamento_servicos_tipo_veiculos2");

            entity.Property(e => e.IdFaturamentoServicoTipoVeiculo).HasColumnName("id_faturamento_servico_tipo_veiculo");
            entity.Property(e => e.IdFaturamentoServicoAssociado).HasColumnName("id_faturamento_servico_associado");
            entity.Property(e => e.IdTipoVeiculo).HasColumnName("id_tipo_veiculo");

            entity.HasOne(d => d.IdFaturamentoServicoAssociadoNavigation).WithMany(p => p.TbDepFaturamentoServicosTipoVeiculos)
                .HasForeignKey(d => d.IdFaturamentoServicoAssociado)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_faturamento_servicos_tipo_veiculos1");

            entity.HasOne(d => d.IdTipoVeiculoNavigation).WithMany(p => p.TbDepFaturamentoServicosTipoVeiculos)
                .HasForeignKey(d => d.IdTipoVeiculo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_faturamento_servicos_tipo_veiculos2");
        });

        modelBuilder.Entity<TbDepFaturamentoTipoComposicao>(entity =>
        {
            entity.HasKey(e => e.IdFaturamentoTipoComposicao).HasName("pk_tb_dep_faturamento_tipo_composicao");

            entity.ToTable("tb_dep_faturamento_tipo_composicao");

            entity.Property(e => e.IdFaturamentoTipoComposicao)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_faturamento_tipo_composicao");
            entity.Property(e => e.CodigoSap)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codigo_sap");
            entity.Property(e => e.Descricao)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.DescricaoSap)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descricao_sap");
            entity.Property(e => e.IdFaturamentoCondicaoPagamento).HasColumnName("id_faturamento_condicao_pagamento");
            entity.Property(e => e.Origem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("origem");
            entity.Property(e => e.Tipo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo");

            entity.HasOne(d => d.IdFaturamentoCondicaoPagamentoNavigation).WithMany(p => p.TbDepFaturamentoTipoComposicaos)
                .HasForeignKey(d => d.IdFaturamentoCondicaoPagamento)
                .HasConstraintName("fk_tb_dep_faturamento_tipo_composicao1");
        });

        modelBuilder.Entity<TbDepFuncionario>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tb_dep_funcionarios");

            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.FlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_ativo");
            entity.Property(e => e.IdCargo).HasColumnName("id_cargo");
            entity.Property(e => e.IdDepartamento).HasColumnName("id_departamento");
            entity.Property(e => e.IdEmpresa).HasColumnName("id_empresa");
            entity.Property(e => e.IdFuncionario).HasColumnName("id_funcionario");
            entity.Property(e => e.IdPessoa).HasColumnName("id_pessoa");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.Matricula)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("matricula");
        });

        modelBuilder.Entity<TbDepGgvFoto>(entity =>
        {
            entity.HasKey(e => e.IdFoto).HasName("pk_tb_dep_ggv_fotos1");

            entity.ToTable("tb_dep_ggv_fotos");

            entity.HasIndex(e => e.IdGrv, "idx_tb_dep_ggv_fotos1");

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_ggv_fotos2");

            entity.HasIndex(e => e.DataCadastro, "idx_tb_dep_ggv_fotos3");

            entity.Property(e => e.IdFoto).HasColumnName("id_foto");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.Foto).HasColumnName("foto");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.TipoCadastro)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('E')")
                .IsFixedLength()
                .HasComment("E: Entrada no Pátio;\r\nV: Vistoria;\r\nR: Regularização.")
                .HasColumnName("tipo_cadastro");
            entity.Property(e => e.TipoFoto)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo_foto");
        });

        modelBuilder.Entity<TbDepGrv>(entity =>
        {
            entity.HasKey(e => e.IdGrv).HasName("pk_tb_dep_grv");

            entity.ToTable("tb_dep_grv", tb =>
                {
                    tb.HasTrigger("tr_log_del_grv");
                    tb.HasTrigger("tr_log_del_grv_new");
                    tb.HasTrigger("tr_log_upd_grv");
                    tb.HasTrigger("tr_log_upd_grv_leilao");
                    tb.HasTrigger("tr_log_upd_grv_new");
                });

            entity.HasIndex(e => e.NumeroFormularioGrv, "idx_tb_dep_grv1");

            entity.HasIndex(e => e.IdMotivoApreensao, "idx_tb_dep_grv10");

            entity.HasIndex(e => e.IdStatusOperacao, "idx_tb_dep_grv11");

            entity.HasIndex(e => e.IdLiberacao, "idx_tb_dep_grv12");

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_grv13");

            entity.HasIndex(e => e.IdUsuarioAlteracao, "idx_tb_dep_grv14");

            entity.HasIndex(e => e.IdUsuarioEdicao, "idx_tb_dep_grv15");

            entity.HasIndex(e => e.IdUsuarioCadastroGgv, "idx_tb_dep_grv16");

            entity.HasIndex(e => e.IdCep, "idx_tb_dep_grv17");

            entity.HasIndex(e => e.IdCor, "idx_tb_dep_grv18");

            entity.HasIndex(e => e.IdCorOstentada, "idx_tb_dep_grv19");

            entity.HasIndex(e => e.Placa, "idx_tb_dep_grv2");

            entity.HasIndex(e => e.IdDetranMarcaModelo, "idx_tb_dep_grv20");

            entity.HasIndex(e => e.AgenteId, "idx_tb_dep_grv21");

            entity.HasIndex(e => e.Chassi, "idx_tb_dep_grv3");

            entity.HasIndex(e => e.IdCliente, "idx_tb_dep_grv4");

            entity.HasIndex(e => e.IdDeposito, "idx_tb_dep_grv5");

            entity.HasIndex(e => e.IdTipoVeiculo, "idx_tb_dep_grv6");

            entity.HasIndex(e => e.IdReboquista, "idx_tb_dep_grv7");

            entity.HasIndex(e => e.IdReboque, "idx_tb_dep_grv8");

            entity.HasIndex(e => e.IdAutoridadeResponsavel, "idx_tb_dep_grv9");

            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.AgenteId).HasColumnName("AgenteID");
            entity.Property(e => e.Bairro)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("bairro");
            entity.Property(e => e.Chassi)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("chassi");
            entity.Property(e => e.Complemento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("complemento");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataHoraGuarda)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_hora_guarda");
            entity.Property(e => e.DataHoraRemocao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_hora_remocao");
            entity.Property(e => e.DataOficio)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_oficio");
            entity.Property(e => e.DataTransbordo)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_transbordo");
            entity.Property(e => e.DistanciaAteAcautelamento).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.Divergencia1)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasColumnName("divergencia1");
            entity.Property(e => e.Divergencia2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("divergencia2");
            entity.Property(e => e.Divergencia3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("divergencia3");
            entity.Property(e => e.Divergencia4)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("divergencia4");
            entity.Property(e => e.Divergencia5)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("divergencia5");
            entity.Property(e => e.EstacionamentoNumeroVaga)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("estacionamento_numero_vaga");
            entity.Property(e => e.EstacionamentoSetor)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("estacionamento_setor");
            entity.Property(e => e.FaturamentoProdutoCodigo)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValueSql("('DEP')")
                .IsFixedLength()
                .HasColumnName("faturamento_produto_codigo");
            entity.Property(e => e.FlagChaveDeposito)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_chave_deposito");
            entity.Property(e => e.FlagComboio)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_comboio");
            entity.Property(e => e.FlagEstadoLacre)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_estado_lacre");
            entity.Property(e => e.FlagGgv)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("Flag que identifica se o GGV já foi cadastrado")
                .HasColumnName("flag_ggv");
            entity.Property(e => e.FlagTransbordo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_transbordo");
            entity.Property(e => e.FlagVeiculoMesmasCondicoes)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_veiculo_mesmas_condicoes");
            entity.Property(e => e.FlagVeiculoNaoIdentificado)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_veiculo_nao_identificado");
            entity.Property(e => e.FlagVeiculoNaoOstentaPlaca)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_veiculo_nao_ostenta_placa");
            entity.Property(e => e.FlagVeiculoRoubadoFurtado)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_veiculo_roubado_furtado");
            entity.Property(e => e.FlagVeiculoSemRegistro)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_veiculo_sem_registro");
            entity.Property(e => e.FlagVistoria)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_vistoria");
            entity.Property(e => e.IdAutoridadeResponsavel).HasColumnName("id_autoridade_responsavel");
            entity.Property(e => e.IdCep).HasColumnName("id_cep");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdCor).HasColumnName("id_cor");
            entity.Property(e => e.IdCorOstentada).HasColumnName("id_cor_ostentada");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdDetranMarcaModelo).HasColumnName("id_detran_marca_modelo");
            entity.Property(e => e.IdLiberacao).HasColumnName("id_liberacao");
            entity.Property(e => e.IdMotivoApreensao).HasColumnName("id_motivo_apreensao");
            entity.Property(e => e.IdReboque).HasColumnName("id_reboque");
            entity.Property(e => e.IdReboquista).HasColumnName("id_reboquista");
            entity.Property(e => e.IdStatusOperacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('P')")
                .IsFixedLength()
                .HasColumnName("id_status_operacao");
            entity.Property(e => e.IdTarifaTipoVeiculo).HasColumnName("id_tarifa_tipo_veiculo");
            entity.Property(e => e.IdTipoVeiculo).HasColumnName("id_tipo_veiculo");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.IdUsuarioCadastroGgv)
                .HasComment("ID do Usuário que realizou o cadastro das informações de GGV")
                .HasColumnName("id_usuario_cadastro_ggv");
            entity.Property(e => e.IdUsuarioEdicao).HasColumnName("id_usuario_edicao");
            entity.Property(e => e.Latitude)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("latitude");
            entity.Property(e => e.LatitudeAcautelamento)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Logradouro)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("logradouro");
            entity.Property(e => e.Longitude)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("longitude");
            entity.Property(e => e.LongitudeAcautelamento)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.MatriculaAutoridadeResponsavel)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("matricula_autoridade_responsavel");
            entity.Property(e => e.MatriculaComandante)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("matricula_comandante");
            entity.Property(e => e.Municipio)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("municipio");
            entity.Property(e => e.NomeAutoridadeResponsavel)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("nome_autoridade_responsavel");
            entity.Property(e => e.Numero)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("numero");
            entity.Property(e => e.NumeroChave)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("numero_chave");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("numero_formulario_grv");
            entity.Property(e => e.NumeroOficio)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("numero_oficio");
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa");
            entity.Property(e => e.PlacaOstentada)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("placa_ostentada");
            entity.Property(e => e.PontoReferencia)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ponto_referencia");
            entity.Property(e => e.Referencia)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("referencia");
            entity.Property(e => e.Renavam)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("renavam");
            entity.Property(e => e.Rfid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("rfid");
            entity.Property(e => e.TermoDetran)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("termo_detran");
            entity.Property(e => e.Uf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("uf");
            entity.Property(e => e.VeiculoUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.FaturamentoProdutoCodigoNavigation).WithMany(p => p.TbDepGrvs)
                .HasForeignKey(d => d.FaturamentoProdutoCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_grv14");

            entity.HasOne(d => d.IdAutoridadeResponsavelNavigation).WithMany(p => p.TbDepGrvs)
                .HasForeignKey(d => d.IdAutoridadeResponsavel)
                .HasConstraintName("fk_tb_dep_grv6");

            entity.HasOne(d => d.IdClienteNavigation).WithMany(p => p.TbDepGrvs)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_grv1");

            entity.HasOne(d => d.IdDepositoNavigation).WithMany(p => p.TbDepGrvs)
                .HasForeignKey(d => d.IdDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_grv2");

            entity.HasOne(d => d.IdLiberacaoNavigation).WithMany(p => p.TbDepGrvs)
                .HasForeignKey(d => d.IdLiberacao)
                .HasConstraintName("fk_tb_dep_grv9");

            entity.HasOne(d => d.IdMotivoApreensaoNavigation).WithMany(p => p.TbDepGrvs)
                .HasForeignKey(d => d.IdMotivoApreensao)
                .HasConstraintName("fk_tb_dep_grv7");

            entity.HasOne(d => d.IdReboqueNavigation).WithMany(p => p.TbDepGrvs)
                .HasForeignKey(d => d.IdReboque)
                .HasConstraintName("fk_tb_dep_grv5");

            entity.HasOne(d => d.IdReboquistaNavigation).WithMany(p => p.TbDepGrvs)
                .HasForeignKey(d => d.IdReboquista)
                .HasConstraintName("fk_tb_dep_grv4");

            entity.HasOne(d => d.IdStatusOperacaoNavigation).WithMany(p => p.TbDepGrvs)
                .HasForeignKey(d => d.IdStatusOperacao)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_grv8");

            entity.HasOne(d => d.IdTipoVeiculoNavigation).WithMany(p => p.TbDepGrvs)
                .HasForeignKey(d => d.IdTipoVeiculo)
                .HasConstraintName("fk_tb_dep_grv3");

            entity.HasOne(d => d.IdUsuarioAlteracaoNavigation).WithMany(p => p.TbDepGrvIdUsuarioAlteracaoNavigations)
                .HasForeignKey(d => d.IdUsuarioAlteracao)
                .HasConstraintName("fk_tb_dep_grv11");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.TbDepGrvIdUsuarioCadastroNavigations)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_grv10");

            entity.HasOne(d => d.IdUsuarioCadastroGgvNavigation).WithMany(p => p.TbDepGrvIdUsuarioCadastroGgvNavigations)
                .HasForeignKey(d => d.IdUsuarioCadastroGgv)
                .HasConstraintName("fk_tb_dep_grv13");

            entity.HasOne(d => d.IdUsuarioEdicaoNavigation).WithMany(p => p.TbDepGrvIdUsuarioEdicaoNavigations)
                .HasForeignKey(d => d.IdUsuarioEdicao)
                .HasConstraintName("fk_tb_dep_grv12");
        });

        modelBuilder.Entity<TbDepGrvBloqueio>(entity =>
        {
            entity.HasKey(e => e.IdGrvBloqueio).HasName("pk_tb_dep_grv_bloqueio");

            entity.ToTable("tb_dep_grv_bloqueio");

            entity.HasIndex(e => e.IdGrv, "idx_tb_dep_grv_bloqueio1");

            entity.HasIndex(e => e.IdStatusOperacaoAnterior, "idx_tb_dep_grv_bloqueio2");

            entity.HasIndex(e => e.IdGrvBloqueioMotivo, "idx_tb_dep_grv_bloqueio3");

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_grv_bloqueio4");

            entity.HasIndex(e => e.IdUsuarioAlteracao, "idx_tb_dep_grv_bloqueio5");

            entity.Property(e => e.IdGrvBloqueio).HasColumnName("id_grv_bloqueio");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdGrvBloqueioMotivo).HasColumnName("id_grv_bloqueio_motivo");
            entity.Property(e => e.IdStatusOperacaoAnterior)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_status_operacao_anterior");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.Motivo)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("motivo");

            entity.HasOne(d => d.IdGrvNavigation).WithMany(p => p.TbDepGrvBloqueios)
                .HasForeignKey(d => d.IdGrv)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_grv_bloqueio1");

            entity.HasOne(d => d.IdGrvBloqueioMotivoNavigation).WithMany(p => p.TbDepGrvBloqueios)
                .HasForeignKey(d => d.IdGrvBloqueioMotivo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_grv_bloqueio3");

            entity.HasOne(d => d.IdStatusOperacaoAnteriorNavigation).WithMany(p => p.TbDepGrvBloqueios)
                .HasForeignKey(d => d.IdStatusOperacaoAnterior)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_grv_bloqueio2");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.TbDepGrvBloqueios)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_grv_bloqueio7");
        });

        modelBuilder.Entity<TbDepGrvBloqueioMotivo>(entity =>
        {
            entity.HasKey(e => e.IdGrvBloqueioMotivo).HasName("pk_tb_dep_grv_bloqueio_motivos");

            entity.ToTable("tb_dep_grv_bloqueio_motivos");

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_grv_bloqueio1");

            entity.HasIndex(e => e.IdUsuarioAlteracao, "idx_tb_dep_grv_bloqueio2");

            entity.Property(e => e.IdGrvBloqueioMotivo)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_grv_bloqueio_motivo");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.FlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasColumnName("flag_ativo");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.Tipo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.TbDepGrvBloqueioMotivos)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_grv_bloqueio_motivos1");
        });

        modelBuilder.Entity<TbDepGrvCancelamento>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tb_dep_grv_cancelamentos");

            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.IdCancelamento)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_cancelamento");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdTipoCancelamentoGrv).HasColumnName("id_tipo_cancelamento_grv");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.MatriculaSolicitante)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("matricula_solicitante");
            entity.Property(e => e.MotivoCancelamento)
                .HasColumnType("text")
                .HasColumnName("motivo_cancelamento");
            entity.Property(e => e.NomeSolicitante)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("nome_solicitante");
        });

        modelBuilder.Entity<TbDepGrvClientesCodigoIdentificacao>(entity =>
        {
            entity.HasKey(e => e.IdClienteCodigoIdentificacao).HasName("pk_tb_dep_grv_clientes_codigo_identificacao");

            entity.ToTable("tb_dep_grv_clientes_codigo_identificacao");

            entity.HasIndex(e => e.IdGrv, "idx_tb_dep_grv_clientes_codigo_identificacao1").IsUnique();

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_grv_clientes_codigo_identificacao2");

            entity.HasIndex(e => e.IdUsuarioAlteracao, "idx_tb_dep_grv_clientes_codigo_identificacao3");

            entity.HasIndex(e => e.CodigoIdentificacao, "idx_tb_dep_grv_clientes_codigo_identificacao4");

            entity.Property(e => e.IdClienteCodigoIdentificacao).HasColumnName("id_cliente_codigo_identificacao");
            entity.Property(e => e.CodigoIdentificacao)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("codigo_identificacao");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");

            entity.HasOne(d => d.IdGrvNavigation).WithOne(p => p.TbDepGrvClientesCodigoIdentificacao)
                .HasForeignKey<TbDepGrvClientesCodigoIdentificacao>(d => d.IdGrv)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_grv_clientes_codigo_identificacao1");

            entity.HasOne(d => d.IdUsuarioAlteracaoNavigation).WithMany(p => p.TbDepGrvClientesCodigoIdentificacaoIdUsuarioAlteracaoNavigations)
                .HasForeignKey(d => d.IdUsuarioAlteracao)
                .HasConstraintName("fk_tb_dep_grv_clientes_codigo_identificacao3");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.TbDepGrvClientesCodigoIdentificacaoIdUsuarioCadastroNavigations)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_grv_clientes_codigo_identificacao2");
        });

        modelBuilder.Entity<TbDepGrvCobrancasLegai>(entity =>
        {
            entity.HasKey(e => e.IdCobrancaLegal).HasName("pk_tb_dep_grv_cobrancas_legais");

            entity.ToTable("tb_dep_grv_cobrancas_legais");

            entity.HasIndex(e => e.IdGrv, "idx_tb_dep_grv_cobrancas_legais1");

            entity.HasIndex(e => e.IdTipoCobrancaLegal, "idx_tb_dep_grv_cobrancas_legais2");

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_grv_cobrancas_legais3");

            entity.Property(e => e.IdCobrancaLegal).HasColumnName("id_cobranca_legal");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataVencimento)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vencimento");
            entity.Property(e => e.Exercicio)
                .HasColumnType("numeric(4, 0)")
                .HasColumnName("exercicio");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdMunicipio).HasColumnName("id_municipio");
            entity.Property(e => e.IdTipoCobrancaLegal).HasColumnName("id_tipo_cobranca_legal");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.NumeroAutoInfracao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("numero_auto_infracao");
            entity.Property(e => e.Valor)
                .HasColumnType("money")
                .HasColumnName("valor");

            entity.HasOne(d => d.IdGrvNavigation).WithMany(p => p.TbDepGrvCobrancasLegais)
                .HasForeignKey(d => d.IdGrv)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_grv_cobrancas_legais1");

            entity.HasOne(d => d.IdTipoCobrancaLegalNavigation).WithMany(p => p.TbDepGrvCobrancasLegais)
                .HasForeignKey(d => d.IdTipoCobrancaLegal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_grv_cobrancas_legais2");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.TbDepGrvCobrancasLegais)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_grv_cobrancas_legais3");
        });

        modelBuilder.Entity<TbDepGrvDocumento>(entity =>
        {
            entity.HasKey(e => e.GrvDocumentosId);

            entity.ToTable("tb_dep_grv_documentos");

            entity.HasIndex(e => e.GrvId, "IDX_tb_dep_grv_documentos1");

            entity.HasIndex(e => e.GrvDocumentosQualificacaoId, "IDX_tb_dep_grv_documentos2");

            entity.HasIndex(e => e.UsuarioCadastroId, "IDX_tb_dep_grv_documentos3");

            entity.HasIndex(e => e.UsuarioExclusaoId, "IDX_tb_dep_grv_documentos4");

            entity.Property(e => e.GrvDocumentosId).HasColumnName("GrvDocumentosID");
            entity.Property(e => e.ArquivoNomeReal)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ArquivoRemoto)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.DataExclusao).HasColumnType("smalldatetime");
            entity.Property(e => e.DiretorioRemoto)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GrvDocumentosQualificacaoId).HasColumnName("GrvDocumentosQualificacaoID");
            entity.Property(e => e.GrvId).HasColumnName("GrvID");
            entity.Property(e => e.UsuarioCadastroId).HasColumnName("UsuarioCadastroID");
            entity.Property(e => e.UsuarioExclusaoId).HasColumnName("UsuarioExclusaoID");

            entity.HasOne(d => d.GrvDocumentosQualificacao).WithMany(p => p.TbDepGrvDocumentos)
                .HasForeignKey(d => d.GrvDocumentosQualificacaoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tb_dep_grv_documentos2");

            entity.HasOne(d => d.Grv).WithMany(p => p.TbDepGrvDocumentos)
                .HasForeignKey(d => d.GrvId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tb_dep_grv_documentos1");

            entity.HasOne(d => d.UsuarioCadastro).WithMany(p => p.TbDepGrvDocumentoUsuarioCadastros)
                .HasForeignKey(d => d.UsuarioCadastroId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tb_dep_grv_documentos3");

            entity.HasOne(d => d.UsuarioExclusao).WithMany(p => p.TbDepGrvDocumentoUsuarioExclusaos)
                .HasForeignKey(d => d.UsuarioExclusaoId)
                .HasConstraintName("FK_tb_dep_grv_documentos4");
        });

        modelBuilder.Entity<TbDepGrvDocumentosQualificacao>(entity =>
        {
            entity.HasKey(e => e.GrvDocumentosQualificacaoId);

            entity.ToTable("tb_dep_grv_documentos_qualificacao");

            entity.Property(e => e.GrvDocumentosQualificacaoId)
                .ValueGeneratedOnAdd()
                .HasColumnName("GrvDocumentosQualificacaoID");
            entity.Property(e => e.Descricao)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TbDepGrvDrfa>(entity =>
        {
            entity.HasKey(e => e.IdGrvDrfa).HasName("pk_tb_dep_grv_drfa");

            entity.ToTable("tb_dep_grv_drfa", tb =>
                {
                    tb.HasTrigger("tr_log_del_grv_drfa");
                    tb.HasTrigger("tr_log_upd_grv_drfa");
                });

            entity.HasIndex(e => e.IdGrv, "idx_tb_dep_grv_drfa1").IsUnique();

            entity.HasIndex(e => e.IdGrvDrfaTipoRegistro, "idx_tb_dep_grv_drfa2");

            entity.HasIndex(e => e.IdOrgaoEmissor, "idx_tb_dep_grv_drfa3");

            entity.HasIndex(e => e.IdAutoridadeDivisao, "idx_tb_dep_grv_drfa4");

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_grv_drfa5");

            entity.HasIndex(e => e.IdUsuarioAlteracao, "idx_tb_dep_grv_drfa6");

            entity.Property(e => e.IdGrvDrfa).HasColumnName("id_grv_drfa");
            entity.Property(e => e.AutoridadeDivisaoComplemento)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("autoridade_divisao_complemento");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.EstadoGeralVeiculo)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("estado_geral_veiculo");
            entity.Property(e => e.FlagRegistroAgendado)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_registro_agendado");
            entity.Property(e => e.FlagRegistroRecuperacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_registro_recuperacao");
            entity.Property(e => e.IdAutoridadeDivisao).HasColumnName("id_autoridade_divisao");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdGrvDrfaTipoRegistro).HasColumnName("id_grv_drfa_tipo_registro");
            entity.Property(e => e.IdOrgaoEmissor).HasColumnName("id_orgao_emissor");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.LocalRemocaoEnderecoCompleto)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("local_remocao_endereco_completo");
            entity.Property(e => e.LocalRemocaoLatitude)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("local_remocao_latitude");
            entity.Property(e => e.LocalRemocaoLongitude)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("local_remocao_longitude");
            entity.Property(e => e.LocalRemocaoReferencia)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("local_remocao_referencia");
            entity.Property(e => e.NumeroRegistroRouboFurto)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("numero_registro_roubo_furto");
            entity.Property(e => e.RegistroRouboFurtoMatriculaAgente)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("registro_roubo_furto_matricula_agente");
            entity.Property(e => e.RegistroRouboFurtoNomeAgente)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("registro_roubo_furto_nome_agente");

            entity.HasOne(d => d.IdGrvNavigation).WithOne(p => p.TbDepGrvDrfa)
                .HasForeignKey<TbDepGrvDrfa>(d => d.IdGrv)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_grv_drfa1");

            entity.HasOne(d => d.IdGrvDrfaTipoRegistroNavigation).WithMany(p => p.TbDepGrvDrfas)
                .HasForeignKey(d => d.IdGrvDrfaTipoRegistro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_grv_drfa2");

            entity.HasOne(d => d.IdUsuarioAlteracaoNavigation).WithMany(p => p.TbDepGrvDrfaIdUsuarioAlteracaoNavigations)
                .HasForeignKey(d => d.IdUsuarioAlteracao)
                .HasConstraintName("fk_tb_dep_grv_drfa4");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.TbDepGrvDrfaIdUsuarioCadastroNavigations)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_grv_drfa3");
        });

        modelBuilder.Entity<TbDepGrvDrfaAgendamentoRetiradum>(entity =>
        {
            entity.HasKey(e => e.IdGrvDrfaAgendamentoRetirada).HasName("pk_tb_dep_grv_drfa_agendamento_retirada");

            entity.ToTable("tb_dep_grv_drfa_agendamento_retirada", tb =>
                {
                    tb.HasTrigger("tr_log_del_grv_drfa_agendamento_retirada");
                    tb.HasTrigger("tr_log_upd_grv_drfa_agendamento_retirada");
                });

            entity.HasIndex(e => e.IdGrvDrfa, "idx_tb_dep_grv_drfa_agendamento_retirada1");

            entity.HasIndex(e => e.IdUsuarioRegistroAgendamento, "idx_tb_dep_grv_drfa_agendamento_retirada2");

            entity.Property(e => e.IdGrvDrfaAgendamentoRetirada).HasColumnName("id_grv_drfa_agendamento_retirada");
            entity.Property(e => e.CpfResponsavelAgendamento)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("cpf_responsavel_agendamento");
            entity.Property(e => e.DataAgendamento)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_agendamento");
            entity.Property(e => e.DataRegistroAgendamento)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_registro_agendamento");
            entity.Property(e => e.IdGrvDrfa).HasColumnName("id_grv_drfa");
            entity.Property(e => e.IdUsuarioRegistroAgendamento).HasColumnName("id_usuario_registro_agendamento");
            entity.Property(e => e.NomeResponsavelAgendamento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nome_responsavel_agendamento");

            entity.HasOne(d => d.IdGrvDrfaNavigation).WithMany(p => p.TbDepGrvDrfaAgendamentoRetirada)
                .HasForeignKey(d => d.IdGrvDrfa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_grv_drfa_agendamento_retirada1");

            entity.HasOne(d => d.IdUsuarioRegistroAgendamentoNavigation).WithMany(p => p.TbDepGrvDrfaAgendamentoRetirada)
                .HasForeignKey(d => d.IdUsuarioRegistroAgendamento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_grv_drfa_agendamento_retirada2");
        });

        modelBuilder.Entity<TbDepGrvDrfaArquivoRegistro>(entity =>
        {
            entity.HasKey(e => e.IdGrvDrfaArquivoRegistro).HasName("pk_tb_dep_grv_drfa_arquivo_registro");

            entity.ToTable("tb_dep_grv_drfa_arquivo_registro", tb =>
                {
                    tb.HasTrigger("tr_log_del_grv_drfa_arquivo_registro");
                    tb.HasTrigger("tr_log_upd_grv_drfa_arquivo_registro");
                });

            entity.HasIndex(e => e.IdGrvDrfa, "idx_tb_dep_grv_drfa_arquivo_registro1");

            entity.Property(e => e.IdGrvDrfaArquivoRegistro).HasColumnName("id_grv_drfa_arquivo_registro");
            entity.Property(e => e.ArquivoNome)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("arquivo_nome");
            entity.Property(e => e.ArquivoRegistro).HasColumnName("arquivo_registro");
            entity.Property(e => e.IdGrvDrfa).HasColumnName("id_grv_drfa");
            entity.Property(e => e.TipoArquivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo_arquivo");

            entity.HasOne(d => d.IdGrvDrfaNavigation).WithMany(p => p.TbDepGrvDrfaArquivoRegistros)
                .HasForeignKey(d => d.IdGrvDrfa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_grv_drfa_arquivo_registro1");
        });

        modelBuilder.Entity<TbDepGrvDrfaRegistroRecuperacao>(entity =>
        {
            entity.HasKey(e => e.IdGrvDrfaRegistroRecuperacao).HasName("pk_tb_dep_grv_drfa_registro_recuperacao");

            entity.ToTable("tb_dep_grv_drfa_registro_recuperacao", tb =>
                {
                    tb.HasTrigger("tr_log_del_grv_drfa_registro_recuperacao");
                    tb.HasTrigger("tr_log_upd_grv_drfa_registro_recuperacao");
                });

            entity.HasIndex(e => e.IdGrvDrfa, "idx_tb_dep_grv_drfa_registro_recuperacao1");

            entity.HasIndex(e => e.IdAutoridadeDivisao, "idx_tb_dep_grv_drfa_registro_recuperacao2");

            entity.Property(e => e.IdGrvDrfaRegistroRecuperacao).HasColumnName("id_grv_drfa_registro_recuperacao");
            entity.Property(e => e.DataRegistroRecuperacao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_registro_recuperacao");
            entity.Property(e => e.IdAutoridadeDivisao).HasColumnName("id_autoridade_divisao");
            entity.Property(e => e.IdGrvDrfa).HasColumnName("id_grv_drfa");
            entity.Property(e => e.NumeroRegistroRecuperacao)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("numero_registro_recuperacao");
            entity.Property(e => e.RegistroRecuperacaoMatriculaAgente)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("registro_recuperacao_matricula_agente");
            entity.Property(e => e.RegistroRecuperacaoNomeAgente)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("registro_recuperacao_nome_agente");

            entity.HasOne(d => d.IdGrvDrfaNavigation).WithMany(p => p.TbDepGrvDrfaRegistroRecuperacaos)
                .HasForeignKey(d => d.IdGrvDrfa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_grv_drfa_registro_recuperacao1");
        });

        modelBuilder.Entity<TbDepGrvDrfaTipoRegistro>(entity =>
        {
            entity.HasKey(e => e.IdGrvDrfaTipoRegistro).HasName("pk_tb_dep_grv_drfa_tipo_registro");

            entity.ToTable("tb_dep_grv_drfa_tipo_registro");

            entity.HasIndex(e => e.Descricao, "idx_tb_dep_grv_drfa_tipo_registro1").IsUnique();

            entity.Property(e => e.IdGrvDrfaTipoRegistro)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_grv_drfa_tipo_registro");
            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("codigo");
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descricao");
        });

        modelBuilder.Entity<TbDepGrvEnquadramentoInfraco>(entity =>
        {
            entity.HasKey(e => e.IdGrvEnquadramentoInfracao).HasName("pk_tb_dep_grv_enquadramento_infracoes");

            entity.ToTable("tb_dep_grv_enquadramento_infracoes");

            entity.HasIndex(e => new { e.IdGrv, e.IdEnquadramentoInfracao }, "idx_tb_dep_grv_enquadramento_infracoes1").IsUnique();

            entity.HasIndex(e => e.IdGrv, "idx_tb_dep_grv_enquadramento_infracoes2");

            entity.HasIndex(e => e.IdEnquadramentoInfracao, "idx_tb_dep_grv_enquadramento_infracoes3");

            entity.Property(e => e.IdGrvEnquadramentoInfracao).HasColumnName("id_grv_enquadramento_infracao");
            entity.Property(e => e.IdEnquadramentoInfracao)
                .HasColumnType("numeric(4, 0)")
                .HasColumnName("id_enquadramento_infracao");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.NumeroInfracao)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("numero_infracao");

            entity.HasOne(d => d.IdEnquadramentoInfracaoNavigation).WithMany(p => p.TbDepGrvEnquadramentoInfracos)
                .HasForeignKey(d => d.IdEnquadramentoInfracao)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_grv_enquadramento_infracoes2");

            entity.HasOne(d => d.IdGrvNavigation).WithMany(p => p.TbDepGrvEnquadramentoInfracos)
                .HasForeignKey(d => d.IdGrv)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_grv_enquadramento_infracoes1");
        });

        modelBuilder.Entity<TbDepGrvFoto>(entity =>
        {
            entity.HasKey(e => e.IdFoto).HasName("pk_tb_dep_grv_fotos1");

            entity.ToTable("tb_dep_grv_fotos");

            entity.HasIndex(e => e.IdGrv, "idx_tb_dep_grv_fotos1");

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_grv_fotos2");

            entity.Property(e => e.IdFoto).HasColumnName("id_foto");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.Foto).HasColumnName("foto");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.TipoFoto)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo_foto");

            entity.HasOne(d => d.IdGrvNavigation).WithMany(p => p.TbDepGrvFotos)
                .HasForeignKey(d => d.IdGrv)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_grv_fotos1");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.TbDepGrvFotos)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .HasConstraintName("fk_tb_dep_grv_fotos2");
        });

        modelBuilder.Entity<TbDepGrvLacre>(entity =>
        {
            entity.HasKey(e => e.IdLacre).HasName("pk_tb_dep_grv_lacres1");

            entity.ToTable("tb_dep_grv_lacres", tb => tb.HasTrigger("tr_log_upd_grv_lacres"));

            entity.HasIndex(e => e.IdGrv, "idx_tb_dep_grv_lacres1");

            entity.HasIndex(e => e.Lacre, "idx_tb_dep_grv_lacres2");

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_grv_lacres3");

            entity.HasIndex(e => e.IdUsuarioAtualizacao, "idx_tb_dep_grv_lacres4");

            entity.Property(e => e.IdLacre).HasColumnName("id_lacre");
            entity.Property(e => e.DataAtualizacao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_atualizacao");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdLacreMotivoDesassociacao).HasColumnName("id_lacre_motivo_desassociacao");
            entity.Property(e => e.IdUsuarioAtualizacao).HasColumnName("id_usuario_atualizacao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.Lacre)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("lacre");
            entity.Property(e => e.LacreAnterior)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("lacre_anterior");

            entity.HasOne(d => d.IdGrvNavigation).WithMany(p => p.TbDepGrvLacres)
                .HasForeignKey(d => d.IdGrv)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_grv_lacres1");

            entity.HasOne(d => d.IdLacreMotivoDesassociacaoNavigation).WithMany(p => p.TbDepGrvLacres)
                .HasForeignKey(d => d.IdLacreMotivoDesassociacao)
                .HasConstraintName("fk_tb_dep_grv_lacres2");

            entity.HasOne(d => d.IdUsuarioAtualizacaoNavigation).WithMany(p => p.TbDepGrvLacreIdUsuarioAtualizacaoNavigations)
                .HasForeignKey(d => d.IdUsuarioAtualizacao)
                .HasConstraintName("fk_tb_dep_grv_lacres4");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.TbDepGrvLacreIdUsuarioCadastroNavigations)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .HasConstraintName("fk_tb_dep_grv_lacres3");
        });

        modelBuilder.Entity<TbDepGrvLacresMotivosDesassociacao>(entity =>
        {
            entity.HasKey(e => e.IdLacreMotivoDesassociacao).HasName("pk_tb_dep_grv_lacres_motivos_desassociacao");

            entity.ToTable("tb_dep_grv_lacres_motivos_desassociacao");

            entity.Property(e => e.IdLacreMotivoDesassociacao)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_lacre_motivo_desassociacao");
            entity.Property(e => e.Descricao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.FlagExigirNovoLacre)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_exigir_novo_lacre");
        });

        modelBuilder.Entity<TbDepGrvMotivoApreensao>(entity =>
        {
            entity.HasKey(e => e.IdMotivoApreensao).HasName("pk_tb_dep_grv_motivo_apreensao");

            entity.ToTable("tb_dep_grv_motivo_apreensao");

            entity.Property(e => e.IdMotivoApreensao)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_motivo_apreensao");
            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("codigo");
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.FlagDefault)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_default");
        });

        modelBuilder.Entity<TbDepGrvVistoriaArquivoLaudo>(entity =>
        {
            entity.HasKey(e => e.IdGrvVistoriaArquivoLaudo).HasName("pk_tb_dep_grv_vistoria_arquivo_laudo");

            entity.ToTable("tb_dep_grv_vistoria_arquivo_laudo");

            entity.HasIndex(e => e.IdGrvVistoria, "idx_tb_dep_grv_vistoria_arquivo_laudo1");

            entity.Property(e => e.IdGrvVistoriaArquivoLaudo).HasColumnName("id_grv_vistoria_arquivo_laudo");
            entity.Property(e => e.ArquivoLaudoVistoria)
                .IsRequired()
                .HasColumnName("arquivo_laudo_vistoria");
            entity.Property(e => e.IdGrvVistoria).HasColumnName("id_grv_vistoria");
            entity.Property(e => e.NomeArquivo)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("nome_arquivo");

            entity.HasOne(d => d.IdGrvVistoriaNavigation).WithMany(p => p.TbDepGrvVistoriaArquivoLaudos)
                .HasForeignKey(d => d.IdGrvVistoria)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_grv_vistoria_arquivo_laudo");
        });

        modelBuilder.Entity<TbDepGrvVistoriaSituacaoChassi>(entity =>
        {
            entity.HasKey(e => e.IdGrvVistoriaSituacaoChassi).HasName("pk_tb_dep_grv_vistoria_situacao_chassi");

            entity.ToTable("tb_dep_grv_vistoria_situacao_chassi");

            entity.Property(e => e.IdGrvVistoriaSituacaoChassi)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_grv_vistoria_situacao_chassi");
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("descricao");
        });

        modelBuilder.Entity<TbDepGrvVistoriaStatus>(entity =>
        {
            entity.HasKey(e => e.IdGrvVistoriaStatus).HasName("pk_tb_dep_grv_vistoria_status");

            entity.ToTable("tb_dep_grv_vistoria_status");

            entity.Property(e => e.IdGrvVistoriaStatus)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_grv_vistoria_status");
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("descricao");
        });

        modelBuilder.Entity<TbDepGrvVistorium>(entity =>
        {
            entity.HasKey(e => e.IdGrvVistoria).HasName("pk_tb_dep_grv_vistoria");

            entity.ToTable("tb_dep_grv_vistoria");

            entity.HasIndex(e => e.IdGrv, "idx_tb_dep_grv_vistoria1");

            entity.HasIndex(e => e.IdEmpresaVistoria, "idx_tb_dep_grv_vistoria2");

            entity.HasIndex(e => e.IdGrvVistoriaStatus, "idx_tb_dep_grv_vistoria3");

            entity.HasIndex(e => e.IdGrvVistoriaSituacaoChassi, "idx_tb_dep_grv_vistoria4");

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_grv_vistoria5");

            entity.HasIndex(e => e.IdUsuarioAlteracao, "idx_tb_dep_grv_vistoria6");

            entity.Property(e => e.IdGrvVistoria).HasColumnName("id_grv_vistoria");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataVistoria)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vistoria");
            entity.Property(e => e.EstadoGeralVeiculo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("B: BOM;\r\nE: EXCELENTE;\r\nP: PÉSSIMO;\r\nR: RUIM")
                .HasColumnName("estado_geral_veiculo");
            entity.Property(e => e.FlagPossuiPlaca)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_possui_placa");
            entity.Property(e => e.FlagPossuiRestricoes)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_possui_restricoes");
            entity.Property(e => e.FlagPossuiTravaEletrica)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_possui_trava_eletrica");
            entity.Property(e => e.FlagPossuiVidroEletrico)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_possui_vidro_eletrico");
            entity.Property(e => e.IdEmpresaVistoria)
                .HasComment("Faz referência à Tabela db_global.dbo.tb_glo_emp_empresas")
                .HasColumnName("id_empresa_vistoria");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdGrvVistoriaSituacaoChassi).HasColumnName("id_grv_vistoria_situacao_chassi");
            entity.Property(e => e.IdGrvVistoriaStatus).HasColumnName("id_grv_vistoria_status");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.MotivoNaoRealizacaoVistoria)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("motivo_nao_realizacao_vistoria");
            entity.Property(e => e.NomeVistoriador)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("nome_vistoriador");
            entity.Property(e => e.NumeroMotor)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("numero_motor");
            entity.Property(e => e.NumeroVistoria)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("numero_vistoria");
            entity.Property(e => e.ResumoVistoria)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("resumo_vistoria");
            entity.Property(e => e.TipoDirecao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("M: MANUAL;\r\nE: ELETRO HIDRÁULICA;\r\nH: HIDRÁULICA.")
                .HasColumnName("tipo_direcao");

            entity.HasOne(d => d.IdGrvNavigation).WithMany(p => p.TbDepGrvVistoria)
                .HasForeignKey(d => d.IdGrv)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_grv_vistoria1");

            entity.HasOne(d => d.IdGrvVistoriaSituacaoChassiNavigation).WithMany(p => p.TbDepGrvVistoria)
                .HasForeignKey(d => d.IdGrvVistoriaSituacaoChassi)
                .HasConstraintName("fk_tb_dep_grv_vistoria3");

            entity.HasOne(d => d.IdGrvVistoriaStatusNavigation).WithMany(p => p.TbDepGrvVistoria)
                .HasForeignKey(d => d.IdGrvVistoriaStatus)
                .HasConstraintName("fk_tb_dep_grv_vistoria2");

            entity.HasOne(d => d.IdUsuarioAlteracaoNavigation).WithMany(p => p.TbDepGrvVistoriumIdUsuarioAlteracaoNavigations)
                .HasForeignKey(d => d.IdUsuarioAlteracao)
                .HasConstraintName("fk_tb_dep_grv_vistoria5");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.TbDepGrvVistoriumIdUsuarioCadastroNavigations)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_grv_vistoria4");
        });

        modelBuilder.Entity<TbDepGtv>(entity =>
        {
            entity.HasKey(e => e.IdGtv).HasName("pk_tb_dep_gtv");

            entity.ToTable("tb_dep_gtv");

            entity.HasIndex(e => e.IdClienteEnvio, "idx_tb_dep_gtv1");

            entity.HasIndex(e => e.IdUsuarioAlteracao, "idx_tb_dep_gtv10");

            entity.HasIndex(e => e.IdClienteRecebimento, "idx_tb_dep_gtv2");

            entity.HasIndex(e => e.IdDepositoEnvio, "idx_tb_dep_gtv3");

            entity.HasIndex(e => e.IdDepositoRecebimento, "idx_tb_dep_gtv4");

            entity.HasIndex(e => e.IdReboquista, "idx_tb_dep_gtv5");

            entity.HasIndex(e => e.IdReboque, "idx_tb_dep_gtv6");

            entity.HasIndex(e => e.IdUsuarioSeparacaoVeiculos, "idx_tb_dep_gtv7");

            entity.HasIndex(e => e.IdUsuarioRecebimento, "idx_tb_dep_gtv8");

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_gtv9");

            entity.Property(e => e.IdGtv).HasColumnName("id_gtv");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataHoraPrevisaoSaida)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_hora_previsao_saida");
            entity.Property(e => e.DataHoraRecebimento)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_hora_recebimento");
            entity.Property(e => e.IdClienteEnvio).HasColumnName("id_cliente_envio");
            entity.Property(e => e.IdClienteRecebimento).HasColumnName("id_cliente_recebimento");
            entity.Property(e => e.IdDepositoEnvio).HasColumnName("id_deposito_envio");
            entity.Property(e => e.IdDepositoRecebimento).HasColumnName("id_deposito_recebimento");
            entity.Property(e => e.IdReboque).HasColumnName("id_reboque");
            entity.Property(e => e.IdReboquista).HasColumnName("id_reboquista");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.IdUsuarioRecebimento).HasColumnName("id_usuario_recebimento");
            entity.Property(e => e.IdUsuarioSeparacaoVeiculos).HasColumnName("id_usuario_separacao_veiculos");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("N = Novo (em cadastramento no Depósito de origem);\r\nE = Enviado para ser recebido pelo Depósito de destino;\r\nC = Cancelado pelo Depósito de origem. Se cancelar depois de Enviado o Sistema deverá obrigar a digitação de um Motivo;\r\nR = Recebido pelo Depósito de destino.")
                .HasColumnName("status");

            entity.HasOne(d => d.IdClienteEnvioNavigation).WithMany(p => p.TbDepGtvIdClienteEnvioNavigations)
                .HasForeignKey(d => d.IdClienteEnvio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_gtv1");

            entity.HasOne(d => d.IdClienteRecebimentoNavigation).WithMany(p => p.TbDepGtvIdClienteRecebimentoNavigations)
                .HasForeignKey(d => d.IdClienteRecebimento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_gtv2");

            entity.HasOne(d => d.IdDepositoEnvioNavigation).WithMany(p => p.TbDepGtvIdDepositoEnvioNavigations)
                .HasForeignKey(d => d.IdDepositoEnvio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_gtv3");

            entity.HasOne(d => d.IdDepositoRecebimentoNavigation).WithMany(p => p.TbDepGtvIdDepositoRecebimentoNavigations)
                .HasForeignKey(d => d.IdDepositoRecebimento)
                .HasConstraintName("fk_tb_dep_gtv4");

            entity.HasOne(d => d.IdReboqueNavigation).WithMany(p => p.TbDepGtvs)
                .HasForeignKey(d => d.IdReboque)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_gtv6");

            entity.HasOne(d => d.IdReboquistaNavigation).WithMany(p => p.TbDepGtvs)
                .HasForeignKey(d => d.IdReboquista)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_gtv5");

            entity.HasOne(d => d.IdUsuarioAlteracaoNavigation).WithMany(p => p.TbDepGtvIdUsuarioAlteracaoNavigations)
                .HasForeignKey(d => d.IdUsuarioAlteracao)
                .HasConstraintName("fk_tb_dep_gtv10");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.TbDepGtvIdUsuarioCadastroNavigations)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_gtv7");

            entity.HasOne(d => d.IdUsuarioSeparacaoVeiculosNavigation).WithMany(p => p.TbDepGtvIdUsuarioSeparacaoVeiculosNavigations)
                .HasForeignKey(d => d.IdUsuarioSeparacaoVeiculos)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_gtv9");
        });

        modelBuilder.Entity<TbDepGtvGrv>(entity =>
        {
            entity.HasKey(e => e.IdGtvGrv).HasName("pk_tb_dep_gtv_grv");

            entity.ToTable("tb_dep_gtv_grv");

            entity.HasIndex(e => e.IdGtv, "idx_tb_dep_gtv_grv1");

            entity.HasIndex(e => e.IdGrv, "idx_tb_dep_gtv_grv2");

            entity.Property(e => e.IdGtvGrv).HasColumnName("id_gtv_grv");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdGtv).HasColumnName("id_gtv");

            entity.HasOne(d => d.IdGrvNavigation).WithMany(p => p.TbDepGtvGrvs)
                .HasForeignKey(d => d.IdGrv)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_gtv_grv2");

            entity.HasOne(d => d.IdGtvNavigation).WithMany(p => p.TbDepGtvGrvs)
                .HasForeignKey(d => d.IdGtv)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_gtv_grv1");
        });

        modelBuilder.Entity<TbDepGtvGrvAvariasRelatada>(entity =>
        {
            entity.HasKey(e => e.IdGtvGrvAvariaRelatada).HasName("pk_tb_dep_gtv_grv_avarias_relatadas");

            entity.ToTable("tb_dep_gtv_grv_avarias_relatadas");

            entity.HasIndex(e => e.IdGtvGrv, "idx_tb_dep_gtv_grv_avarias_relatadas1");

            entity.Property(e => e.IdGtvGrvAvariaRelatada).HasColumnName("id_gtv_grv_avaria_relatada");
            entity.Property(e => e.IdGtvGrv).HasColumnName("id_gtv_grv");
            entity.Property(e => e.RelatoAvaria)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("relato_avaria");

            entity.HasOne(d => d.IdGtvGrvNavigation).WithMany(p => p.TbDepGtvGrvAvariasRelatada)
                .HasForeignKey(d => d.IdGtvGrv)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_gtv_grv_avarias_relatadas1");
        });

        modelBuilder.Entity<TbDepGtvMotivosCancelamento>(entity =>
        {
            entity.HasKey(e => e.IdGtvMotivo).HasName("pk_tb_dep_gtv_motivos_cancelamento");

            entity.ToTable("tb_dep_gtv_motivos_cancelamento");

            entity.HasIndex(e => e.IdGtv, "idx_tb_dep_gtv_motivos_cancelamento1").IsUnique();

            entity.Property(e => e.IdGtvMotivo).HasColumnName("id_gtv_motivo");
            entity.Property(e => e.IdGtv).HasColumnName("id_gtv");
            entity.Property(e => e.Motivo)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("motivo");

            entity.HasOne(d => d.IdGtvNavigation).WithOne(p => p.TbDepGtvMotivosCancelamento)
                .HasForeignKey<TbDepGtvMotivosCancelamento>(d => d.IdGtv)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_gtv_motivos_cancelamento1");
        });

        modelBuilder.Entity<TbDepLeilaoUsuario>(entity =>
        {
            entity.HasKey(e => e.IdLeilaoUsuario).HasName("pk_tb_dep_leilao_usuarios");

            entity.ToTable("tb_dep_leilao_usuarios");

            entity.HasIndex(e => e.Login, "idx_tb_dep_leilao_usuarios1").IsUnique();

            entity.HasIndex(e => e.Email, "idx_tb_dep_leilao_usuarios2").IsUnique();

            entity.Property(e => e.IdLeilaoUsuario).HasColumnName("id_leilao_usuario");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataDesativacao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_desativacao");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.Login)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("login");
            entity.Property(e => e.Senha)
                .IsRequired()
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasDefaultValueSql("(hashbytes('MD5','NONE'))")
                .HasColumnName("senha");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasColumnName("status");
        });

        modelBuilder.Entity<TbDepLiberacao>(entity =>
        {
            entity.HasKey(e => e.IdLiberacao).HasName("pk_tb_dep_liberacao");

            entity.ToTable("tb_dep_liberacao");

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_liberacao1");

            entity.Property(e => e.IdLiberacao).HasColumnName("id_liberacao");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.IdLiberacaoTipo).HasColumnName("id_liberacao_tipo");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");

            entity.HasOne(d => d.IdLiberacaoTipoNavigation).WithMany(p => p.TbDepLiberacaos)
                .HasForeignKey(d => d.IdLiberacaoTipo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_liberacao1");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.TbDepLiberacaos)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_liberacao2");
        });

        modelBuilder.Entity<TbDepLiberacaoEspecial>(entity =>
        {
            entity.HasKey(e => e.IdLiberacaoEspecial).HasName("pk_tb_dep_liberacao_especial");

            entity.ToTable("tb_dep_liberacao_especial", tb => tb.HasTrigger("tr_log_upd_liberacao_especial"));

            entity.HasIndex(e => e.IdGrv, "idx_tb_dep_liberacao_especial1").IsUnique();

            entity.HasIndex(e => e.IdFaturamento, "idx_tb_dep_liberacao_especial2");

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_liberacao_especial4");

            entity.Property(e => e.IdLiberacaoEspecial).HasColumnName("id_liberacao_especial");
            entity.Property(e => e.DataEmissaoDocumento)
                .HasColumnType("date")
                .HasColumnName("data_emissao_documento");
            entity.Property(e => e.DataLiberacao)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_liberacao");
            entity.Property(e => e.IdFaturamento).HasColumnName("id_faturamento");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdLiberacaoEspecialTipo).HasColumnName("id_liberacao_especial_tipo");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.NumeroDocumento)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("numero_documento");
            entity.Property(e => e.NumeroProcesso)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("numero_processo");
            entity.Property(e => e.OrgaoEmissor)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("orgao_emissor");
            entity.Property(e => e.PortadorCargo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("portador_cargo");
            entity.Property(e => e.PortadorMatricula)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("portador_matricula");
            entity.Property(e => e.PortadorNome)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("portador_nome");
            entity.Property(e => e.SignatarioMatricula)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("signatario_matricula");
            entity.Property(e => e.SignatarioNomeDocumento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("signatario_nome_documento");
            entity.Property(e => e.SignatarioTitulo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("signatario_titulo");
            entity.Property(e => e.TipoDocumento)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tipo_documento");

            entity.HasOne(d => d.IdFaturamentoNavigation).WithMany(p => p.TbDepLiberacaoEspecials)
                .HasForeignKey(d => d.IdFaturamento)
                .HasConstraintName("fk_tb_dep_liberacao_especial2");

            entity.HasOne(d => d.IdGrvNavigation).WithOne(p => p.TbDepLiberacaoEspecial)
                .HasForeignKey<TbDepLiberacaoEspecial>(d => d.IdGrv)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_liberacao_especial1");

            entity.HasOne(d => d.IdLiberacaoEspecialTipoNavigation).WithMany(p => p.TbDepLiberacaoEspecials)
                .HasForeignKey(d => d.IdLiberacaoEspecialTipo)
                .HasConstraintName("fk_tb_dep_liberacao_especial3");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.TbDepLiberacaoEspecials)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_liberacao_especial4");
        });

        modelBuilder.Entity<TbDepLiberacaoEspecialTipo>(entity =>
        {
            entity.HasKey(e => e.IdLiberacaoEspecialTipo).HasName("pk_tb_dep_liberacao_especial_tipo");

            entity.ToTable("tb_dep_liberacao_especial_tipo");

            entity.Property(e => e.IdLiberacaoEspecialTipo)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_liberacao_especial_tipo");
            entity.Property(e => e.Descricao)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("descricao");
        });

        modelBuilder.Entity<TbDepLiberacaoLeilao>(entity =>
        {
            entity.HasKey(e => e.IdLiberacaoLeilao).HasName("pk_tb_dep_liberacao_leilao");

            entity.ToTable("tb_dep_liberacao_leilao");

            entity.HasIndex(e => e.IdGrv, "idx_tb_dep_liberacao_leilao1").IsUnique();

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_liberacao_leilao2");

            entity.Property(e => e.IdLiberacaoLeilao).HasColumnName("id_liberacao_leilao");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdStatusOperacaoLeilao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('1')")
                .IsFixedLength()
                .HasColumnName("id_status_operacao_leilao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");

            entity.HasOne(d => d.IdGrvNavigation).WithOne(p => p.TbDepLiberacaoLeilao)
                .HasForeignKey<TbDepLiberacaoLeilao>(d => d.IdGrv)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_liberacao_leilao1");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.TbDepLiberacaoLeilaos)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_liberacao_leilao2");
        });

        modelBuilder.Entity<TbDepLiberacaoLeilaoHistorico>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tb_dep_liberacao_leilao_historico");

            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdLiberacaoLeilao).HasColumnName("id_liberacao_leilao");
            entity.Property(e => e.IdStatusOperacaoLeilao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_status_operacao_leilao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
        });

        modelBuilder.Entity<TbDepLiberacaoTipo>(entity =>
        {
            entity.HasKey(e => e.IdLiberacaoTipo).HasName("pk_tb_dep_liberacao_tipo");

            entity.ToTable("tb_dep_liberacao_tipo");

            entity.Property(e => e.IdLiberacaoTipo)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_liberacao_tipo");
            entity.Property(e => e.Descricao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("descricao");
        });

        modelBuilder.Entity<TbDepLiberacaoVeiculoOrgao>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tb_dep_liberacao_veiculo_orgaos");

            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdLiberacaoVeiculoOrgao)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_liberacao_veiculo_orgao");
            entity.Property(e => e.JsonEnvio)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("jsonEnvio");
            entity.Property(e => e.JsonRetorno)
                .IsRequired()
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("jsonRetorno");
            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status");
        });

        modelBuilder.Entity<TbDepLiberese>(entity =>
        {
            entity.HasKey(e => e.IdLiberese);

            entity.ToTable("tb_dep_liberese", tb => tb.HasTrigger("tr_log_upd_liberese"));

            entity.Property(e => e.IdLiberese).HasColumnName("id_liberese");
            entity.Property(e => e.AgenteTransito)
                .HasMaxLength(150)
                .IsFixedLength()
                .HasColumnName("agente_transito");
            entity.Property(e => e.Categoria)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("categoria");
            entity.Property(e => e.Condutor)
                .HasMaxLength(150)
                .IsFixedLength()
                .HasColumnName("condutor");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("date")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataDocumento)
                .HasColumnType("date")
                .HasColumnName("data_documento");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.NomeDiretorPresidente)
                .HasMaxLength(150)
                .IsFixedLength()
                .HasColumnName("nome_diretor_presidente");
            entity.Property(e => e.NomeFiscalTransporte)
                .HasMaxLength(150)
                .IsFixedLength()
                .HasColumnName("nome_fiscal_transporte");
            entity.Property(e => e.NomeProprietario)
                .HasMaxLength(150)
                .IsFixedLength()
                .HasColumnName("nome_proprietario");
            entity.Property(e => e.Observacao)
                .HasMaxLength(200)
                .IsFixedLength()
                .HasColumnName("observacao");
            entity.Property(e => e.ProcuradorCompradorSocio)
                .HasMaxLength(150)
                .IsFixedLength()
                .HasColumnName("procurador_comprador_socio");
            entity.Property(e => e.ProprietarioDocumento)
                .HasMaxLength(14)
                .IsFixedLength()
                .HasColumnName("proprietario_documento");
            entity.Property(e => e.ProprietarioRg)
                .HasMaxLength(11)
                .IsFixedLength()
                .HasColumnName("proprietario_rg");
            entity.Property(e => e.RegistroCnh)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("registro_cnh");
        });

        modelBuilder.Entity<TbDepLibereseCargoUsuario>(entity =>
        {
            entity.HasKey(e => e.IdLibereseCargo).HasName("PK_tb_dep_liberese_cargo");

            entity.ToTable("tb_dep_liberese_cargo_usuario");

            entity.Property(e => e.IdLibereseCargo).HasColumnName("id_liberese_cargo");
            entity.Property(e => e.Cargo)
                .IsRequired()
                .HasMaxLength(60)
                .IsFixedLength()
                .HasColumnName("cargo");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("date")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.Nome)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("nome");
        });

        modelBuilder.Entity<TbDepLibereseLayout>(entity =>
        {
            entity.HasKey(e => e.IdLibereseLayout);

            entity.ToTable("tb_dep_liberese_layout");

            entity.Property(e => e.IdLibereseLayout).HasColumnName("id_liberese_layout");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.Imagem).HasColumnName("imagem");
            entity.Property(e => e.Ordem).HasColumnName("ordem");
            entity.Property(e => e.Texto)
                .HasMaxLength(80)
                .IsFixedLength()
                .HasColumnName("texto");
        });

        modelBuilder.Entity<TbDepLogSuporte>(entity =>
        {
            entity.HasKey(e => e.IdSuporte);

            entity.ToTable("tb_dep_log_suporte");

            entity.Property(e => e.IdSuporte).HasColumnName("id_suporte");
            entity.Property(e => e.DataAcesso)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_acesso");
            entity.Property(e => e.IdAtendimento).HasColumnName("id_atendimento");
            entity.Property(e => e.IdFaturamento).HasColumnName("id_faturamento");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.Ip)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("ip");
            entity.Property(e => e.Tipo)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("tipo");
        });

        modelBuilder.Entity<TbDepMarcasModelo>(entity =>
        {
            entity.HasKey(e => e.IdMarcaModelo).HasName("pk_tb_dep_marcas_modelos1");

            entity.ToTable("tb_dep_marcas_modelos");

            entity.HasIndex(e => e.IdMarcaModelo, "idx_tb_dep_marcas_modelos1");

            entity.HasIndex(e => e.Descricao, "idx_tb_dep_marcas_modelos2").IsUnique();

            entity.HasIndex(e => e.IdUsuario, "idx_tb_dep_marcas_modelos3");

            entity.Property(e => e.IdMarcaModelo).HasColumnName("id_marca_modelo");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasColumnName("status");

            entity.HasOne(d => d.IdUsuarioNavigation).WithMany(p => p.TbDepMarcasModelos)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_marcas_modelos1");
        });

        modelBuilder.Entity<TbDepMetasClienteDeposito>(entity =>
        {
            entity.HasKey(e => e.IdMetaClienteDeposito);

            entity.ToTable("tb_dep_metas_cliente_deposito");

            entity.Property(e => e.IdMetaClienteDeposito)
                .ValueGeneratedNever()
                .HasColumnName("id_meta_cliente_deposito");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("datetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDepMetasGrupo).HasColumnName("id_dep_metas_grupo");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.MesCusto)
                .HasColumnType("money")
                .HasColumnName("mes_custo");
            entity.Property(e => e.MesMeta)
                .HasColumnType("datetime")
                .HasColumnName("mes_meta");
            entity.Property(e => e.MesRef)
                .HasColumnType("datetime")
                .HasColumnName("mes_ref");
        });

        modelBuilder.Entity<TbDepMetasClienteDepositoRealizado>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tb_dep_metas_cliente_deposito_realizado");

            entity.Property(e => e.AtingiuMeta)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("atingiu_meta");
            entity.Property(e => e.AtingiuPe)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("atingiu_pe");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("datetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.IdDepMetasClienteDepositoRealizado).HasColumnName("id_dep_metas_cliente_deposito_realizado");
            entity.Property(e => e.IdMetaClienteDeposito).HasColumnName("id_meta_cliente_deposito");
            entity.Property(e => e.MesMetaRealizada)
                .HasColumnType("money")
                .HasColumnName("mes_meta_realizada");
        });

        modelBuilder.Entity<TbDepMetasGrupo>(entity =>
        {
            entity.HasKey(e => e.IdDepMetasGrupo);

            entity.ToTable("tb_dep_metas_grupo");

            entity.Property(e => e.IdDepMetasGrupo)
                .ValueGeneratedNever()
                .HasColumnName("id_dep_metas_grupo");
            entity.Property(e => e.Ativado)
                .IsRequired()
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("ativado");
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(80)
                .IsFixedLength()
                .HasColumnName("descricao");
        });

        modelBuilder.Entity<TbDepMetasGrupoUsuario>(entity =>
        {
            entity.HasKey(e => e.IdDepMetasGrupoUsuarios).HasName("PK_DEP_METAS_GRUPO");

            entity.ToTable("tb_dep_metas_grupo_usuarios");

            entity.HasIndex(e => e.IdDepMetasGrupoUsuarios, "IX_tb_dep_metas_grupo_usuarios").IsUnique();

            entity.Property(e => e.IdDepMetasGrupoUsuarios)
                .ValueGeneratedNever()
                .HasColumnName("id_dep_metas_grupo_usuarios");
            entity.Property(e => e.IdDepMetasGrupo)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_dep_metas_grupo");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
        });

        modelBuilder.Entity<TbDepNfe>(entity =>
        {
            entity.HasKey(e => e.NfeId);

            entity.ToTable("tb_dep_nfe", tb =>
                {
                    tb.HasTrigger("tr_log_del_nfe");
                    tb.HasTrigger("tr_log_upd_nfe");
                });

            entity.HasIndex(e => e.GrvId, "IDX_tb_dep_nfe1");

            entity.HasIndex(e => e.NfeComplementarId, "IDX_tb_dep_nfe2");

            entity.HasIndex(e => e.UsuarioCadastroId, "IDX_tb_dep_nfe3");

            entity.HasIndex(e => e.IdentificadorNota, "IDX_tb_dep_nfe4");

            entity.HasIndex(e => e.Status, "IDX_tb_dep_nfe5");

            entity.Property(e => e.CaminhoXmlNotaFiscal)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Cnpj)
                .IsRequired()
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.CodigoVerificacao)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DataAlteracao).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.DataEmissao).HasColumnType("datetime");
            entity.Property(e => e.Numero)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NumeroNotaFiscal)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NumeroRps)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Referencia)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SerieRps)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('C')")
                .IsFixedLength()
                .HasComment("C: Cadastro;\r\nA: Aguardando Processamento (envio da solicitação com sucesso, para a Prefeitura);\r\nP: Processado (download da Nfe e atualização da Nfe no Sistema concluídos com sucesso);\r\nE: Erro (quando a Prefeitura indicou algum problema);\r\nR: Reprocessar (marcação manual para o envio de uma nova solicitação de Nfe para o mesmo GRV, esta opção gera um novo registro de Nfe);\r\nS: ReproceSsado (conclusão do reprocessamento);\r\nI: Inválido;\r\nN: CaNcelado;\r\nM: Cadastro Manual.");
            entity.Property(e => e.StatusNfe)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Url)
                .HasMaxLength(500)
                .IsUnicode(false);

            entity.HasOne(d => d.Grv).WithMany(p => p.TbDepNves)
                .HasForeignKey(d => d.GrvId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tb_dep_nfe1");

            entity.HasOne(d => d.NfeComplementar).WithMany(p => p.InverseNfeComplementar)
                .HasForeignKey(d => d.NfeComplementarId)
                .HasConstraintName("FK_tb_dep_nfe2");

            entity.HasOne(d => d.StatusNavigation).WithMany(p => p.TbDepNves)
                .HasForeignKey(d => d.Status)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tb_dep_nfe4");

            entity.HasOne(d => d.UsuarioCadastro).WithMany(p => p.TbDepNves)
                .HasForeignKey(d => d.UsuarioCadastroId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tb_dep_nfe3");
        });

        modelBuilder.Entity<TbDepNfeConfiguracaoImagem>(entity =>
        {
            entity.HasKey(e => e.ConfiguracaoImagemId).HasName("pk_tb_dep_nfe_configuracao_imagem");

            entity.ToTable("tb_dep_nfe_configuracao_imagem");

            entity.HasIndex(e => e.ClienteDepositoId, "idx_tb_dep_nfe_configuracao_imagem1");

            entity.HasIndex(e => e.UsuarioCadastroId, "idx_tb_dep_nfe_configuracao_imagem2");

            entity.HasIndex(e => e.UsuarioAlteracaoId, "idx_tb_dep_nfe_configuracao_imagem3");

            entity.Property(e => e.DataAlteracao).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");

            entity.HasOne(d => d.ClienteDeposito).WithMany(p => p.TbDepNfeConfiguracaoImagems)
                .HasForeignKey(d => d.ClienteDepositoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_nfe_configuracao_imagem1");

            entity.HasOne(d => d.UsuarioAlteracao).WithMany(p => p.TbDepNfeConfiguracaoImagemUsuarioAlteracaos)
                .HasForeignKey(d => d.UsuarioAlteracaoId)
                .HasConstraintName("fk_tb_dep_nfe_configuracao_imagem3");

            entity.HasOne(d => d.UsuarioCadastro).WithMany(p => p.TbDepNfeConfiguracaoImagemUsuarioCadastros)
                .HasForeignKey(d => d.UsuarioCadastroId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_nfe_configuracao_imagem2");
        });

        modelBuilder.Entity<TbDepNfeConfiguraco>(entity =>
        {
            entity.HasKey(e => e.ConfiguracaoId).HasName("pk_tb_nfse_configuracoes");

            entity.ToTable("tb_dep_nfe_configuracoes");

            entity.Property(e => e.ConfiguracaoId).ValueGeneratedOnAdd();
            entity.Property(e => e.Server)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TbDepNfeFaturamentoComposicao>(entity =>
        {
            entity.HasKey(e => e.NfeFaturamentoComposicaoId);

            entity.ToTable("tb_dep_nfe_faturamento_composicao");

            entity.HasIndex(e => new { e.NfeId, e.FaturamentoComposicaoId }, "IDX_tb_dep_nfe_faturamento_composicao1").IsUnique();

            entity.Property(e => e.StatusCadastroErp)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('P')")
                .IsFixedLength()
                .HasComment("P = PENDENTE DE CADASTRO;\r\nF = CADASTRADO FINALIZADO;\r\nE = ERRO NO CADASTRO.");

            entity.HasOne(d => d.FaturamentoComposicao).WithMany(p => p.TbDepNfeFaturamentoComposicaos)
                .HasForeignKey(d => d.FaturamentoComposicaoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tb_dep_nfe_faturamento_composicao2");

            entity.HasOne(d => d.Nfe).WithMany(p => p.TbDepNfeFaturamentoComposicaos)
                .HasForeignKey(d => d.NfeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tb_dep_nfe_faturamento_composicao1");
        });

        modelBuilder.Entity<TbDepNfeImagen>(entity =>
        {
            entity.HasKey(e => e.NfeImagemId).HasName("pk_tb_dep_nfe_imagens");

            entity.ToTable("tb_dep_nfe_imagens");

            entity.HasIndex(e => e.NfeId, "idx_tb_dep_nfe_imagens1");

            entity.Property(e => e.NfeImagemId).HasColumnName("NfeImagemID");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.NfeId).HasColumnName("NfeID");

            entity.HasOne(d => d.Nfe).WithMany(p => p.TbDepNfeImagens)
                .HasForeignKey(d => d.NfeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_nfe_imagens1");
        });

        modelBuilder.Entity<TbDepNfeMensagen>(entity =>
        {
            entity.HasKey(e => e.NfeMensagemId).HasName("pk_tb_dep_nfe_mensagens");

            entity.ToTable("tb_dep_nfe_mensagens");

            entity.HasIndex(e => e.NfeId, "idx_tb_dep_nfe_mensagens1");

            entity.Property(e => e.NfeMensagemId).HasColumnName("NfeMensagemID");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.Mensagem)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.NfeId).HasColumnName("NfeID");
            entity.Property(e => e.Tipo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('E')")
                .IsFixedLength()
                .HasComment("E: Envio;\r\nR: Reenvio.");

            entity.HasOne(d => d.Nfe).WithMany(p => p.TbDepNfeMensagens)
                .HasForeignKey(d => d.NfeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_nfe_mensagens1");
        });

        modelBuilder.Entity<TbDepNfeNotaFiscal>(entity =>
        {
            entity.HasKey(e => e.NotaFiscalId);

            entity.ToTable("tb_dep_nfe_nota_fiscal");

            entity.HasIndex(e => e.NfeId, "IDX_tb_dep_nfe_nota_fiscal1");

            entity.HasIndex(e => e.NfeId, "IDX_tb_dep_nfe_nota_fiscal2");

            entity.Property(e => e.CaminhoXmlNotaFiscal)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.CodigoVerificacao)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.DataEmissao).HasColumnType("smalldatetime");
            entity.Property(e => e.NumeroNotaFiscal)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UrlNotaFiscal)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);

            entity.HasOne(d => d.Nfe).WithMany(p => p.TbDepNfeNotaFiscals)
                .HasForeignKey(d => d.NfeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tb_dep_nfe_nota_fiscal1");

            entity.HasOne(d => d.Usuario).WithMany(p => p.TbDepNfeNotaFiscals)
                .HasForeignKey(d => d.UsuarioId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tb_dep_nfe_nota_fiscal2");
        });

        modelBuilder.Entity<TbDepNfePrestadorAvulso>(entity =>
        {
            entity.HasKey(e => e.NfePrestadorAvulsoId);

            entity.ToTable("tb_dep_nfe_prestador_avulso");

            entity.HasIndex(e => e.Cnpj, "IDX_tb_dep_nfe_prestador_avulso1");

            entity.Property(e => e.Cnpj)
                .IsRequired()
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.Nome)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Token)
                .HasMaxLength(32)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TbDepNfeRegra>(entity =>
        {
            entity.HasKey(e => e.NfeRegraId);

            entity.ToTable("tb_dep_nfe_regras");

            entity.HasIndex(e => e.NfeRegraTipoId, "IDX_tb_dep_nfe_regras1");

            entity.HasIndex(e => e.ClienteDepositoId, "IDX_tb_dep_nfe_regras2");

            entity.HasIndex(e => e.UsuarioCadastroId, "IDX_tb_dep_nfe_regras3");

            entity.HasIndex(e => e.UsuarioAlteracaoId, "IDX_tb_dep_nfe_regras4");

            entity.Property(e => e.Ativo)
                .IsRequired()
                .HasDefaultValueSql("('1')");
            entity.Property(e => e.DataAlteracao).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.Valor)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.ClienteDeposito).WithMany(p => p.TbDepNfeRegras)
                .HasForeignKey(d => d.ClienteDepositoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tb_dep_nfe_regras2");

            entity.HasOne(d => d.NfeRegraTipo).WithMany(p => p.TbDepNfeRegras)
                .HasForeignKey(d => d.NfeRegraTipoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tb_dep_nfe_regras1");

            entity.HasOne(d => d.UsuarioAlteracao).WithMany(p => p.TbDepNfeRegraUsuarioAlteracaos)
                .HasForeignKey(d => d.UsuarioAlteracaoId)
                .HasConstraintName("FK_tb_dep_nfe_regras5");

            entity.HasOne(d => d.UsuarioCadastro).WithMany(p => p.TbDepNfeRegraUsuarioCadastros)
                .HasForeignKey(d => d.UsuarioCadastroId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tb_dep_nfe_regras4");
        });

        modelBuilder.Entity<TbDepNfeRegrasTipo>(entity =>
        {
            entity.HasKey(e => e.NfeRegraTipoId);

            entity.ToTable("tb_dep_nfe_regras_tipos");

            entity.Property(e => e.Ativo)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PossuiValor)
                .IsRequired()
                .HasDefaultValueSql("((1))");
        });

        modelBuilder.Entity<TbDepNfeRetornoSolicitacao>(entity =>
        {
            entity.HasKey(e => e.RetornoSolicitacaoId);

            entity.ToTable("tb_dep_nfe_retorno_solicitacao");

            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.DataEmissao).HasColumnType("smalldatetime");
            entity.Property(e => e.Json)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.NaturezaOperacao)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OptanteSimplesNacional)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.RespostaEnvio)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ServicoAliquota)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ServicoCodigoCnae)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.ServicoCodigoTributarioMunicipio)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ServicoDiscriminacao)
                .HasMaxLength(400)
                .IsUnicode(false);
            entity.Property(e => e.ServicoIssRetido)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ServicoItemListaServico)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ServicoValorIss)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ServicoValorServicos)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TomadorCnpj)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.TomadorCpfCnpj)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.TomadorEmail)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.TomadorEnderecoBairro)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.TomadorEnderecoCep)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.TomadorEnderecoCodigoMunicipio)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.TomadorEnderecoComplemento)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.TomadorEnderecoLogradouro)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TomadorEnderecoNumero)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TomadorEnderecoUf)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.TomadorNomeRazaoSocial)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TomadorTelefone)
                .HasMaxLength(11)
                .IsUnicode(false);

            entity.HasOne(d => d.Nfe).WithMany(p => p.TbDepNfeRetornoSolicitacaos)
                .HasForeignKey(d => d.NfeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tb_dep_nfe_retorno_solicitacao1");
        });

        modelBuilder.Entity<TbDepNfeStatusDescricao>(entity =>
        {
            entity.HasKey(e => e.Status);

            entity.ToTable("tb_dep_nfe_status_descricao");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Explicacao)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TbDepNfeWsErro>(entity =>
        {
            entity.HasKey(e => e.ErroId);

            entity.ToTable("tb_dep_nfe_ws_erros");

            entity.HasIndex(e => e.IdentificadorNota, "IDX_tb_dep_nfe_ws_erros1");

            entity.HasIndex(e => e.IdentificadorNota, "IDX_tb_dep_nfe_ws_erros2");

            entity.HasIndex(e => e.UsuarioId, "IDX_tb_dep_nfe_ws_erros3");

            entity.Property(e => e.Acao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CodigoErro)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CorrecaoErro)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.DataHoraCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.MensagemErro)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.OrigemErro)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.HasOne(d => d.Grv).WithMany(p => p.TbDepNfeWsErros)
                .HasForeignKey(d => d.GrvId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tb_dep_nfe_ws_erros1");

            entity.HasOne(d => d.Usuario).WithMany(p => p.TbDepNfeWsErros)
                .HasForeignKey(d => d.UsuarioId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tb_dep_nfe_ws_erros2");
        });

        modelBuilder.Entity<TbDepOrgaoExecutivoTransito>(entity =>
        {
            entity.HasKey(e => e.IdOrgaoExecutivoTransito).HasName("pk_tb_dep_orgao_executivo_transito");

            entity.ToTable("tb_dep_orgao_executivo_transito");

            entity.Property(e => e.IdOrgaoExecutivoTransito).HasColumnName("id_orgao_executivo_transito");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.Descricao)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.Uf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("uf");
        });

        modelBuilder.Entity<TbDepPix>(entity =>
        {
            entity.HasKey(e => e.PixId);

            entity.ToTable("tb_dep_pix");

            entity.HasIndex(e => e.FaturamentoId, "IDX_tb_dep_pix1");

            entity.Property(e => e.Chave)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.InfoAdicionais)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MerchantCity)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MerchantName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Qrcode)
                .HasColumnType("text")
                .HasColumnName("QRCode");
            entity.Property(e => e.Qrstring)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("QRString");
            entity.Property(e => e.SolicitacaoPagador)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Valor).HasColumnType("smallmoney");

            entity.HasOne(d => d.Faturamento).WithMany(p => p.TbDepPixes)
                .HasForeignKey(d => d.FaturamentoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tb_dep_pix1");
        });

        modelBuilder.Entity<TbDepPixDinamico>(entity =>
        {
            entity.HasKey(e => e.PixDinamicoId);

            entity.ToTable("tb_dep_pix_dinamico");

            entity.HasIndex(e => e.FaturamentoId, "IDX_tb_dep_pix_dinamico1");

            entity.HasIndex(e => e.PixDinamicoTipoStatusGeracaoId, "IDX_tb_dep_pix_dinamico2");

            entity.Property(e => e.CalendarioCriacao).HasColumnType("datetime");
            entity.Property(e => e.Chave)
                .HasMaxLength(36)
                .IsUnicode(false);
            entity.Property(e => e.DataAlteracao).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.Devedor)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.InfoAdicionais)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Json)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.Location)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PagadorCnpj)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.PagadorCpf)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.PagadorNome)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Pix)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PixHorario).HasColumnType("datetime");
            entity.Property(e => e.QrCode).HasColumnType("text");
            entity.Property(e => e.QrString).HasColumnType("text");
            entity.Property(e => e.SolicitacaoPagador)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TipoCobranca)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TxId)
                .IsRequired()
                .HasMaxLength(32)
                .IsUnicode(false);
            entity.Property(e => e.ValorOriginal).HasColumnType("smallmoney");

            entity.HasOne(d => d.Faturamento).WithMany(p => p.TbDepPixDinamicos)
                .HasForeignKey(d => d.FaturamentoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tb_dep_pix_dinamico1");

            entity.HasOne(d => d.PixDinamicoTipoStatusGeracao).WithMany(p => p.TbDepPixDinamicos)
                .HasForeignKey(d => d.PixDinamicoTipoStatusGeracaoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tb_dep_pix_dinamico2");
        });

        modelBuilder.Entity<TbDepPixDinamicoConfiguracao>(entity =>
        {
            entity.HasKey(e => e.PixDinamicoConfiguracaoId);

            entity.ToTable("tb_dep_pix_dinamico_configuracao");

            entity.HasIndex(e => e.ClienteId, "IDX_tb_dep_pix_dinamico_configuracao1");

            entity.HasIndex(e => e.UsuarioCadastroId, "IDX_tb_dep_pix_dinamico_configuracao2");

            entity.HasIndex(e => e.UsuarioAlteracaoId, "IDX_tb_dep_pix_dinamico_configuracao3");

            entity.Property(e => e.PixDinamicoConfiguracaoId).ValueGeneratedOnAdd();
            entity.Property(e => e.BaseUrl)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Certificate).HasColumnType("text");
            entity.Property(e => e.ClientId)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ClientSecret)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DataAlteracao).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.PixChave)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SenhaCertificado)
                .HasMaxLength(32)
                .IsUnicode(false);

            entity.HasOne(d => d.Cliente).WithMany(p => p.TbDepPixDinamicoConfiguracaos)
                .HasForeignKey(d => d.ClienteId)
                .HasConstraintName("FK_dep_pix_dinamico_configuracao1");

            entity.HasOne(d => d.UsuarioAlteracao).WithMany(p => p.TbDepPixDinamicoConfiguracaoUsuarioAlteracaos)
                .HasForeignKey(d => d.UsuarioAlteracaoId)
                .HasConstraintName("FK_dep_pix_dinamico_configuracao3");

            entity.HasOne(d => d.UsuarioCadastro).WithMany(p => p.TbDepPixDinamicoConfiguracaoUsuarioCadastros)
                .HasForeignKey(d => d.UsuarioCadastroId)
                .HasConstraintName("FK_dep_pix_dinamico_configuracao2");
        });

        modelBuilder.Entity<TbDepPixDinamicoConsultum>(entity =>
        {
            entity.HasKey(e => e.PixDinamicoConsultaId);

            entity.ToTable("tb_dep_pix_dinamico_consulta");

            entity.HasIndex(e => e.PixDinamicoId, "IDX_tb_dep_pix_dinamico_consulta1");

            entity.HasIndex(e => e.PixDinamicoTipoStatusGeracaoId, "IDX_tb_dep_pix_dinamico_consulta2");

            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.Json)
                .IsRequired()
                .HasColumnType("text");

            entity.HasOne(d => d.PixDinamico).WithMany(p => p.TbDepPixDinamicoConsulta)
                .HasForeignKey(d => d.PixDinamicoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tb_dep_pix_dinamico_consulta1");

            entity.HasOne(d => d.PixDinamicoTipoStatusGeracao).WithMany(p => p.TbDepPixDinamicoConsulta)
                .HasForeignKey(d => d.PixDinamicoTipoStatusGeracaoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tb_dep_pix_dinamico_consulta2");
        });

        modelBuilder.Entity<TbDepPixDinamicoSenhaConfirmacaoTranferencium>(entity =>
        {
            entity.HasKey(e => e.PixDinamicoSenhaConfirmacaoTranferenciaId);

            entity.ToTable("tb_dep_pix_dinamico_senha_confirmacao_tranferencia");

            entity.HasIndex(e => e.FaturamentoId, "IDX_tb_dep_pix_dinamico_senha_confirmacao_tranferencia1");

            entity.HasIndex(e => e.UsuarioCadastroId, "IDX_tb_dep_pix_dinamico_senha_confirmacao_tranferencia2");

            entity.HasIndex(e => e.UsuarioFinanceiroId, "IDX_tb_dep_pix_dinamico_senha_confirmacao_tranferencia3");

            entity.Property(e => e.DataAlteracao).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.DataHoraAutorizacaoFinanceiro).HasColumnType("smalldatetime");
            entity.Property(e => e.FlagConfirmado)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength();
            entity.Property(e => e.Senha)
                .IsRequired()
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SenhaFinanceiro)
                .IsRequired()
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.Faturamento).WithMany(p => p.TbDepPixDinamicoSenhaConfirmacaoTranferencia)
                .HasForeignKey(d => d.FaturamentoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tb_dep_pix_dinamico_senha_confirmacao_tranferencia1");

            entity.HasOne(d => d.UsuarioCadastro).WithMany(p => p.TbDepPixDinamicoSenhaConfirmacaoTranferenciumUsuarioCadastros)
                .HasForeignKey(d => d.UsuarioCadastroId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tb_dep_pix_dinamico_senha_confirmacao_tranferencia2");

            entity.HasOne(d => d.UsuarioFinanceiro).WithMany(p => p.TbDepPixDinamicoSenhaConfirmacaoTranferenciumUsuarioFinanceiros)
                .HasForeignKey(d => d.UsuarioFinanceiroId)
                .HasConstraintName("FK_tb_dep_pix_dinamico_senha_confirmacao_tranferencia3");
        });

        modelBuilder.Entity<TbDepPixDinamicoTipoStatusGeracao>(entity =>
        {
            entity.HasKey(e => e.PixDinamicoTipoStatusGeracaoId);

            entity.ToTable("tb_dep_pix_dinamico_tipo_status_geracao");

            entity.Property(e => e.PixDinamicoTipoStatusGeracaoId).ValueGeneratedOnAdd();
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("A: O PIX foi enviado com sucesso ao Banco e está sendo processado;\r\nC: O PIX foi transferido;\r\nR: O PIX não foi transferido.");
        });

        modelBuilder.Entity<TbDepPixDinamicoUrl>(entity =>
        {
            entity.HasKey(e => e.PixDinamicoUrlsId);

            entity.ToTable("tb_dep_pix_dinamico_urls");

            entity.HasIndex(e => e.NomeMetodo, "IDX_tb_dep_pix_dinamico_urls1").IsUnique();

            entity.Property(e => e.PixDinamicoUrlsId).ValueGeneratedOnAdd();
            entity.Property(e => e.NomeMetodo)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UrlApi)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TbDepPreGrv>(entity =>
        {
            entity.HasKey(e => e.IdPreGrv).HasName("pk_tb_dep_pre_grv");

            entity.ToTable("tb_dep_pre_grv");

            entity.HasIndex(e => e.NumeroGrv, "idx_tb_dep_pre_grv1").IsUnique();

            entity.Property(e => e.IdPreGrv).HasColumnName("id_pre_grv");
            entity.Property(e => e.Chassi)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("chassi");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataPagamento)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_pagamento");
            entity.Property(e => e.DataRecolhimento)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_recolhimento");
            entity.Property(e => e.GpsLatitude)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("gps_latitude");
            entity.Property(e => e.GpsLongitude)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("gps_longitude");
            entity.Property(e => e.IdAgente)
                .HasColumnType("numeric(8, 0)")
                .HasColumnName("id_agente");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.NumeroGrv).HasColumnName("numero_grv");
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa");
            entity.Property(e => e.QtdDiasDep).HasColumnName("qtd_dias_dep");
            entity.Property(e => e.Tipo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("tipo");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.TbDepPreGrvs)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_pre_grv1");
        });

        modelBuilder.Entity<TbDepPreGrvFoto>(entity =>
        {
            entity.HasKey(e => e.IdPreGrvFoto).HasName("pk_tb_dep_pre_grv_fotos");

            entity.ToTable("tb_dep_pre_grv_fotos");

            entity.Property(e => e.IdPreGrvFoto).HasColumnName("id_pre_grv_foto");
            entity.Property(e => e.Foto).HasColumnName("foto");
            entity.Property(e => e.IdPreGrv).HasColumnName("id_pre_grv");

            entity.HasOne(d => d.IdPreGrvNavigation).WithMany(p => p.TbDepPreGrvFotos)
                .HasForeignKey(d => d.IdPreGrv)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_pre_grv_fotos1");
        });

        modelBuilder.Entity<TbDepPropositoAcesso>(entity =>
        {
            entity.ToTable("tb_dep_proposito_acesso");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("date")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(70)
                .IsFixedLength()
                .HasColumnName("descricao");
            entity.Property(e => e.IdUsuario)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("id_usuario");
        });

        modelBuilder.Entity<TbDepPropositoAcessoDeclaracao>(entity =>
        {
            entity.ToTable("tb_dep_proposito_acesso_declaracao");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.IdDeclaracaoAcesso).HasColumnName("id_declaracao_acesso");
            entity.Property(e => e.IdPropositoAcesso).HasColumnName("id_proposito_acesso");
        });

        modelBuilder.Entity<TbDepQualificacaoResponsavel>(entity =>
        {
            entity.HasKey(e => e.IdQualificacaoResponsavel).HasName("pk_tb_dep_qualificacao_responsavel");

            entity.ToTable("tb_dep_qualificacao_responsavel");

            entity.Property(e => e.IdQualificacaoResponsavel)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_qualificacao_responsavel");
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descricao");
        });

        modelBuilder.Entity<TbDepReboque>(entity =>
        {
            entity.HasKey(e => e.IdReboque).HasName("pk_tb_dep_reboques1");

            entity.ToTable("tb_dep_reboques", tb => tb.HasTrigger("tr_log_upd_reboques"));

            entity.HasIndex(e => e.Codigo, "idx_tb_dep_reboques1");

            entity.HasIndex(e => e.Placa, "idx_tb_dep_reboques2");

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_reboques3");

            entity.HasIndex(e => e.IdUsuarioAlteracao, "idx_tb_dep_reboques4");

            entity.HasIndex(e => e.IdDeposito, "idx_tb_dep_reboques5");

            entity.HasIndex(e => e.IdCliente, "idx_tb_dep_reboques6");

            entity.Property(e => e.IdReboque).HasColumnName("id_reboque");
            entity.Property(e => e.Ano)
                .HasColumnType("numeric(4, 0)")
                .HasColumnName("ano");
            entity.Property(e => e.Chassi)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("chassi");
            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("codigo");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.FlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasColumnName("flag_ativo");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.Marca)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("marca");
            entity.Property(e => e.Modelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("modelo");
            entity.Property(e => e.Placa)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa");
            entity.Property(e => e.Renavam)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("renavam");

            entity.HasOne(d => d.IdClienteNavigation).WithMany(p => p.TbDepReboques)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_reboques4");
        });

        modelBuilder.Entity<TbDepReboquesTerceirizado>(entity =>
        {
            entity.HasKey(e => e.IdReboqueTerceirizado).HasName("PK__tb_dep_r__B4CAC42D44B78ADC");

            entity.ToTable("tb_dep_reboques_terceirizados");

            entity.Property(e => e.IdReboqueTerceirizado).HasColumnName("id_reboque_terceirizado");
            entity.Property(e => e.IdEmpresa).HasColumnName("id_empresa");
            entity.Property(e => e.IdReboque).HasColumnName("id_reboque");

            entity.HasOne(d => d.IdReboqueNavigation).WithMany(p => p.TbDepReboquesTerceirizados)
                .HasForeignKey(d => d.IdReboque)
                .HasConstraintName("FK__tb_dep_re__id_re__469FD34E");
        });

        modelBuilder.Entity<TbDepReboquesTerceirizadosTarifa>(entity =>
        {
            entity.HasKey(e => e.IdReboqueTerceirizadoTarifas).HasName("PK__tb_dep_r__23888825497C3FF9");

            entity.ToTable("tb_dep_reboques_terceirizados_tarifas");

            entity.Property(e => e.IdReboqueTerceirizadoTarifas).HasColumnName("id_reboque_terceirizado_tarifas");
            entity.Property(e => e.IdReboqueTerceirizado).HasColumnName("id_reboque_terceirizado");
            entity.Property(e => e.IdTipoVeiculoClassificacaoNome).HasColumnName("id_tipo_veiculo_classificacao_nome");
            entity.Property(e => e.ValorTarifa)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("valor_tarifa");

            entity.HasOne(d => d.IdReboqueTerceirizadoNavigation).WithMany(p => p.TbDepReboquesTerceirizadosTarifas)
                .HasForeignKey(d => d.IdReboqueTerceirizado)
                .HasConstraintName("FK__tb_dep_re__id_re__4B64886B");

            entity.HasOne(d => d.IdTipoVeiculoClassificacaoNomeNavigation).WithMany(p => p.TbDepReboquesTerceirizadosTarifas)
                .HasForeignKey(d => d.IdTipoVeiculoClassificacaoNome)
                .HasConstraintName("FK__tb_dep_re__id_ti__4C58ACA4");
        });

        modelBuilder.Entity<TbDepReboquista>(entity =>
        {
            entity.HasKey(e => e.IdReboquista).HasName("pk_tb_dep_reboquistas1");

            entity.ToTable("tb_dep_reboquistas", tb => tb.HasTrigger("tr_log_upd_reboquistas"));

            entity.HasIndex(e => e.Nome, "idx_tb_dep_reboquistas1");

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_reboquistas2");

            entity.HasIndex(e => e.IdUsuarioAlteracao, "idx_tb_dep_reboquistas3");

            entity.HasIndex(e => e.IdDeposito, "idx_tb_dep_reboquistas4");

            entity.HasIndex(e => e.IdCliente, "idx_tb_dep_reboquistas5");

            entity.Property(e => e.IdReboquista).HasColumnName("id_reboquista");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.FlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasColumnName("flag_ativo");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.Nome)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nome");

            entity.HasOne(d => d.IdClienteNavigation).WithMany(p => p.TbDepReboquista)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_reboquistas4");

            entity.HasOne(d => d.IdDepositoNavigation).WithMany(p => p.TbDepReboquista)
                .HasForeignKey(d => d.IdDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_reboquistas3");

            entity.HasOne(d => d.IdUsuarioAlteracaoNavigation).WithMany(p => p.TbDepReboquistaIdUsuarioAlteracaoNavigations)
                .HasForeignKey(d => d.IdUsuarioAlteracao)
                .HasConstraintName("fk_tb_dep_reboquistas2");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.TbDepReboquistaIdUsuarioCadastroNavigations)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_reboquistas1");
        });

        modelBuilder.Entity<TbDepRepositorioArquivo>(entity =>
        {
            entity.HasKey(e => e.RepositorioArquivoId);

            entity.ToTable("tb_dep_repositorio_arquivos");

            entity.HasIndex(e => e.NomeTabelaOrigemId, "IDX_tb_dep_repositorio_arquivos1");

            entity.HasIndex(e => e.TabelaOrigemId, "IDX_tb_dep_repositorio_arquivos2");

            entity.HasIndex(e => e.UsuarioCadastroId, "IDX_tb_dep_repositorio_arquivos3");

            entity.HasIndex(e => e.NomeArquivo, "IDX_tb_dep_repositorio_arquivos4");

            entity.Property(e => e.DataHoraCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.NomeArquivo)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PermissaoAcesso)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TipoArquivo)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TipoCadastro)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Url)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.NomeTabelaOrigem).WithMany(p => p.TbDepRepositorioArquivos)
                .HasForeignKey(d => d.NomeTabelaOrigemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tb_dep_repositorio_arquivos1");

            entity.HasOne(d => d.UsuarioCadastro).WithMany(p => p.TbDepRepositorioArquivos)
                .HasForeignKey(d => d.UsuarioCadastroId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tb_dep_repositorio_arquivos2");
        });

        modelBuilder.Entity<TbDepRetornoBancario>(entity =>
        {
            entity.HasKey(e => e.IdRetornoBancario);

            entity.ToTable("tb_dep_retorno_bancario");

            entity.Property(e => e.IdRetornoBancario).HasColumnName("id_retorno_bancario");
            entity.Property(e => e.Agencia).HasColumnName("agencia");
            entity.Property(e => e.AgenciaCobradoraRecebedora).HasColumnName("agencia_cobradora_recebedora");
            entity.Property(e => e.BancoCobradorRecebedor).HasColumnName("banco_cobrador_recebedor");
            entity.Property(e => e.CodigoBanco).HasColumnName("codigo_banco");
            entity.Property(e => e.CodigoCarteira).HasColumnName("codigo_carteira");
            entity.Property(e => e.CodigoCedente).HasColumnName("codigo_cedente");
            entity.Property(e => e.CodigoMovimento).HasColumnName("codigo_movimento");
            entity.Property(e => e.CodigoRegistro).HasColumnName("codigo_registro");
            entity.Property(e => e.CodigoSegmento)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("codigo_segmento");
            entity.Property(e => e.ContaCorrente).HasColumnName("conta_corrente");
            entity.Property(e => e.DataVencimento)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vencimento");
            entity.Property(e => e.DigitoAgencia)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("digito_agencia");
            entity.Property(e => e.DigitoContacorrente)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("digito_contacorrente");
            entity.Property(e => e.DvagenciaCobradoraRecebedora)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("dvagencia_cobradora_recebedora");
            entity.Property(e => e.DvagenciaConta)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("dvagencia_conta");
            entity.Property(e => e.IdArquivo).HasColumnName("id_arquivo");
            entity.Property(e => e.IdentificacaoTitulo)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("identificacao_titulo");
            entity.Property(e => e.IdentificacaoTitulonaEmpresa)
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("identificacao_titulona_empresa");
            entity.Property(e => e.LoteServico)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("lote_servico");
            entity.Property(e => e.ModalidaDenossonumero).HasColumnName("modalida_denossonumero");
            entity.Property(e => e.Moeda).HasColumnName("moeda");
            entity.Property(e => e.MotivoOcorrencia)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("motivo_ocorrencia");
            entity.Property(e => e.NomeSacado)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("nome_sacado");
            entity.Property(e => e.NossoNumero)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("nosso_numero");
            entity.Property(e => e.NumeroBanco).HasColumnName("numero_banco");
            entity.Property(e => e.NumeroContrato)
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("numero_contrato");
            entity.Property(e => e.NumeroDocumento)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("numero_documento");
            entity.Property(e => e.NumeroInscricaosacado)
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("numero_inscricaosacado");
            entity.Property(e => e.NumeroRegistro).HasColumnName("numero_registro");
            entity.Property(e => e.RetornoBancarioCef)
                .HasColumnType("money")
                .HasColumnName("retorno_bancario_cef");
            entity.Property(e => e.TipoInscricaoSacado).HasColumnName("tipo_inscricao_sacado");
            entity.Property(e => e.UsoFebraban)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("uso_febraban");
            entity.Property(e => e.ValorTarifas)
                .HasColumnType("money")
                .HasColumnName("valor_tarifas");
        });

        modelBuilder.Entity<TbDepRetornoBancarioControle>(entity =>
        {
            entity.ToTable("tb_dep_retorno_bancario_controle");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DataImportacao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_importacao");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.NomeArquivo)
                .IsRequired()
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("nome_arquivo");
        });

        modelBuilder.Entity<TbDepRetornoBancarioLeilaoControle>(entity =>
        {
            entity.ToTable("tb_dep_retorno_bancario_leilao_controle");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DataImportacao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_importacao");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.NomeArquivo)
                .IsRequired()
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("nome_arquivo");
        });

        modelBuilder.Entity<TbDepRetornoBancarioLeilaoT>(entity =>
        {
            entity.HasKey(e => e.IdRetornoBancarioLeilaoT);

            entity.ToTable("tb_dep_retorno_bancario_leilao_t");

            entity.Property(e => e.IdRetornoBancarioLeilaoT).HasColumnName("id_retorno_bancario_leilao_t");
            entity.Property(e => e.Agencia).HasColumnName("agencia");
            entity.Property(e => e.AgenciaCobradoraRecebedora).HasColumnName("agencia_cobradora_recebedora");
            entity.Property(e => e.BancoCobradorRecebedor).HasColumnName("banco_cobrador_recebedor");
            entity.Property(e => e.CodigoBanco).HasColumnName("codigo_banco");
            entity.Property(e => e.CodigoCarteira).HasColumnName("codigo_carteira");
            entity.Property(e => e.CodigoCedente).HasColumnName("codigo_cedente");
            entity.Property(e => e.CodigoMovimento).HasColumnName("codigo_movimento");
            entity.Property(e => e.CodigoRegistro).HasColumnName("codigo_registro");
            entity.Property(e => e.CodigoSegmento)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("codigo_segmento");
            entity.Property(e => e.ContaCorrente).HasColumnName("conta_corrente");
            entity.Property(e => e.DataVencimento)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vencimento");
            entity.Property(e => e.DigitoAgencia)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("digito_agencia");
            entity.Property(e => e.DigitoContacorrente)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("digito_contacorrente");
            entity.Property(e => e.DvagenciaCobradoraRecebedora)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("dvagencia_cobradora_recebedora");
            entity.Property(e => e.DvagenciaConta)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("dvagencia_conta");
            entity.Property(e => e.IdArquivo).HasColumnName("id_arquivo");
            entity.Property(e => e.IdentificacaoTitulo)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("identificacao_titulo");
            entity.Property(e => e.IdentificacaoTitulonaEmpresa)
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("identificacao_titulona_empresa");
            entity.Property(e => e.LoteServico)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("lote_servico");
            entity.Property(e => e.ModalidaDenossonumero).HasColumnName("modalida_denossonumero");
            entity.Property(e => e.Moeda).HasColumnName("moeda");
            entity.Property(e => e.MotivoOcorrencia)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("motivo_ocorrencia");
            entity.Property(e => e.NomeSacado)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("nome_sacado");
            entity.Property(e => e.NossoNumero)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("nosso_numero");
            entity.Property(e => e.NumeroBanco).HasColumnName("numero_banco");
            entity.Property(e => e.NumeroContrato)
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("numero_contrato");
            entity.Property(e => e.NumeroDocumento)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("numero_documento");
            entity.Property(e => e.NumeroInscricaosacado)
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("numero_inscricaosacado");
            entity.Property(e => e.NumeroRegistro).HasColumnName("numero_registro");
            entity.Property(e => e.RetornoBancarioCef)
                .HasColumnType("money")
                .HasColumnName("retorno_bancario_cef");
            entity.Property(e => e.TipoInscricaoSacado).HasColumnName("tipo_inscricao_sacado");
            entity.Property(e => e.UsoFebraban)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("uso_febraban");
            entity.Property(e => e.ValorTarifas)
                .HasColumnType("money")
                .HasColumnName("valor_tarifas");
        });

        modelBuilder.Entity<TbDepRetornoBancarioLeilaoU>(entity =>
        {
            entity.HasKey(e => e.IdRetornoBancarioLeilaoU);

            entity.ToTable("tb_dep_retorno_bancario_leilao_u");

            entity.Property(e => e.IdRetornoBancarioLeilaoU).HasColumnName("id_retorno_bancario_leilao_u");
            entity.Property(e => e.CodigoBanco).HasColumnName("codigo_banco");
            entity.Property(e => e.CodigoBancoCompensacao).HasColumnName("codigo_banco_compensacao");
            entity.Property(e => e.CodigoMovimento).HasColumnName("codigo_movimento");
            entity.Property(e => e.CodigoRegistro).HasColumnName("codigo_registro");
            entity.Property(e => e.CodigoSacadoBanco)
                .HasMaxLength(15)
                .HasColumnName("codigo_sacado_banco");
            entity.Property(e => e.CodigoSegmento)
                .HasMaxLength(15)
                .HasColumnName("codigo_segmento");
            entity.Property(e => e.DataCredito)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_credito");
            entity.Property(e => e.DataDebitotarifa)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_debitotarifa");
            entity.Property(e => e.DataLiquidacao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_liquidacao");
            entity.Property(e => e.DataOcorrencia)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_ocorrencia");
            entity.Property(e => e.DataPagamento)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_pagamento");
            entity.Property(e => e.IdAceite)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("id_aceite");
            entity.Property(e => e.IdAjusteEmissao)
                .HasMaxLength(15)
                .IsFixedLength()
                .HasColumnName("id_ajuste_emissao");
            entity.Property(e => e.IdAjusteVencimento)
                .HasMaxLength(15)
                .IsFixedLength()
                .HasColumnName("id_ajuste_vencimento");
            entity.Property(e => e.IdArquivo)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("id_arquivo");
            entity.Property(e => e.IdEspecieTitulo)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("id_especie_titulo");
            entity.Property(e => e.IdModeloBloqueto)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("id_modelo_bloqueto");
            entity.Property(e => e.IdViaEntregaDistribuicao)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("id_via_entrega_distribuicao");
            entity.Property(e => e.JurosMultaEncargos)
                .HasMaxLength(15)
                .HasColumnName("juros_multa_encargos");
            entity.Property(e => e.LoteServico)
                .HasMaxLength(15)
                .HasColumnName("lote_servico");
            entity.Property(e => e.NomeBancoSacados)
                .HasMaxLength(30)
                .HasColumnName("nome_banco_sacados");
            entity.Property(e => e.NossoNumeroBancoCompensacao)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("nosso_numero_banco_compensacao");
            entity.Property(e => e.NumeroBancoSacados).HasColumnName("numero_banco_sacados");
            entity.Property(e => e.NumeroRegistro).HasColumnName("numero_registro");
            entity.Property(e => e.ValorAbatimentoConcedido)
                .HasMaxLength(15)
                .HasColumnName("valor_abatimento_concedido");
            entity.Property(e => e.ValorDescontoConcedido)
                .HasColumnType("money")
                .HasColumnName("valor_desconto_concedido");
            entity.Property(e => e.ValorIofRecolhido)
                .HasColumnType("money")
                .HasColumnName("valor_iof_recolhido");
            entity.Property(e => e.ValorLiquidoAserCreditado)
                .HasColumnType("money")
                .HasColumnName("valor_liquido_aser_creditado");
            entity.Property(e => e.ValorOutrasDespesas)
                .HasColumnType("money")
                .HasColumnName("valor_outras_despesas");
            entity.Property(e => e.ValorOutrosCreditos)
                .HasColumnType("money")
                .HasColumnName("valor_outros_creditos");
            entity.Property(e => e.ValorPagoPeloSacado)
                .HasColumnType("money")
                .HasColumnName("valor_pago_pelo_sacado");
        });

        modelBuilder.Entity<TbDepSapCondicaoPagamento>(entity =>
        {
            entity.HasKey(e => e.IdSapCondicaoPagamento).HasName("pk_tb_dep_sap_condicao_pagamento");

            entity.ToTable("tb_dep_sap_condicao_pagamento");

            entity.HasIndex(e => e.Codigo, "idx_tb_dep_sap_condicao_pagamento1");

            entity.Property(e => e.IdSapCondicaoPagamento)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_sap_condicao_pagamento");
            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codigo");
            entity.Property(e => e.Descricao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descricao");
        });

        modelBuilder.Entity<TbDepSapTipoComposicao>(entity =>
        {
            entity.HasKey(e => e.IdSapTipoComposicao).HasName("pk_tb_dep_sap_tipo_composicao");

            entity.ToTable("tb_dep_sap_tipo_composicao");

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_sap_tipo_composicao1");

            entity.HasIndex(e => e.IdUsuarioAlteracao, "idx_tb_dep_sap_tipo_composicao2");

            entity.Property(e => e.IdSapTipoComposicao).HasColumnName("id_sap_tipo_composicao");
            entity.Property(e => e.CodigoMaterial)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codigo_material");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.DescricaoNotaFiscal)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("descricao_nota_fiscal");
            entity.Property(e => e.FlagAgrupamento)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_agrupamento");
            entity.Property(e => e.IdSapTipoComposicaoGrupos).HasColumnName("id_sap_tipo_composicao_grupos");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.Observacao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("observacao");
            entity.Property(e => e.TipoDocumentoVenda)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo_documento_venda");

            entity.HasOne(d => d.IdSapTipoComposicaoGruposNavigation).WithMany(p => p.TbDepSapTipoComposicaos)
                .HasForeignKey(d => d.IdSapTipoComposicaoGrupos)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_sap_tipo_composicao_grupos1");
        });

        modelBuilder.Entity<TbDepSapTipoComposicaoGrupo>(entity =>
        {
            entity.HasKey(e => e.IdSapTipoComposicaoGrupos).HasName("pk_tb_dep_sap_tipo_composicao_grupos");

            entity.ToTable("tb_dep_sap_tipo_composicao_grupos");

            entity.Property(e => e.IdSapTipoComposicaoGrupos)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_sap_tipo_composicao_grupos");
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.IdSapTipoComposicaoMaterialAgrupamento).HasColumnName("id_sap_tipo_composicao_material_agrupamento");
        });

        modelBuilder.Entity<TbDepSequence>(entity =>
        {
            entity.HasKey(e => e.SequenceName).HasName("PK__tb_dep_s__666199D51A74D648");

            entity.ToTable("tb_dep_sequences");

            entity.Property(e => e.SequenceName)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("sequence_name");
            entity.Property(e => e.CurrentValue).HasColumnName("current_value");
            entity.Property(e => e.Incremental)
                .HasDefaultValueSql("((1))")
                .HasColumnName("incremental");
            entity.Property(e => e.Seed)
                .HasDefaultValueSql("((1))")
                .HasColumnName("seed");
        });

        modelBuilder.Entity<TbDepSimulacaoFaturamento>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tb_dep_simulacao_faturamento");

            entity.Property(e => e.Comboio)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DataHoraCalculo)
                .HasColumnType("datetime")
                .HasColumnName("data_hora_calculo");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.NumeroFormularioGrv)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.StatusOperacao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TbDepSimulacaoFaturamentoComposicao>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tb_dep_simulacao_faturamento_composicao");

            entity.Property(e => e.DataHora)
                .HasColumnType("datetime")
                .HasColumnName("data_hora");
            entity.Property(e => e.IdFaturamentoServicoTipoVeiculo).HasColumnName("id_faturamento_servico_tipo_veiculo");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.QuantidadeComposicao).HasColumnName("quantidade_composicao");
            entity.Property(e => e.ServicoDescricao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TipoComposicao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo_composicao");
            entity.Property(e => e.ValorComposicao).HasColumnName("valor_composicao");
            entity.Property(e => e.ValorTipoComposicao).HasColumnName("valor_tipo_composicao");
        });

        modelBuilder.Entity<TbDepSistemaAcesso>(entity =>
        {
            entity.HasKey(e => e.IdAcesso).HasName("pk_tb_tb_dep_sistema_acessos1");

            entity.ToTable("tb_dep_sistema_acessos");

            entity.HasIndex(e => e.IdAcesso, "idx_tb_dep_sistema_acessos1");

            entity.HasIndex(e => e.IdModulo, "idx_tb_dep_sistema_acessos2");

            entity.HasIndex(e => e.IdSubModulo, "idx_tb_dep_sistema_acessos3");

            entity.HasIndex(e => e.IdUsuarioAcesso, "idx_tb_dep_sistema_acessos4");

            entity.HasIndex(e => e.IdUsuario, "idx_tb_dep_sistema_acessos5");

            entity.HasIndex(e => new { e.IdUsuarioAcesso, e.IdModulo, e.IdSubModulo, e.TipoAcesso }, "idx_tb_dep_sistema_acessos6").IsUnique();

            entity.Property(e => e.IdAcesso)
                .ValueGeneratedOnAdd()
                .HasColumnType("numeric(10, 0)")
                .HasColumnName("id_acesso");
            entity.Property(e => e.IdModulo).HasColumnName("id_modulo");
            entity.Property(e => e.IdSubModulo).HasColumnName("id_sub_modulo");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.IdUsuarioAcesso).HasColumnName("id_usuario_acesso");
            entity.Property(e => e.TipoAcesso)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo_acesso");

            entity.HasOne(d => d.IdModuloNavigation).WithMany(p => p.TbDepSistemaAcessos)
                .HasForeignKey(d => d.IdModulo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_tb_dep_sistema_acessos1");

            entity.HasOne(d => d.IdSubModuloNavigation).WithMany(p => p.TbDepSistemaAcessos)
                .HasForeignKey(d => d.IdSubModulo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_tb_dep_sistema_acessos2");

            entity.HasOne(d => d.IdUsuarioNavigation).WithMany(p => p.TbDepSistemaAcessoIdUsuarioNavigations)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_tb_dep_sistema_acessos4");

            entity.HasOne(d => d.IdUsuarioAcessoNavigation).WithMany(p => p.TbDepSistemaAcessoIdUsuarioAcessoNavigations)
                .HasForeignKey(d => d.IdUsuarioAcesso)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_tb_dep_sistema_acessos3");
        });

        modelBuilder.Entity<TbDepSistemaModulo>(entity =>
        {
            entity.HasKey(e => e.IdModulo).HasName("pk_tb_tb_dep_sistema_modulos1");

            entity.ToTable("tb_dep_sistema_modulos");

            entity.Property(e => e.IdModulo).HasColumnName("id_modulo");
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.Menu)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("menu");
            entity.Property(e => e.Ordenacao).HasColumnName("ordenacao");
        });

        modelBuilder.Entity<TbDepSistemaPerfilAcesso>(entity =>
        {
            entity.HasKey(e => e.IdPerfilAcesso).HasName("pk_tb_dep_sistema_perfil_acesso");

            entity.ToTable("tb_dep_sistema_perfil_acesso", tb => tb.HasTrigger("tr_log_upd_sistema_perfil_acesso"));

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_sistema_perfil_acesso1");

            entity.HasIndex(e => e.IdUsuarioAlteracao, "idx_tb_dep_sistema_perfil_acesso2");

            entity.Property(e => e.IdPerfilAcesso).HasColumnName("id_perfil_acesso");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.FlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasColumnName("flag_ativo");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");

            entity.HasOne(d => d.IdUsuarioAlteracaoNavigation).WithMany(p => p.TbDepSistemaPerfilAcessoIdUsuarioAlteracaoNavigations)
                .HasForeignKey(d => d.IdUsuarioAlteracao)
                .HasConstraintName("fk_tb_dep_sistema_perfil_acesso2");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.TbDepSistemaPerfilAcessoIdUsuarioCadastroNavigations)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_sistema_perfil_acesso1");
        });

        modelBuilder.Entity<TbDepSistemaPerfilAcessoSubModulo>(entity =>
        {
            entity.HasKey(e => e.IdPerfilAcessoSubModulo).HasName("pk_tb_dep_sistema_perfil_acesso_sub_modulos");

            entity.ToTable("tb_dep_sistema_perfil_acesso_sub_modulos");

            entity.HasIndex(e => e.IdPerfilAcesso, "idx_tb_dep_sistema_perfil_acesso_sub_modulos1");

            entity.HasIndex(e => e.IdSubModulo, "idx_tb_dep_sistema_perfil_acesso_sub_modulos2");

            entity.Property(e => e.IdPerfilAcessoSubModulo).HasColumnName("id_perfil_acesso_sub_modulo");
            entity.Property(e => e.Crud)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('C')")
                .IsFixedLength()
                .HasColumnName("crud");
            entity.Property(e => e.IdPerfilAcesso).HasColumnName("id_perfil_acesso");
            entity.Property(e => e.IdSubModulo).HasColumnName("id_sub_modulo");

            entity.HasOne(d => d.IdPerfilAcessoNavigation).WithMany(p => p.TbDepSistemaPerfilAcessoSubModulos)
                .HasForeignKey(d => d.IdPerfilAcesso)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_sistema_perfil_acesso_sub_modulos1");

            entity.HasOne(d => d.IdSubModuloNavigation).WithMany(p => p.TbDepSistemaPerfilAcessoSubModulos)
                .HasForeignKey(d => d.IdSubModulo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_sistema_perfil_acesso_sub_modulos2");
        });

        modelBuilder.Entity<TbDepSistemaPerfilAcessoUsuario>(entity =>
        {
            entity.HasKey(e => e.IdPerfilAcessoUsuario).HasName("pk_tb_dep_sistema_perfil_acesso_usuarios");

            entity.ToTable("tb_dep_sistema_perfil_acesso_usuarios");

            entity.HasIndex(e => e.IdPerfilAcesso, "idx_tb_dep_sistema_perfil_acesso_usuarios1");

            entity.HasIndex(e => e.IdUsuario, "idx_tb_dep_sistema_perfil_acesso_usuarios2");

            entity.Property(e => e.IdPerfilAcessoUsuario).HasColumnName("id_perfil_acesso_usuario");
            entity.Property(e => e.IdPerfilAcesso).HasColumnName("id_perfil_acesso");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");

            entity.HasOne(d => d.IdPerfilAcessoNavigation).WithMany(p => p.TbDepSistemaPerfilAcessoUsuarios)
                .HasForeignKey(d => d.IdPerfilAcesso)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_sistema_perfil_acesso_usuarios1");

            entity.HasOne(d => d.IdUsuarioNavigation).WithMany(p => p.TbDepSistemaPerfilAcessoUsuarios)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_sistema_perfil_acesso_usuarios2");
        });

        modelBuilder.Entity<TbDepSistemaSubModulo>(entity =>
        {
            entity.HasKey(e => e.IdSubModulo).HasName("pk_tb_tb_dep_sistema_sub_modulos1");

            entity.ToTable("tb_dep_sistema_sub_modulos");

            entity.Property(e => e.IdSubModulo).HasColumnName("id_sub_modulo");
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.Formulario)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("formulario");
            entity.Property(e => e.Icone).HasColumnName("icone");
            entity.Property(e => e.IdModulo).HasColumnName("id_modulo");
            entity.Property(e => e.Menu)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("menu");
            entity.Property(e => e.Ordenacao).HasColumnName("ordenacao");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasColumnName("status");

            entity.HasOne(d => d.IdModuloNavigation).WithMany(p => p.TbDepSistemaSubModulos)
                .HasForeignKey(d => d.IdModulo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_tb_dep_sistema_sub_modulos1");
        });

        modelBuilder.Entity<TbDepSolicitacaoReboque>(entity =>
        {
            entity.HasKey(e => e.IdSolicitacaoReboque).HasName("pk_tb_dep_solicitacao_reboque");

            entity.ToTable("tb_dep_solicitacao_reboque");

            entity.HasIndex(e => e.IdClienteDeposito, "idx_tb_dep_solicitacao_reboque1");

            entity.HasIndex(e => e.IdReboque, "idx_tb_dep_solicitacao_reboque2");

            entity.HasIndex(e => e.IdReboquista, "idx_tb_dep_solicitacao_reboque3");

            entity.HasIndex(e => e.IdSolicitacaoReboqueTipo, "idx_tb_dep_solicitacao_reboque4");

            entity.HasIndex(e => e.IdSolicitacaoReboqueStatus, "idx_tb_dep_solicitacao_reboque5");

            entity.HasIndex(e => e.IdGrv, "idx_tb_dep_solicitacao_reboque6").IsUnique();

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_solicitacao_reboque7");

            entity.HasIndex(e => e.IdUsuarioAlteracao, "idx_tb_dep_solicitacao_reboque8");

            entity.Property(e => e.IdSolicitacaoReboque).HasColumnName("id_solicitacao_reboque");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.IdClienteDeposito).HasColumnName("id_cliente_deposito");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdReboque).HasColumnName("id_reboque");
            entity.Property(e => e.IdReboquista).HasColumnName("id_reboquista");
            entity.Property(e => e.IdSolicitacaoReboqueStatus)
                .HasDefaultValueSql("((1))")
                .HasColumnName("id_solicitacao_reboque_status");
            entity.Property(e => e.IdSolicitacaoReboqueTipo).HasColumnName("id_solicitacao_reboque_tipo");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.LocalRemocaoEnderecoCompleto)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("local_remocao_endereco_completo");
            entity.Property(e => e.LocalRemocaoLatitude)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("local_remocao_latitude");
            entity.Property(e => e.LocalRemocaoLongitude)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("local_remocao_longitude");
            entity.Property(e => e.LocalRemocaoReferencia)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("local_remocao_referencia");

            entity.HasOne(d => d.IdClienteDepositoNavigation).WithMany(p => p.TbDepSolicitacaoReboques)
                .HasForeignKey(d => d.IdClienteDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_solicitacao_reboque1");

            entity.HasOne(d => d.IdGrvNavigation).WithOne(p => p.TbDepSolicitacaoReboque)
                .HasForeignKey<TbDepSolicitacaoReboque>(d => d.IdGrv)
                .HasConstraintName("fk_tb_dep_solicitacao_reboque6");

            entity.HasOne(d => d.IdReboqueNavigation).WithMany(p => p.TbDepSolicitacaoReboques)
                .HasForeignKey(d => d.IdReboque)
                .HasConstraintName("fk_tb_dep_solicitacao_reboque2");

            entity.HasOne(d => d.IdReboquistaNavigation).WithMany(p => p.TbDepSolicitacaoReboques)
                .HasForeignKey(d => d.IdReboquista)
                .HasConstraintName("fk_tb_dep_solicitacao_reboque3");

            entity.HasOne(d => d.IdSolicitacaoReboqueStatusNavigation).WithMany(p => p.TbDepSolicitacaoReboques)
                .HasForeignKey(d => d.IdSolicitacaoReboqueStatus)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_solicitacao_reboque5");

            entity.HasOne(d => d.IdSolicitacaoReboqueTipoNavigation).WithMany(p => p.TbDepSolicitacaoReboques)
                .HasForeignKey(d => d.IdSolicitacaoReboqueTipo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_solicitacao_reboque4");

            entity.HasOne(d => d.IdUsuarioAlteracaoNavigation).WithMany(p => p.TbDepSolicitacaoReboqueIdUsuarioAlteracaoNavigations)
                .HasForeignKey(d => d.IdUsuarioAlteracao)
                .HasConstraintName("fk_tb_dep_solicitacao_reboque8");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.TbDepSolicitacaoReboqueIdUsuarioCadastroNavigations)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_solicitacao_reboque7");
        });

        modelBuilder.Entity<TbDepSolicitacaoReboqueDrfa>(entity =>
        {
            entity.HasKey(e => e.IdSolicitacaoReboqueDrfa).HasName("pk_tb_dep_solicitacao_reboque_drfa");

            entity.ToTable("tb_dep_solicitacao_reboque_drfa");

            entity.HasIndex(e => e.IdSolicitacaoReboque, "idx_tb_dep_solicitacao_reboque_drfa1");

            entity.HasIndex(e => e.IdGrvDrfaTipoRegistro, "idx_tb_dep_solicitacao_reboque_drfa2");

            entity.HasIndex(e => e.IdOrgaoEmissor, "idx_tb_dep_solicitacao_reboque_drfa3");

            entity.HasIndex(e => e.IdAutoridadeDivisao, "idx_tb_dep_solicitacao_reboque_drfa4");

            entity.Property(e => e.IdSolicitacaoReboqueDrfa).HasColumnName("id_solicitacao_reboque_drfa");
            entity.Property(e => e.AutoridadeDivisaoComplemento)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("autoridade_divisao_complemento");
            entity.Property(e => e.EstadoGeralVeiculo)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("estado_geral_veiculo");
            entity.Property(e => e.IdAutoridadeDivisao).HasColumnName("id_autoridade_divisao");
            entity.Property(e => e.IdGrvDrfaTipoRegistro).HasColumnName("id_grv_drfa_tipo_registro");
            entity.Property(e => e.IdOrgaoEmissor).HasColumnName("id_orgao_emissor");
            entity.Property(e => e.IdSolicitacaoReboque).HasColumnName("id_solicitacao_reboque");
            entity.Property(e => e.NumeroRegistroRouboFurto)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("numero_registro_roubo_furto");
            entity.Property(e => e.RegistroRouboFurtoMatriculaAgente)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("registro_roubo_furto_matricula_agente");
            entity.Property(e => e.RegistroRouboFurtoNomeAgente)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("registro_roubo_furto_nome_agente");

            entity.HasOne(d => d.IdGrvDrfaTipoRegistroNavigation).WithMany(p => p.TbDepSolicitacaoReboqueDrfas)
                .HasForeignKey(d => d.IdGrvDrfaTipoRegistro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_solicitacao_reboque_drfa2");

            entity.HasOne(d => d.IdSolicitacaoReboqueNavigation).WithMany(p => p.TbDepSolicitacaoReboqueDrfas)
                .HasForeignKey(d => d.IdSolicitacaoReboque)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_solicitacao_reboque_drfa1");
        });

        modelBuilder.Entity<TbDepSolicitacaoReboqueGrv>(entity =>
        {
            entity.HasKey(e => e.IdSolicitacaoReboqueGrv).HasName("pk_tb_dep_solicitacao_reboque_grv");

            entity.ToTable("tb_dep_solicitacao_reboque_grv");

            entity.HasIndex(e => e.IdSolicitacaoReboque, "idx_tb_dep_solicitacao_reboque_grv1");

            entity.HasIndex(e => e.IdAutoridadeResponsavel, "idx_tb_dep_solicitacao_reboque_grv2");

            entity.Property(e => e.IdSolicitacaoReboqueGrv).HasColumnName("id_solicitacao_reboque_grv");
            entity.Property(e => e.IdAutoridadeResponsavel).HasColumnName("id_autoridade_responsavel");
            entity.Property(e => e.IdSolicitacaoReboque).HasColumnName("id_solicitacao_reboque");
            entity.Property(e => e.MatriculaAutoridadeResponsavel)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("matricula_autoridade_responsavel");
            entity.Property(e => e.NomeAutoridadeResponsavel)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("nome_autoridade_responsavel");

            entity.HasOne(d => d.IdAutoridadeResponsavelNavigation).WithMany(p => p.TbDepSolicitacaoReboqueGrvs)
                .HasForeignKey(d => d.IdAutoridadeResponsavel)
                .HasConstraintName("fk_tb_dep_solicitacao_reboque_grv2");

            entity.HasOne(d => d.IdSolicitacaoReboqueNavigation).WithMany(p => p.TbDepSolicitacaoReboqueGrvs)
                .HasForeignKey(d => d.IdSolicitacaoReboque)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_solicitacao_reboque_grv1");
        });

        modelBuilder.Entity<TbDepSolicitacaoReboquePsv>(entity =>
        {
            entity.HasKey(e => e.IdSolicitacaoReboquePsv).HasName("pk_tb_dep_solicitacao_reboque_psv");

            entity.ToTable("tb_dep_solicitacao_reboque_psv");

            entity.HasIndex(e => e.IdSolicitacaoReboque, "idx_tb_dep_solicitacao_reboque_psv1");

            entity.HasIndex(e => e.IdTipoVeiculo, "idx_tb_dep_solicitacao_reboque_psv2");

            entity.HasIndex(e => e.IdMarcaModelo, "idx_tb_dep_solicitacao_reboque_psv3");

            entity.HasIndex(e => e.IdCor, "idx_tb_dep_solicitacao_reboque_psv4");

            entity.HasIndex(e => e.IdCep, "idx_tb_dep_solicitacao_reboque_psv5");

            entity.HasIndex(e => e.IdTipoLogradouro, "idx_tb_dep_solicitacao_reboque_psv6");

            entity.HasIndex(e => e.Placa, "idx_tb_dep_solicitacao_reboque_psv7");

            entity.HasIndex(e => e.Chassi, "idx_tb_dep_solicitacao_reboque_psv8");

            entity.Property(e => e.IdSolicitacaoReboquePsv).HasColumnName("id_solicitacao_reboque_psv");
            entity.Property(e => e.Bairro)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("bairro");
            entity.Property(e => e.Cep)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cep");
            entity.Property(e => e.Chassi)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("chassi");
            entity.Property(e => e.Complemento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("complemento");
            entity.Property(e => e.CpfSolicitante)
                .IsRequired()
                .HasMaxLength(11)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cpf_solicitante");
            entity.Property(e => e.Email)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.IdCep).HasColumnName("id_cep");
            entity.Property(e => e.IdCor).HasColumnName("id_cor");
            entity.Property(e => e.IdMarcaModelo).HasColumnName("id_marca_modelo");
            entity.Property(e => e.IdSolicitacaoReboque).HasColumnName("id_solicitacao_reboque");
            entity.Property(e => e.IdTipoLogradouro).HasColumnName("id_tipo_logradouro");
            entity.Property(e => e.IdTipoVeiculo).HasColumnName("id_tipo_veiculo");
            entity.Property(e => e.Logradouro)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("logradouro");
            entity.Property(e => e.Municipio)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("municipio");
            entity.Property(e => e.NomeSolicitante)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("nome_solicitante");
            entity.Property(e => e.Numero)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("numero");
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa");
            entity.Property(e => e.Renavam)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("renavam");
            entity.Property(e => e.Tel1)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasColumnName("tel1");
            entity.Property(e => e.Tel2)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasColumnName("tel2");
            entity.Property(e => e.Uf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("uf");

            entity.HasOne(d => d.IdMarcaModeloNavigation).WithMany(p => p.TbDepSolicitacaoReboquePsvs)
                .HasForeignKey(d => d.IdMarcaModelo)
                .HasConstraintName("fk_tb_dep_solicitacao_reboque_psv3");

            entity.HasOne(d => d.IdSolicitacaoReboqueNavigation).WithMany(p => p.TbDepSolicitacaoReboquePsvs)
                .HasForeignKey(d => d.IdSolicitacaoReboque)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_solicitacao_reboque_psv1");

            entity.HasOne(d => d.IdTipoVeiculoNavigation).WithMany(p => p.TbDepSolicitacaoReboquePsvs)
                .HasForeignKey(d => d.IdTipoVeiculo)
                .HasConstraintName("fk_tb_dep_solicitacao_reboque_psv2");
        });

        modelBuilder.Entity<TbDepSolicitacaoReboqueStatus>(entity =>
        {
            entity.HasKey(e => e.IdSolicitacaoReboqueStatus).HasName("pk_tb_dep_solicitacao_reboque_status");

            entity.ToTable("tb_dep_solicitacao_reboque_status");

            entity.HasIndex(e => e.Descricao, "idx_tb_dep_solicitacao_reboque_status1").IsUnique();

            entity.Property(e => e.IdSolicitacaoReboqueStatus)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_solicitacao_reboque_status");
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("descricao");
        });

        modelBuilder.Entity<TbDepSolicitacaoReboqueTipo>(entity =>
        {
            entity.HasKey(e => e.IdSolicitacaoReboqueTipo).HasName("pk_tb_dep_solicitacao_reboque_tipo");

            entity.ToTable("tb_dep_solicitacao_reboque_tipo");

            entity.HasIndex(e => e.IdMotivoApreensao, "idx_tb_dep_solicitacao_reboque_tipo1");

            entity.HasIndex(e => e.FaturamentoProdutoCodigo, "idx_tb_dep_solicitacao_reboque_tipo2");

            entity.Property(e => e.IdSolicitacaoReboqueTipo)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_solicitacao_reboque_tipo");
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.FaturamentoProdutoCodigo)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("faturamento_produto_codigo");
            entity.Property(e => e.IdMotivoApreensao).HasColumnName("id_motivo_apreensao");

            entity.HasOne(d => d.FaturamentoProdutoCodigoNavigation).WithMany(p => p.TbDepSolicitacaoReboqueTipos)
                .HasForeignKey(d => d.FaturamentoProdutoCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_solicitacao_reboque_tipo2");

            entity.HasOne(d => d.IdMotivoApreensaoNavigation).WithMany(p => p.TbDepSolicitacaoReboqueTipos)
                .HasForeignKey(d => d.IdMotivoApreensao)
                .HasConstraintName("fk_tb_dep_solicitacao_reboque_tipo1");
        });

        modelBuilder.Entity<TbDepStatusOperaco>(entity =>
        {
            entity.HasKey(e => e.IdStatusOperacao).HasName("pk_tb_dep_status_operacoes1");

            entity.ToTable("tb_dep_status_operacoes");

            entity.HasIndex(e => e.IdStatusOperacao, "idx_tb_dep_status_operacoes1");

            entity.Property(e => e.IdStatusOperacao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_status_operacao");
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.FlagLeilao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_leilao");
            entity.Property(e => e.FlagVeiculoApreendido)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasColumnName("flag_veiculo_apreendido");
            entity.Property(e => e.Sequencia).HasColumnName("sequencia");
        });

        modelBuilder.Entity<TbDepTarifa>(entity =>
        {
            entity.HasKey(e => e.IdTarifa).HasName("pk_tb_dep_tarifas");

            entity.ToTable("tb_dep_tarifas");

            entity.HasIndex(e => e.IdClienteDeposito, "idx_tb_dep_tarifas1");

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_tarifas2");

            entity.HasIndex(e => e.IdUsuarioAlteracao, "idx_tb_dep_tarifas3");

            entity.Property(e => e.IdTarifa).HasColumnName("id_tarifa");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataVigenciaFinal)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vigencia_final");
            entity.Property(e => e.DataVigenciaInicial)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vigencia_inicial");
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.IdClienteDeposito).HasColumnName("id_cliente_deposito");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.PrecoDiaria)
                .HasColumnType("money")
                .HasColumnName("preco_diaria");
            entity.Property(e => e.PrecoQuilometragem)
                .HasColumnType("money")
                .HasColumnName("preco_quilometragem");
            entity.Property(e => e.PrecoRebocada)
                .HasColumnType("money")
                .HasColumnName("preco_rebocada");

            entity.HasOne(d => d.IdClienteDepositoNavigation).WithMany(p => p.TbDepTarifas)
                .HasForeignKey(d => d.IdClienteDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_tarifas1");

            entity.HasOne(d => d.IdUsuarioAlteracaoNavigation).WithMany(p => p.TbDepTarifaIdUsuarioAlteracaoNavigations)
                .HasForeignKey(d => d.IdUsuarioAlteracao)
                .HasConstraintName("fk_tb_dep_tarifas3");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.TbDepTarifaIdUsuarioCadastroNavigations)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_tarifas2");
        });

        modelBuilder.Entity<TbDepTarifasTipoVeiculo>(entity =>
        {
            entity.HasKey(e => e.IdTarifaTipoVeiculo).HasName("pk_tb_dep_tarifas_tipo_veiculos");

            entity.ToTable("tb_dep_tarifas_tipo_veiculos");

            entity.HasIndex(e => e.IdTarifa, "idx_tb_dep_tarifas_tipo_veiculos1");

            entity.HasIndex(e => e.IdTipoVeiculo, "idx_tb_dep_tarifas_tipo_veiculos2");

            entity.Property(e => e.IdTarifaTipoVeiculo).HasColumnName("id_tarifa_tipo_veiculo");
            entity.Property(e => e.IdTarifa).HasColumnName("id_tarifa");
            entity.Property(e => e.IdTipoVeiculo).HasColumnName("id_tipo_veiculo");

            entity.HasOne(d => d.IdTarifaNavigation).WithMany(p => p.TbDepTarifasTipoVeiculos)
                .HasForeignKey(d => d.IdTarifa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_tarifas_tipo_veiculos1");

            entity.HasOne(d => d.IdTipoVeiculoNavigation).WithMany(p => p.TbDepTarifasTipoVeiculos)
                .HasForeignKey(d => d.IdTipoVeiculo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_tarifas_tipo_veiculos2");
        });

        modelBuilder.Entity<TbDepTipoCancelamentoGrv>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tb_dep_tipo_cancelamento_grv");

            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.IdTipoCancelamentoGrv)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_tipo_cancelamento_grv");
        });

        modelBuilder.Entity<TbDepTipoVeiculo>(entity =>
        {
            entity.HasKey(e => e.IdTipoVeiculo).HasName("pk_tb_dep_tipo_veiculos");

            entity.ToTable("tb_dep_tipo_veiculos", tb => tb.HasTrigger("tr_log_upd_tipo_veiculos"));

            entity.HasIndex(e => e.Descricao, "idx_tb_dep_tipo_veiculos1").IsUnique();

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_tipo_veiculos2");

            entity.HasIndex(e => e.IdUsuarioAlteracao, "idx_tb_dep_tipo_veiculos3");

            entity.Property(e => e.IdTipoVeiculo)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_tipo_veiculo");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.FlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasColumnName("flag_ativo");
            entity.Property(e => e.FlagNaoRequerCnhNaLiberacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_nao_requer_cnh_na_liberacao");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");

            entity.HasOne(d => d.IdUsuarioAlteracaoNavigation).WithMany(p => p.TbDepTipoVeiculoIdUsuarioAlteracaoNavigations)
                .HasForeignKey(d => d.IdUsuarioAlteracao)
                .HasConstraintName("fk_tb_dep_tipo_veiculos2");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.TbDepTipoVeiculoIdUsuarioCadastroNavigations)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_tipo_veiculos1");
        });

        modelBuilder.Entity<TbDepTipoVeiculosClassificacao>(entity =>
        {
            entity.HasKey(e => e.IdTipoVeiculoClassificacao).HasName("pk_tb_dep_tipo_veiculos_classificacao");

            entity.ToTable("tb_dep_tipo_veiculos_classificacao");

            entity.HasIndex(e => e.IdTipoVeiculo, "idx_tb_dep_tipo_veiculos1");

            entity.Property(e => e.IdTipoVeiculoClassificacao)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_tipo_veiculo_classificacao");
            entity.Property(e => e.IdTipoVeiculo).HasColumnName("id_tipo_veiculo");
            entity.Property(e => e.IdTipoVeiculoClassificacaoNome).HasColumnName("id_tipo_veiculo_classificacao_nome");

            entity.HasOne(d => d.IdTipoVeiculoNavigation).WithMany(p => p.TbDepTipoVeiculosClassificacaos)
                .HasForeignKey(d => d.IdTipoVeiculo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_tipo_veiculos_classificacao2");

            entity.HasOne(d => d.IdTipoVeiculoClassificacaoNomeNavigation).WithMany(p => p.TbDepTipoVeiculosClassificacaos)
                .HasForeignKey(d => d.IdTipoVeiculoClassificacaoNome)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_tipo_veiculos_classificacao1");
        });

        modelBuilder.Entity<TbDepTipoVeiculosClassificacaoNome>(entity =>
        {
            entity.HasKey(e => e.IdTipoVeiculoClassificacaoNome).HasName("pk_tb_dep_tipo_veiculos_classificacao_nome");

            entity.ToTable("tb_dep_tipo_veiculos_classificacao_nome");

            entity.Property(e => e.IdTipoVeiculoClassificacaoNome)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_tipo_veiculo_classificacao_nome");
            entity.Property(e => e.Classificacao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("classificacao");
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descricao");
        });

        modelBuilder.Entity<TbDepTipoVeiculosEquipamentosAssociacao>(entity =>
        {
            entity.HasKey(e => e.IdTipoVeiculoEquipamentoAssociacao).HasName("pk_tb_dep_tipo_veiculos_equipamentos_associacao");

            entity.ToTable("tb_dep_tipo_veiculos_equipamentos_associacao");

            entity.HasIndex(e => new { e.IdTipoVeiculo, e.IdEquipamentoOpcional }, "idx_tb_dep_tipo_veiculos_equipamentos_associacao1").IsUnique();

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_tipo_veiculos_equipamentos_associacao2");

            entity.Property(e => e.IdTipoVeiculoEquipamentoAssociacao).HasColumnName("id_tipo_veiculo_equipamento_associacao");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.IdEquipamentoOpcional)
                .HasColumnType("numeric(3, 0)")
                .HasColumnName("id_equipamento_opcional");
            entity.Property(e => e.IdTipoVeiculo).HasColumnName("id_tipo_veiculo");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");

            entity.HasOne(d => d.IdEquipamentoOpcionalNavigation).WithMany(p => p.TbDepTipoVeiculosEquipamentosAssociacaos)
                .HasForeignKey(d => d.IdEquipamentoOpcional)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_tipo_veiculos_equipamentos_associacao2");

            entity.HasOne(d => d.IdTipoVeiculoNavigation).WithMany(p => p.TbDepTipoVeiculosEquipamentosAssociacaos)
                .HasForeignKey(d => d.IdTipoVeiculo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_tipo_veiculos_equipamentos_associacao1");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.TbDepTipoVeiculosEquipamentosAssociacaos)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_tipo_veiculos_equipamentos_associacao3");
        });

        modelBuilder.Entity<TbDepTiposCobrancasLegai>(entity =>
        {
            entity.HasKey(e => e.IdTipoCobrancaLegal).HasName("pk_tb_dep_tipos_cobrancas_legais");

            entity.ToTable("tb_dep_tipos_cobrancas_legais");

            entity.Property(e => e.IdTipoCobrancaLegal)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_tipo_cobranca_legal");
            entity.Property(e => e.Descricao)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("descricao");
        });

        modelBuilder.Entity<TbDepTiposCombustivei>(entity =>
        {
            entity.HasKey(e => e.IdTipoCombustivel).HasName("pk_tb_dep_tipos_combustiveis1");

            entity.ToTable("tb_dep_tipos_combustiveis", tb => tb.HasTrigger("tr_log_upd_tipos_combustiveis"));

            entity.HasIndex(e => e.IdTipoCombustivel, "idx_tb_dep_tipos_combustiveis1");

            entity.HasIndex(e => e.Descricao, "idx_tb_dep_tipos_combustiveis2").IsUnique();

            entity.HasIndex(e => e.IdUsuario, "idx_tb_dep_tipos_combustiveis3");

            entity.Property(e => e.IdTipoCombustivel)
                .ValueGeneratedOnAdd()
                .HasColumnType("numeric(2, 0)")
                .HasColumnName("id_tipo_combustivel");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasColumnName("status");

            entity.HasOne(d => d.IdUsuarioNavigation).WithMany(p => p.TbDepTiposCombustiveis)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_tipos_combustiveis1");
        });

        modelBuilder.Entity<TbDepTiposMeiosCobranca>(entity =>
        {
            entity.HasKey(e => e.IdTipoMeioCobranca).HasName("pk_tb_dep_tipos_meios_cobrancas");

            entity.ToTable("tb_dep_tipos_meios_cobrancas");

            entity.Property(e => e.IdTipoMeioCobranca)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_tipo_meio_cobranca");
            entity.Property(e => e.Alias)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("alias");
            entity.Property(e => e.CodigoSap)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codigo_sap");
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.DocumentoImpressao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("documento_impressao");
            entity.Property(e => e.FlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_ativo");
            entity.Property(e => e.FlagBanco)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasColumnName("flag_banco");
            entity.Property(e => e.FlagPossuiCodigoAutorizacaoCartao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_possui_codigo_autorizacao_cartao");
            entity.Property(e => e.IdSapCondicaoPagamento).HasColumnName("id_sap_condicao_pagamento");
        });

        modelBuilder.Entity<TbDepUsuario>(entity =>
        {
            entity.HasKey(e => e.IdUsuario).HasName("pk_tb_dep_usuarios1");

            entity.ToTable("tb_dep_usuarios", tb => tb.HasTrigger("tr_log_upd_usuarios"));

            entity.HasIndex(e => e.Login, "IDX_tb_dep_usuarios1").IsUnique();

            entity.HasIndex(e => e.PessoaId, "IDX_tb_dep_usuarios2");

            entity.HasIndex(e => e.IdUsuarioCadastro, "IDX_tb_dep_usuarios3");

            entity.HasIndex(e => e.IdUsuarioAlteracao, "IDX_tb_dep_usuarios4");

            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataCadastroSenha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro_senha");
            entity.Property(e => e.DataUltimoAcesso)
                .HasColumnType("datetime")
                .HasColumnName("data_ultimo_acesso");
            entity.Property(e => e.Dummy)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dummy");
            entity.Property(e => e.Email)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.FlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasColumnName("flag_ativo");
            entity.Property(e => e.FlagPermissaoDataRetroativaFaturamento)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_permissao_data_retroativa_faturamento");
            entity.Property(e => e.FlagPermissaoDesconto)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_permissao_desconto");
            entity.Property(e => e.FlagReceberEmailErro)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("flag_receber_email_erro");
            entity.Property(e => e.IdFuncionario).HasColumnName("id_funcionario");
            entity.Property(e => e.IdTipoOperador).HasColumnName("id_tipo_operador");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.Login)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("login");
            entity.Property(e => e.Matricula)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("matricula");
            entity.Property(e => e.PessoaId).HasColumnName("PessoaID");
            entity.Property(e => e.Senha1)
                .IsRequired()
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasDefaultValueSql("(hashbytes('MD5','NONE'))")
                .HasColumnName("senha1");
            entity.Property(e => e.Senha2)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("senha2");
            entity.Property(e => e.Senha3)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("senha3");
            entity.Property(e => e.Senha4)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("senha4");
            entity.Property(e => e.Senha5)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("senha5");
            entity.Property(e => e.SenhaAndroid)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("senha_android");

            entity.HasOne(d => d.IdUsuarioAlteracaoNavigation).WithMany(p => p.InverseIdUsuarioAlteracaoNavigation)
                .HasForeignKey(d => d.IdUsuarioAlteracao)
                .HasConstraintName("fk_tb_dep_usuarios3");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.InverseIdUsuarioCadastroNavigation)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_usuarios2");
        });

        modelBuilder.Entity<TbDepUsuariosCliente>(entity =>
        {
            entity.HasKey(e => e.IdUsuarioCliente).HasName("pk_tb_dep_usuarios_clientes1");

            entity.ToTable("tb_dep_usuarios_clientes", tb => tb.HasTrigger("tr_log_upd_usuarios_clientes"));

            entity.HasIndex(e => e.IdUsuario, "idx_tb_dep_usuarios_clientes1");

            entity.HasIndex(e => e.IdCliente, "idx_tb_dep_usuarios_clientes2");

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_usuarios_clientes3");

            entity.HasIndex(e => new { e.IdUsuario, e.IdCliente }, "idx_tb_dep_usuarios_clientes4").IsUnique();

            entity.Property(e => e.IdUsuarioCliente).HasColumnName("id_usuario_cliente");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");

            entity.HasOne(d => d.IdClienteNavigation).WithMany(p => p.TbDepUsuariosClientes)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_usuarios_clientes2");

            entity.HasOne(d => d.IdUsuarioNavigation).WithMany(p => p.TbDepUsuariosClienteIdUsuarioNavigations)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_usuarios_clientes1");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.TbDepUsuariosClienteIdUsuarioCadastroNavigations)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_usuarios_clientes3");
        });

        modelBuilder.Entity<TbDepUsuariosDeposito>(entity =>
        {
            entity.HasKey(e => e.IdUsuarioDeposito).HasName("pk_tb_dep_usuarios_depositos1");

            entity.ToTable("tb_dep_usuarios_depositos", tb => tb.HasTrigger("tr_log_upd_usuarios_depositos"));

            entity.HasIndex(e => e.IdUsuario, "idx_tb_dep_usuarios_depositos1");

            entity.HasIndex(e => e.IdDeposito, "idx_tb_dep_usuarios_depositos2");

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_usuarios_depositos3");

            entity.HasIndex(e => new { e.IdUsuario, e.IdDeposito }, "idx_tb_dep_usuarios_depositos4").IsUnique();

            entity.Property(e => e.IdUsuarioDeposito).HasColumnName("id_usuario_deposito");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");

            entity.HasOne(d => d.IdDepositoNavigation).WithMany(p => p.TbDepUsuariosDepositos)
                .HasForeignKey(d => d.IdDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_usuarios_depositos2");

            entity.HasOne(d => d.IdUsuarioNavigation).WithMany(p => p.TbDepUsuariosDepositoIdUsuarioNavigations)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_usuarios_depositos1");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.TbDepUsuariosDepositoIdUsuarioCadastroNavigations)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_usuarios_depositos3");
        });

        modelBuilder.Entity<TbDepUsuariosPermisso>(entity =>
        {
            entity.HasKey(e => e.IdUsuarioPermissao).HasName("pk_tb_dep_usuarios_permissoes");

            entity.ToTable("tb_dep_usuarios_permissoes");

            entity.HasIndex(e => new { e.IdTipoPermissao, e.IdUsuario }, "idx_tb_dep_usuarios_permissoes1").IsUnique();

            entity.HasIndex(e => e.IdUsuario, "idx_tb_dep_usuarios_permissoes2");

            entity.HasIndex(e => e.IdUsuarioCadastro, "idx_tb_dep_usuarios_permissoes3");

            entity.HasIndex(e => e.IdUsuarioAlteracao, "idx_tb_dep_usuarios_permissoes4");

            entity.Property(e => e.IdUsuarioPermissao).HasColumnName("id_usuario_permissao");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.FlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasColumnName("flag_ativo");
            entity.Property(e => e.IdTipoPermissao).HasColumnName("id_tipo_permissao");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");

            entity.HasOne(d => d.IdTipoPermissaoNavigation).WithMany(p => p.TbDepUsuariosPermissos)
                .HasForeignKey(d => d.IdTipoPermissao)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_usuarios_permissoes1");

            entity.HasOne(d => d.IdUsuarioNavigation).WithMany(p => p.TbDepUsuariosPermissoIdUsuarioNavigations)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_usuarios_permissoes2");

            entity.HasOne(d => d.IdUsuarioAlteracaoNavigation).WithMany(p => p.TbDepUsuariosPermissoIdUsuarioAlteracaoNavigations)
                .HasForeignKey(d => d.IdUsuarioAlteracao)
                .HasConstraintName("fk_tb_dep_usuarios_permissoes4");

            entity.HasOne(d => d.IdUsuarioCadastroNavigation).WithMany(p => p.TbDepUsuariosPermissoIdUsuarioCadastroNavigations)
                .HasForeignKey(d => d.IdUsuarioCadastro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_usuarios_permissoes3");
        });

        modelBuilder.Entity<TbDepUsuariosTiposPermisso>(entity =>
        {
            entity.HasKey(e => e.IdTipoPermissao).HasName("pk_tb_dep_usuarios_tipos_permissoes");

            entity.ToTable("tb_dep_usuarios_tipos_permissoes");

            entity.HasIndex(e => e.Codigo, "idx_tb_dep_usuarios_tipos_permissoes1").IsUnique();

            entity.Property(e => e.IdTipoPermissao).HasColumnName("id_tipo_permissao");
            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("codigo");
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("descricao");
        });

        modelBuilder.Entity<TbDepUsuariosWa>(entity =>
        {
            entity.HasKey(e => e.IdUsuario);

            entity.ToTable("tb_dep_usuarios_wa");

            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.Cpf)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("cpf");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("datetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataConfirmacao)
                .HasColumnType("datetime")
                .HasColumnName("data_confirmacao");
            entity.Property(e => e.DataNascimento)
                .HasColumnType("date")
                .HasColumnName("data_nascimento");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.Nome)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("nome");
            entity.Property(e => e.Senha)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("senha");
        });

        modelBuilder.Entity<TbDepWsUrl>(entity =>
        {
            entity.HasKey(e => e.WsUrlId).HasName("pk_tb_dep_ws_urls");

            entity.ToTable("tb_dep_ws_urls");

            entity.Property(e => e.WsUrlId).ValueGeneratedOnAdd();
            entity.Property(e => e.WsName)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.WsPassword)
                .HasMaxLength(32)
                .IsUnicode(false);
            entity.Property(e => e.WsUrl)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.WsUsername)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TbImpDsinRelatorioSilver>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tb_imp_dsin_relatorio_silver");

            entity.HasIndex(e => e.ClienteId, "IDX_tb_imp_dsin_relatorio_silver1");

            entity.HasIndex(e => e.DepositoId, "IDX_tb_imp_dsin_relatorio_silver2");

            entity.HasIndex(e => e.NumRecolhimento, "IDX_tb_imp_dsin_relatorio_silver3");

            entity.HasIndex(e => e.Placa, "IDX_tb_imp_dsin_relatorio_silver4");

            entity.Property(e => e.AnoFabricacao)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AnoModelo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Arquivo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Auxiliares)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Br)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("BR");
            entity.Property(e => e.Chassi)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Cor)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CpfCnpjProprietario)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DataHoraRecolhimento).HasColumnType("smalldatetime");
            entity.Property(e => e.Delegacia)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.EndPropBairro)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.EndPropCep)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.EndPropCepErrado)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.EndPropCidade)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.EndPropUf)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EndPropUF");
            entity.Property(e => e.EnderecoProprietario)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FlagImportado)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength();
            entity.Property(e => e.FlagNormalizado)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength();
            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.Km)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("KM");
            entity.Property(e => e.LicExterior)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MarcaModelo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MatrResponsavel)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MotivoRecolhimento)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Motor)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NomeProprietario)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NumRecolhimento)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OcorrenciasDiversas)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PatioMunicipio)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PatioNome)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PatioSitConvenio)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PatioUf)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PatioUF");
            entity.Property(e => e.Placa)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Regional)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Renavam)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RestrAcidenteGrandeMonta)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RestrAcidenteMediaMonta)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RestrAcidentePerdaTotal)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RestrAdministrativa)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RestrAlertaMais72H)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RestrAlertaMenos72H)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RestrAlienacaoFiduciaria)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RestrArrendamento)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RestrBaixaAlieOrdemJudicial)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RestrComunicacaoVenda)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RestrExecucao)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RestrIndicadorRecallAtivo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RestrJudicial)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RestrPenhorMercantil)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RestrPenhorVeiculo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RestrReceitaFederal)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RestrReservaDominio)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RestrRouboFurto)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RestrVeiculoBaixado)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TipoProprietario)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TipoVeiculo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UfEmplacamento)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UltimaConsulta).HasColumnType("smalldatetime");
        });

        modelBuilder.Entity<TbLogAcesso>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tb_log_acessos");

            entity.HasIndex(e => e.IdUsuario, "idx_tb_dep_log_acessos1");

            entity.Property(e => e.DataHoraAcesso)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("data_hora_acesso");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");

            entity.HasOne(d => d.IdUsuarioNavigation).WithMany()
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_dep_log_acessos1");
        });

        modelBuilder.Entity<TbLogAgenciasBancaria>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_agencias_bancarias");

            entity.ToTable("tb_log_agencias_bancarias");

            entity.HasIndex(e => e.IdAgenciaBancaria, "idx_tb_log_agencias_bancarias1");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CodigoAgencia)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("codigo_agencia");
            entity.Property(e => e.CodigoCedente)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("codigo_cedente");
            entity.Property(e => e.ContaCorrente)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("conta_corrente");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DigitoVerificador)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("digito_verificador");
            entity.Property(e => e.FlagAtivo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_ativo");
            entity.Property(e => e.IdAgenciaBancaria).HasColumnName("id_agencia_bancaria");
            entity.Property(e => e.IdBanco).HasColumnName("id_banco");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.SacadoCarteira)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("sacado_carteira");
            entity.Property(e => e.SapCodigoBanco)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("sap_codigo_banco");
        });

        modelBuilder.Entity<TbLogAgente>(entity =>
        {
            entity.ToTable("tb_log_agentes");

            entity.HasIndex(e => e.UsuarioCrudId, "IDX_tb_log_agentes1");

            entity.HasIndex(e => e.AgenteId, "IDX_tb_log_agentes2");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.AgenteId).HasColumnName("AgenteID");
            entity.Property(e => e.AutoridadeDivisaoId).HasColumnName("AutoridadeDivisaoID");
            entity.Property(e => e.AutoridadeResponsavelId).HasColumnName("AutoridadeResponsavelID");
            entity.Property(e => e.Crud)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DataAlteracao).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCadastro).HasColumnType("smalldatetime");
            entity.Property(e => e.DataDesativacao).HasColumnType("smalldatetime");
            entity.Property(e => e.DataHoraLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.DataUltimaAlteracaoSenha).HasColumnType("smalldatetime");
            entity.Property(e => e.DataUltimoLogin).HasColumnType("smalldatetime");
            entity.Property(e => e.FlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Login)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Matricula)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Nome)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OrgaoEmissorId).HasColumnName("OrgaoEmissorID");
            entity.Property(e => e.Senha)
                .IsRequired()
                .HasMaxLength(32)
                .IsUnicode(false);
            entity.Property(e => e.TipoProfissaoId).HasColumnName("TipoProfissaoID");
            entity.Property(e => e.UsuarioAlteracaoId).HasColumnName("UsuarioAlteracaoID");
            entity.Property(e => e.UsuarioCadastroId).HasColumnName("UsuarioCadastroID");
            entity.Property(e => e.UsuarioCrudId).HasColumnName("UsuarioCrudID");
        });

        modelBuilder.Entity<TbLogAlterdataConfiguracao>(entity =>
        {
            entity.HasKey(e => e.LogId);

            entity.ToTable("tb_log_alterdata_configuracao");

            entity.HasIndex(e => e.AlterDataConfiguracaoId, "IDX_tb_log_alterdata_configuracao1");

            entity.HasIndex(e => e.UsuarioCrudId, "IDX_tb_log_alterdata_configuracao2");

            entity.Property(e => e.CodigoEmpresa)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Crud)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DataAlteracao).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCadastro).HasColumnType("smalldatetime");
            entity.Property(e => e.DatahoraLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
        });

        modelBuilder.Entity<TbLogAlterdataOperacao>(entity =>
        {
            entity.HasKey(e => e.LogId);

            entity.ToTable("tb_log_alterdata_operacao");

            entity.HasIndex(e => e.AlterDataOperacaoId, "IDX_tb_log_alterdata_operacao1");

            entity.HasIndex(e => e.UsuarioCrudId, "IDX_tb_log_alterdata_operacao2");

            entity.Property(e => e.Crud)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DataAlteracao).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCadastro).HasColumnType("smalldatetime");
            entity.Property(e => e.DatahoraLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
        });

        modelBuilder.Entity<TbLogAtendimento>(entity =>
        {
            entity.ToTable("tb_log_atendimento");

            entity.HasIndex(e => e.IdGrv, "idx_tb_log_atendimento1");

            entity.HasIndex(e => e.IdAtendimento, "idx_tb_log_atendimento2");

            entity.HasIndex(e => e.UsuarioCrudId, "idx_tb_log_atendimento3");

            entity.Property(e => e.Crud)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('U')")
                .IsFixedLength();
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataHoraInicioAtendimento)
                .HasColumnType("datetime")
                .HasColumnName("data_hora_inicio_atendimento");
            entity.Property(e => e.DataHoraLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.DataImpressao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_impressao");
            entity.Property(e => e.FlagAtendimentoWs)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_atendimento_ws");
            entity.Property(e => e.FlagPagamentoFinanciado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_pagamento_financiado");
            entity.Property(e => e.FormaLiberacao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("forma_liberacao");
            entity.Property(e => e.FormaLiberacaoCnh)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("forma_liberacao_cnh");
            entity.Property(e => e.FormaLiberacaoCpf)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("forma_liberacao_cpf");
            entity.Property(e => e.FormaLiberacaoNome)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("forma_liberacao_nome");
            entity.Property(e => e.FormaLiberacaoPlaca)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("forma_liberacao_placa");
            entity.Property(e => e.IdAtendimento).HasColumnName("id_atendimento");
            entity.Property(e => e.IdDocumentoSap)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_documento_sap");
            entity.Property(e => e.IdEmpresaFaturamento).HasColumnName("id_empresa_faturamento");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdPessoaFaturamento).HasColumnName("id_pessoa_faturamento");
            entity.Property(e => e.IdQualificacaoResponsavel).HasColumnName("id_qualificacao_responsavel");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.Mensagem)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.NotaFiscalBairro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_bairro");
            entity.Property(e => e.NotaFiscalCep)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nota_fiscal_cep");
            entity.Property(e => e.NotaFiscalComplemento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_complemento");
            entity.Property(e => e.NotaFiscalCpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_cpf");
            entity.Property(e => e.NotaFiscalDdd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nota_fiscal_ddd");
            entity.Property(e => e.NotaFiscalEmail)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_email");
            entity.Property(e => e.NotaFiscalEndereco)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_endereco");
            entity.Property(e => e.NotaFiscalIdTipoLogradouro).HasColumnName("nota_fiscal_id_tipo_logradouro");
            entity.Property(e => e.NotaFiscalInscricaoMunicipal)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_inscricao_municipal");
            entity.Property(e => e.NotaFiscalMunicipio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_municipio");
            entity.Property(e => e.NotaFiscalNome)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_nome");
            entity.Property(e => e.NotaFiscalNumero)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_numero");
            entity.Property(e => e.NotaFiscalTelefone)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_telefone");
            entity.Property(e => e.NotaFiscalUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nota_fiscal_uf");
            entity.Property(e => e.ProprietarioBairro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("proprietario_bairro");
            entity.Property(e => e.ProprietarioCep)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("proprietario_cep");
            entity.Property(e => e.ProprietarioComplemento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("proprietario_complemento");
            entity.Property(e => e.ProprietarioDdd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("proprietario_ddd");
            entity.Property(e => e.ProprietarioDocumento)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("proprietario_documento");
            entity.Property(e => e.ProprietarioEndereco)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("proprietario_endereco");
            entity.Property(e => e.ProprietarioIdTipoDocumento).HasColumnName("proprietario_id_tipo_documento");
            entity.Property(e => e.ProprietarioMunicipio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("proprietario_municipio");
            entity.Property(e => e.ProprietarioNome)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("proprietario_nome");
            entity.Property(e => e.ProprietarioNumero)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("proprietario_numero");
            entity.Property(e => e.ProprietarioTelefone)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("proprietario_telefone");
            entity.Property(e => e.ProprietarioUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("proprietario_uf");
            entity.Property(e => e.ResponsavelBairro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("responsavel_bairro");
            entity.Property(e => e.ResponsavelCep)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("responsavel_cep");
            entity.Property(e => e.ResponsavelCnh)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("responsavel_cnh");
            entity.Property(e => e.ResponsavelComplemento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("responsavel_complemento");
            entity.Property(e => e.ResponsavelDdd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("responsavel_ddd");
            entity.Property(e => e.ResponsavelDocumento)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("responsavel_documento");
            entity.Property(e => e.ResponsavelEndereco)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("responsavel_endereco");
            entity.Property(e => e.ResponsavelMunicipio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("responsavel_municipio");
            entity.Property(e => e.ResponsavelNome)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("responsavel_nome");
            entity.Property(e => e.ResponsavelNumero)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("responsavel_numero");
            entity.Property(e => e.ResponsavelTelefone)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("responsavel_telefone");
            entity.Property(e => e.ResponsavelUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("responsavel_uf");
            entity.Property(e => e.StatusCadastroOrdensVendaSap)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status_cadastro_ordens_venda_sap");
            entity.Property(e => e.StatusCadastroSap)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status_cadastro_sap");
            entity.Property(e => e.TotalImpressoes).HasColumnName("total_impressoes");
        });

        modelBuilder.Entity<TbLogAtendimentoExclusao>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_atendimento_exclusao");

            entity.ToTable("tb_log_atendimento_exclusao");

            entity.HasIndex(e => e.IdGrv, "idx_tb_log_atendimento_exclusao1");

            entity.HasIndex(e => e.IdAtendimento, "idx_tb_log_atendimento_exclusao2");

            entity.HasIndex(e => e.IdUsuario, "idx_tb_log_atendimento_exclusao3");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DatahoraLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("datahora_log");
            entity.Property(e => e.IdAtendimento).HasColumnName("id_atendimento");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.Motivo)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("motivo");
        });

        modelBuilder.Entity<TbLogAtendimentoFotosResponsavei>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_atendimento_fotos_responsaveis");

            entity.ToTable("tb_log_atendimento_fotos_responsaveis");

            entity.HasIndex(e => e.IdUsuarioCrud, "idx_tb_log_atendimento_fotos_responsaveis1");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Crud)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("crud");
            entity.Property(e => e.DatahoraLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("datahora_log");
            entity.Property(e => e.Foto).HasColumnName("foto");
            entity.Property(e => e.IdAtendimento).HasColumnName("id_atendimento");
            entity.Property(e => e.IdAtendimentoFotoResponsavel).HasColumnName("id_atendimento_foto_responsavel");
            entity.Property(e => e.IdUsuarioCrud).HasColumnName("id_usuario_crud");
        });

        modelBuilder.Entity<TbLogAtendimentoOld>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tb_log_atendimento_old");

            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataHoraInicioAtendimento)
                .HasColumnType("datetime")
                .HasColumnName("data_hora_inicio_atendimento");
            entity.Property(e => e.DataImpressao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_impressao");
            entity.Property(e => e.DatahoraLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("datahora_log");
            entity.Property(e => e.FlagAtendimentoWs)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_atendimento_ws");
            entity.Property(e => e.FlagPagamentoFinanciado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_pagamento_financiado");
            entity.Property(e => e.FormaLiberacao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("forma_liberacao");
            entity.Property(e => e.FormaLiberacaoCnh)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("forma_liberacao_cnh");
            entity.Property(e => e.FormaLiberacaoCpf)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("forma_liberacao_cpf");
            entity.Property(e => e.FormaLiberacaoNome)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("forma_liberacao_nome");
            entity.Property(e => e.FormaLiberacaoPlaca)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("forma_liberacao_placa");
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("id");
            entity.Property(e => e.IdAtendimento).HasColumnName("id_atendimento");
            entity.Property(e => e.IdDocumentoSap)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_documento_sap");
            entity.Property(e => e.IdEmpresaFaturamento).HasColumnName("id_empresa_faturamento");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdPessoaFaturamento).HasColumnName("id_pessoa_faturamento");
            entity.Property(e => e.IdQualificacaoResponsavel).HasColumnName("id_qualificacao_responsavel");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.NotaFiscalBairro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_bairro");
            entity.Property(e => e.NotaFiscalCep)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nota_fiscal_cep");
            entity.Property(e => e.NotaFiscalComplemento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_complemento");
            entity.Property(e => e.NotaFiscalCpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_cpf");
            entity.Property(e => e.NotaFiscalDdd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nota_fiscal_ddd");
            entity.Property(e => e.NotaFiscalEmail)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_email");
            entity.Property(e => e.NotaFiscalEndereco)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_endereco");
            entity.Property(e => e.NotaFiscalIdTipoLogradouro).HasColumnName("nota_fiscal_id_tipo_logradouro");
            entity.Property(e => e.NotaFiscalInscricaoMunicipal)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_inscricao_municipal");
            entity.Property(e => e.NotaFiscalMunicipio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_municipio");
            entity.Property(e => e.NotaFiscalNome)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_nome");
            entity.Property(e => e.NotaFiscalNumero)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_numero");
            entity.Property(e => e.NotaFiscalTelefone)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_telefone");
            entity.Property(e => e.NotaFiscalUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nota_fiscal_uf");
            entity.Property(e => e.ProprietarioBairro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("proprietario_bairro");
            entity.Property(e => e.ProprietarioCep)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("proprietario_cep");
            entity.Property(e => e.ProprietarioComplemento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("proprietario_complemento");
            entity.Property(e => e.ProprietarioDdd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("proprietario_ddd");
            entity.Property(e => e.ProprietarioDocumento)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("proprietario_documento");
            entity.Property(e => e.ProprietarioEndereco)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("proprietario_endereco");
            entity.Property(e => e.ProprietarioIdTipoDocumento).HasColumnName("proprietario_id_tipo_documento");
            entity.Property(e => e.ProprietarioMunicipio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("proprietario_municipio");
            entity.Property(e => e.ProprietarioNome)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("proprietario_nome");
            entity.Property(e => e.ProprietarioNumero)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("proprietario_numero");
            entity.Property(e => e.ProprietarioTelefone)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("proprietario_telefone");
            entity.Property(e => e.ProprietarioUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("proprietario_uf");
            entity.Property(e => e.ResponsavelBairro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("responsavel_bairro");
            entity.Property(e => e.ResponsavelCep)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("responsavel_cep");
            entity.Property(e => e.ResponsavelCnh)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("responsavel_cnh");
            entity.Property(e => e.ResponsavelComplemento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("responsavel_complemento");
            entity.Property(e => e.ResponsavelDdd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("responsavel_ddd");
            entity.Property(e => e.ResponsavelDocumento)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("responsavel_documento");
            entity.Property(e => e.ResponsavelEndereco)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("responsavel_endereco");
            entity.Property(e => e.ResponsavelMunicipio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("responsavel_municipio");
            entity.Property(e => e.ResponsavelNome)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("responsavel_nome");
            entity.Property(e => e.ResponsavelNumero)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("responsavel_numero");
            entity.Property(e => e.ResponsavelTelefone)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("responsavel_telefone");
            entity.Property(e => e.ResponsavelUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("responsavel_uf");
            entity.Property(e => e.StatusCadastroOrdensVendaSap)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status_cadastro_ordens_venda_sap");
            entity.Property(e => e.StatusCadastroSap)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status_cadastro_sap");
            entity.Property(e => e.TotalImpressoes).HasColumnName("total_impressoes");
        });

        modelBuilder.Entity<TbLogAutoridadesResponsavei>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_autoridades_responsaveis1");

            entity.ToTable("tb_log_autoridades_responsaveis");

            entity.HasIndex(e => e.IdAutoridadeResponsavel, "idx_tb_log_autoridades_responsaveis1");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.Divisao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("divisao");
            entity.Property(e => e.FlagAtivo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_ativo");
            entity.Property(e => e.IdAutoridadeResponsavel).HasColumnName("id_autoridade_responsavel");
            entity.Property(e => e.IdOrgaoEmissor).HasColumnName("id_orgao_emissor");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
        });

        modelBuilder.Entity<TbLogClassificaco>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_classificacoes1");

            entity.ToTable("tb_log_classificacoes");

            entity.HasIndex(e => e.IdClassificao, "idx_tb_log_classificacoes1");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.Descricao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.IdClassificao)
                .HasColumnType("numeric(3, 0)")
                .HasColumnName("id_classificao");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status");
        });

        modelBuilder.Entity<TbLogCliente>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_clientes");

            entity.ToTable("tb_log_clientes");

            entity.HasIndex(e => e.IdCliente, "idx_tb_log_clientes1");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Cnpj)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("cnpj");
            entity.Property(e => e.CodigoOrgao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("codigo_orgao");
            entity.Property(e => e.CodigoSap)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("codigo_sap");
            entity.Property(e => e.Complemento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("complemento");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DatahoraLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("datahora_log");
            entity.Property(e => e.FlagAtivo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_ativo");
            entity.Property(e => e.FlagCadastrarQuilometragem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_cadastrar_quilometragem");
            entity.Property(e => e.FlagClienteRealizaFaturamentoArrecadacao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_cliente_realiza_faturamento_arrecadacao");
            entity.Property(e => e.FlagCobrarDiariasDiasCorridos)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_cobrar_diarias_dias_corridos");
            entity.Property(e => e.FlagEmissaoNotaFiscalSap)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_emissao_nota_fiscal_sap");
            entity.Property(e => e.FlagEnderecoCadastroManual)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_endereco_cadastro_manual");
            entity.Property(e => e.FlagLancarIpvaMultas)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_lancar_ipva_multas");
            entity.Property(e => e.FlagPermiteAlteracaoTipoVeiculo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_permite_alteracao_tipo_veiculo");
            entity.Property(e => e.FlagPossuiClienteCodigoIdentificacao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_possui_cliente_codigo_identificacao");
            entity.Property(e => e.FlagPossuiPix)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FlagPossuiPixDinamico)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FlagPossuiPixEstatico)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FlagUsarHoraDiaria)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_usar_hora_diaria");
            entity.Property(e => e.GpsLatitude)
                .HasColumnType("numeric(10, 8)")
                .HasColumnName("gps_latitude");
            entity.Property(e => e.GpsLongitude)
                .HasColumnType("numeric(10, 8)")
                .HasColumnName("gps_longitude");
            entity.Property(e => e.HoraDiaria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("hora_diaria");
            entity.Property(e => e.IdAgenciaBancaria).HasColumnName("id_agencia_bancaria");
            entity.Property(e => e.IdBairro).HasColumnName("id_bairro");
            entity.Property(e => e.IdCep).HasColumnName("id_cep");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdEmpresa).HasColumnName("id_empresa");
            entity.Property(e => e.IdOrgaoExecutivoTransito).HasColumnName("id_orgao_executivo_transito");
            entity.Property(e => e.IdTipoLogradouro).HasColumnName("id_tipo_logradouro");
            entity.Property(e => e.IdTipoMeioCobranca).HasColumnName("id_tipo_meio_cobranca");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.LabelClienteCodigoIdentificacao)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("label_cliente_codigo_identificacao");
            entity.Property(e => e.Logradouro)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("logradouro");
            entity.Property(e => e.MaximoDiariasParaCobranca).HasColumnName("maximo_diarias_para_cobranca");
            entity.Property(e => e.MaximoDiasVencimento).HasColumnName("maximo_dias_vencimento");
            entity.Property(e => e.MetragemGuarda)
                .HasColumnType("numeric(5, 2)")
                .HasColumnName("metragem_guarda");
            entity.Property(e => e.MetragemTotal)
                .HasColumnType("numeric(5, 2)")
                .HasColumnName("metragem_total");
            entity.Property(e => e.Nome)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nome");
            entity.Property(e => e.Numero)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("numero");
            entity.Property(e => e.PixChave)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TipoPix)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TbLogClienteDepositoTiposVeiculo>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_cliente_deposito_tipos_veiculos");

            entity.ToTable("tb_log_cliente_deposito_tipos_veiculos");

            entity.HasIndex(e => e.IdClienteDepositoTipoVeiculo, "idx_tb_log_cliente_deposito_tipos_veiculos1");

            entity.HasIndex(e => e.IdUsuario, "idx_tb_log_cliente_deposito_tipos_veiculos2");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Coluna)
                .IsRequired()
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("coluna");
            entity.Property(e => e.Crud)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("crud");
            entity.Property(e => e.DatahoraLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("datahora_log");
            entity.Property(e => e.IdClienteDepositoTipoVeiculo).HasColumnName("id_cliente_deposito_tipo_veiculo");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.ValorAnterior)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("valor_anterior");
            entity.Property(e => e.ValorNovo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("valor_novo");

            entity.HasOne(d => d.IdUsuarioNavigation).WithMany(p => p.TbLogClienteDepositoTiposVeiculos)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_log_cliente_deposito_tipos_veiculos1");
        });

        modelBuilder.Entity<TbLogClientesDeposito>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_clientes_depositos");

            entity.ToTable("tb_log_clientes_depositos");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AliquotaIss).HasColumnType("smallmoney");
            entity.Property(e => e.CodigoDetran)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("codigo_detran");
            entity.Property(e => e.CodigoSap)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("codigo_sap");
            entity.Property(e => e.CodigoSapOrdemVendas)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codigo_sap_ordem_vendas");
            entity.Property(e => e.Crud)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataHoraLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.FlagAtivo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_ativo");
            entity.Property(e => e.FlagCadastrarGrvBloqueado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_cadastrar_grv_bloqueado");
            entity.Property(e => e.FlagUtilizaSistemaMobileGgv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_utiliza_sistema_mobile_ggv");
            entity.Property(e => e.FlagValorIssIgualProdutoBaseCalculoAliquota)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdClienteDeposito).HasColumnName("id_cliente_deposito");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdEmpresa).HasColumnName("id_empresa");
            entity.Property(e => e.IdOrgaoEmissor).HasColumnName("id_orgao_emissor");
            entity.Property(e => e.IdSistemaExterno)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("id_sistema_externo");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.UsuarioCrudId).HasColumnName("UsuarioCrudID");
        });

        modelBuilder.Entity<TbLogCondutor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_condutor1");

            entity.ToTable("tb_log_condutor");

            entity.HasIndex(e => e.IdGrv, "idx_tb_log_condutor1");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Celular)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("celular");
            entity.Property(e => e.CelularDdd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("celular_ddd");
            entity.Property(e => e.Documento)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("documento");
            entity.Property(e => e.Email)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.FlagChaveVeiculo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_chave_veiculo");
            entity.Property(e => e.FlagDocumentacaoVeiculo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_documentacao_veiculo");
            entity.Property(e => e.IdCondutor).HasColumnName("id_condutor");
            entity.Property(e => e.IdEnquadramentoInfracao)
                .HasColumnType("numeric(4, 0)")
                .HasColumnName("id_enquadramento_infracao");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdPessoa).HasColumnName("id_pessoa");
            entity.Property(e => e.Identidade)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("identidade");
            entity.Property(e => e.InformacoesAdicionais)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("informacoes_adicionais");
            entity.Property(e => e.Nome)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("nome");
            entity.Property(e => e.NumeroChaveVeiculo)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("numero_chave_veiculo");
            entity.Property(e => e.NumeroInfracao)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("numero_infracao");
            entity.Property(e => e.OrgaoExpedidor)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("orgao_expedidor");
            entity.Property(e => e.OutrosEquipamentos1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("outros_equipamentos1");
            entity.Property(e => e.OutrosEquipamentos2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("outros_equipamentos2");
            entity.Property(e => e.OutrosEquipamentos3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("outros_equipamentos3");
            entity.Property(e => e.OutrosEquipamentos4)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("outros_equipamentos4");
            entity.Property(e => e.OutrosEquipamentos5)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("outros_equipamentos5");
            entity.Property(e => e.StatusAssinaturaCondutor)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status_assinatura_condutor");
            entity.Property(e => e.Telefone)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("telefone");
            entity.Property(e => e.TelefoneDdd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("telefone_ddd");
        });

        modelBuilder.Entity<TbLogCondutorEquipamentosOpcionai>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_condutor_equipamentos_opcionais1");

            entity.ToTable("tb_log_condutor_equipamentos_opcionais");

            entity.HasIndex(e => e.IdGrv, "idx_tb_log_condutor_equipamentos_opcionais1");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Avariado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("avariado");
            entity.Property(e => e.CodAvaria).HasColumnName("cod_avaria");
            entity.Property(e => e.DataAtualizacao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_atualizacao");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.FlagPossuiEquipamento)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_possui_equipamento");
            entity.Property(e => e.IdCondutorEquipamentoOpcional).HasColumnName("id_condutor_equipamento_opcional");
            entity.Property(e => e.IdEquipamentoOpcional)
                .HasColumnType("numeric(3, 0)")
                .HasColumnName("id_equipamento_opcional");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdUsuarioAtualizacao).HasColumnName("id_usuario_atualizacao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
        });

        modelBuilder.Entity<TbLogConfiguraco>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_configuracoes");

            entity.ToTable("tb_log_configuracoes");

            entity.HasIndex(e => e.IdConfiguracao, "idx_tb_log_configuracoes1");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CheckUrl)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("check_url");
            entity.Property(e => e.DataHoraLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.DataNovaVersao)
                .HasColumnType("datetime")
                .HasColumnName("data_nova_versao");
            entity.Property(e => e.FlagAtualizacaoObrigatoria)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_atualizacao_obrigatoria");
            entity.Property(e => e.FlagDetranDesenvolvimentoOnline)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_detran_desenvolvimento_online");
            entity.Property(e => e.FlagDetranOnline)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_detran_online");
            entity.Property(e => e.FlagDetranProducaoOnline)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_detran_producao_online");
            entity.Property(e => e.FlagServicosWindowsAtivos)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_servicos_windows_ativos");
            entity.Property(e => e.FtpGrvDocumentosIp)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("FtpGrvDocumentosIP");
            entity.Property(e => e.FtpGrvDocumentosPass)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.FtpGrvDocumentosUser)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.HorarioVerao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.HostName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(host_name())");
            entity.Property(e => e.IdConfiguracao).HasColumnName("id_configuracao");
            entity.Property(e => e.PixPassword)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PixUrl)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PixUsername)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RepositorioArquivoNomeBucket)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RepositorioArquivoPassword)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RepositorioArquivoUrl)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RepositorioArquivoUsername)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SystemUpdateFtpHost)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SystemUpdateFtpPassword)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.SystemUpdateFtpPort)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.SystemUpdateFtpUserName)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.SystemUpdateInstallDirectory)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.TamanhoMaximoArquivoEnvioServidor).HasColumnName("tamanho_maximo_arquivo_envio_servidor");
            entity.Property(e => e.VersaoSistema)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("versao_sistema");
        });

        modelBuilder.Entity<TbLogDeposito>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_depositos");

            entity.ToTable("tb_log_depositos");

            entity.HasIndex(e => e.IdDeposito, "idx_tb_log_depositos1");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Complemento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("complemento");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DatahoraLog)
                .HasColumnType("smalldatetime")
                .HasColumnName("datahora_log");
            entity.Property(e => e.Descricao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.EmailNfe)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("email_nfe");
            entity.Property(e => e.EnderecoMob)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("endereco_mob");
            entity.Property(e => e.FlagAtivo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_ativo");
            entity.Property(e => e.FlagEnderecoCadastroManual)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_endereco_cadastro_manual");
            entity.Property(e => e.FlagVirtual)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_virtual");
            entity.Property(e => e.GrvLimiteMinimoDatahoraGuarda).HasColumnName("grv_limite_minimo_datahora_guarda");
            entity.Property(e => e.GrvMinimoFotosExigidas).HasColumnName("grv_minimo_fotos_exigidas");
            entity.Property(e => e.IdBairro).HasColumnName("id_bairro");
            entity.Property(e => e.IdCep).HasColumnName("id_cep");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdEmpresa).HasColumnName("id_empresa");
            entity.Property(e => e.IdSistemaExterno).HasColumnName("id_sistema_externo");
            entity.Property(e => e.IdTipoLogradouro).HasColumnName("id_tipo_logradouro");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.Latitude)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("latitude");
            entity.Property(e => e.Logradouro)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("logradouro");
            entity.Property(e => e.Longitude)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("longitude");
            entity.Property(e => e.Numero)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("numero");
            entity.Property(e => e.TelefoneMob)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("telefone_mob");
        });

        modelBuilder.Entity<TbLogDetroGrv>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_detro_grv");

            entity.ToTable("tb_log_detro_grv");

            entity.HasIndex(e => e.IdDetroGrv, "idx_tb_log_detro_grv1");

            entity.HasIndex(e => e.IdUsuario, "idx_tb_log_detro_grv2");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Coluna)
                .IsRequired()
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("coluna");
            entity.Property(e => e.Crud)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("crud");
            entity.Property(e => e.DatahoraLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("datahora_log");
            entity.Property(e => e.IdDetroGrv).HasColumnName("id_detro_grv");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.ValorAnterior)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("valor_anterior");
            entity.Property(e => e.ValorNovo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("valor_novo");

            entity.HasOne(d => d.IdUsuarioNavigation).WithMany(p => p.TbLogDetroGrvs)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tb_log_detro_grv1");
        });

        modelBuilder.Entity<TbLogEnquadramentoInfraco>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_enquadramento_infracoes1");

            entity.ToTable("tb_log_enquadramento_infracoes");

            entity.HasIndex(e => e.IdEnquadramentoInfracao, "idx_tb_log_enquadramento_infracoes1");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Artigo).HasColumnName("artigo");
            entity.Property(e => e.CodigoInfracao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("codigo_infracao");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.Descricao)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.IdEnquadramentoInfracao)
                .HasColumnType("numeric(4, 0)")
                .HasColumnName("id_enquadramento_infracao");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.Inciso)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("inciso");
            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status");
        });

        modelBuilder.Entity<TbLogEquipamentosOpcionai>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_equipamentos_opcionais1");

            entity.ToTable("tb_log_equipamentos_opcionais");

            entity.HasIndex(e => e.IdEquipamentoOpcional, "idx_tb_log_equipamentos_opcionais1");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DatahoraLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("datahora_log");
            entity.Property(e => e.Descricao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.IdEquipamentoOpcional)
                .HasColumnType("numeric(3, 0)")
                .HasColumnName("id_equipamento_opcional");
            entity.Property(e => e.IdEquipamentoOpcionalLocalizacao).HasColumnName("id_equipamento_opcional_localizacao");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.ItemObrigatorio)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("item_obrigatorio");
            entity.Property(e => e.ItemOcorrenciaDetranBa)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("item_ocorrencia_detran_ba");
            entity.Property(e => e.OrdemVistoria).HasColumnName("ordem_vistoria");
            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status");
        });

        modelBuilder.Entity<TbLogEquipamentosOpcionaisLocalizacao>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tb_log_equipamentos_opcionais_localizacao");

            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DatahoraLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("datahora_log");
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("id");
            entity.Property(e => e.IdEquipamentoOpcionalLocalizacao).HasColumnName("id_equipamento_opcional_localizacao");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
        });

        modelBuilder.Entity<TbLogErrosSistema>(entity =>
        {
            entity.HasKey(e => e.ErroSistemaId);

            entity.ToTable("tb_log_erros_sistemas");

            entity.HasIndex(e => e.SistemaId, "IDX_tb_log_erros_sistemas1");

            entity.HasIndex(e => e.UsuarioId, "IDX_tb_log_erros_sistemas2");

            entity.HasIndex(e => e.DataCadastro, "IDX_tb_log_erros_sistemas3");

            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.Log)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.SistemaId).HasDefaultValueSql("((1))");
        });

        modelBuilder.Entity<TbLogFaturamento>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_faturamento1");

            entity.ToTable("tb_log_faturamento");

            entity.HasIndex(e => e.IdAtendimento, "idx_tb_log_faturamento1");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataCalculo)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_calculo");
            entity.Property(e => e.DataEmissaoDocumento)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_emissao_documento");
            entity.Property(e => e.DataEmissaoNotaFiscal)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_emissao_nota_fiscal");
            entity.Property(e => e.DataPagamento)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_pagamento");
            entity.Property(e => e.DataPrazoRetiradaVeiculo)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_prazo_retirada_veiculo");
            entity.Property(e => e.DataRetroativa)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_retroativa");
            entity.Property(e => e.DataVencimento)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vencimento");
            entity.Property(e => e.DatahoraLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("datahora_log");
            entity.Property(e => e.FlagClienteRealizaFaturamentoArrecadacao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_cliente_realiza_faturamento_arrecadacao");
            entity.Property(e => e.FlagCobrarDiariasDiasCorridos)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_cobrar_diarias_dias_corridos");
            entity.Property(e => e.FlagLimitacaoJudicial)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_limitacao_judicial");
            entity.Property(e => e.FlagPermissaoDataRetroativaFaturamento)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_permissao_data_retroativa_faturamento");
            entity.Property(e => e.FlagUsarHoraDiaria)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_usar_hora_diaria");
            entity.Property(e => e.HoraDiaria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("hora_diaria");
            entity.Property(e => e.IdAtendimento).HasColumnName("id_atendimento");
            entity.Property(e => e.IdFaturamento).HasColumnName("id_faturamento");
            entity.Property(e => e.IdTipoMeioCobranca).HasColumnName("id_tipo_meio_cobranca");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.MaximoDiariasParaCobranca).HasColumnName("maximo_diarias_para_cobranca");
            entity.Property(e => e.MaximoDiasVencimento).HasColumnName("maximo_dias_vencimento");
            entity.Property(e => e.NumeroIdentificacao)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("numero_identificacao");
            entity.Property(e => e.NumeroNotaFiscal)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("numero_nota_fiscal");
            entity.Property(e => e.Sequencia).HasColumnName("sequencia");
            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status");
            entity.Property(e => e.ValorFaturado)
                .HasColumnType("money")
                .HasColumnName("valor_faturado");
            entity.Property(e => e.ValorPagamento)
                .HasColumnType("money")
                .HasColumnName("valor_pagamento");
        });

        modelBuilder.Entity<TbLogFaturamentoBoleto>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_faturamento_boletos");

            entity.ToTable("tb_log_faturamento_boletos");

            entity.HasIndex(e => e.IdUsuarioCrud, "idx_tb_log_faturamento_boletos1");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Crud)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("crud");
            entity.Property(e => e.DataEmissao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_emissao");
            entity.Property(e => e.DatahoraLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("datahora_log");
            entity.Property(e => e.DiasConfiguracaoDataVencimento).HasColumnName("dias_configuracao_data_vencimento");
            entity.Property(e => e.IdBoleto).HasColumnName("id_boleto");
            entity.Property(e => e.IdFaturamento).HasColumnName("id_faturamento");
            entity.Property(e => e.IdFaturamentoBoleto).HasColumnName("id_faturamento_boleto");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.IdUsuarioCrud).HasColumnName("id_usuario_crud");
            entity.Property(e => e.Linha)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("linha");
            entity.Property(e => e.SequenciaEmissao).HasColumnName("sequencia_emissao");
            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status");
            entity.Property(e => e.Valor)
                .HasColumnType("money")
                .HasColumnName("valor");
            entity.Property(e => e.Via).HasColumnName("via");
        });

        modelBuilder.Entity<TbLogFaturamentoBoletosImagen>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_faturamento_boletos_imagens");

            entity.ToTable("tb_log_faturamento_boletos_imagens");

            entity.HasIndex(e => e.IdUsuarioCrud, "idx_tb_log_faturamento_boletos_imagens1");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Crud)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("crud");
            entity.Property(e => e.DatahoraLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("datahora_log");
            entity.Property(e => e.IdFaturamentoBoleto).HasColumnName("id_faturamento_boleto");
            entity.Property(e => e.IdFaturamentoBoletoImagem).HasColumnName("id_faturamento_boleto_imagem");
            entity.Property(e => e.IdUsuarioCrud).HasColumnName("id_usuario_crud");
            entity.Property(e => e.Imagem).HasColumnName("imagem");
        });

        modelBuilder.Entity<TbLogFaturamentoCodigoAutorizacaoCartao>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_faturamento_codigo_autorizacao_cartao");

            entity.ToTable("tb_log_faturamento_codigo_autorizacao_cartao");

            entity.HasIndex(e => e.IdUsuarioCrud, "idx_tb_log_faturamento_codigo_autorizacao_cartao1");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CodigoAutorizacaoCartao)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("codigo_autorizacao_cartao");
            entity.Property(e => e.Crud)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("crud");
            entity.Property(e => e.DatahoraLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("datahora_log");
            entity.Property(e => e.IdCartao).HasColumnName("id_cartao");
            entity.Property(e => e.IdFaturamento).HasColumnName("id_faturamento");
            entity.Property(e => e.IdFaturamentoCodigoAutorizacaoCartao).HasColumnName("id_faturamento_codigo_autorizacao_cartao");
            entity.Property(e => e.IdUsuarioCrud).HasColumnName("id_usuario_crud");
            entity.Property(e => e.NumeroCartao)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.Valor)
                .HasColumnType("money")
                .HasColumnName("valor");
        });

        modelBuilder.Entity<TbLogFaturamentoComposicao>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_faturamento_composicao1");

            entity.ToTable("tb_log_faturamento_composicao");

            entity.HasIndex(e => e.IdUsuarioCrud, "idx_tb_log_faturamento_composicao1");

            entity.HasIndex(e => e.IdUsuarioCrud, "idx_tb_log_faturamento_servicos_associados1");

            entity.HasIndex(e => e.IdUsuarioCrud, "idx_tb_log_grv_vistoria1");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Crud)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("crud");
            entity.Property(e => e.DatahoraLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("datahora_log");
            entity.Property(e => e.IdDocumentoSap)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_documento_sap");
            entity.Property(e => e.IdFaturamento).HasColumnName("id_faturamento");
            entity.Property(e => e.IdFaturamentoComposicao).HasColumnName("id_faturamento_composicao");
            entity.Property(e => e.IdFaturamentoServicoTipoVeiculo).HasColumnName("id_faturamento_servico_tipo_veiculo");
            entity.Property(e => e.IdFaturamentoTipoComposicao).HasColumnName("id_faturamento_tipo_composicao");
            entity.Property(e => e.IdUsuarioAlteracaoQuantidade).HasColumnName("id_usuario_alteracao_quantidade");
            entity.Property(e => e.IdUsuarioCrud).HasColumnName("id_usuario_crud");
            entity.Property(e => e.IdUsuarioDesconto).HasColumnName("id_usuario_desconto");
            entity.Property(e => e.ObservacaoDesconto)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("observacao_desconto");
            entity.Property(e => e.ObservacaoQuantidadeAlterada)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("observacao_quantidade_alterada");
            entity.Property(e => e.QuantidadeAlterada)
                .HasColumnType("smallmoney")
                .HasColumnName("quantidade_alterada");
            entity.Property(e => e.QuantidadeComposicao)
                .HasColumnType("smallmoney")
                .HasColumnName("quantidade_composicao");
            entity.Property(e => e.QuantidadeDesconto).HasColumnName("quantidade_desconto");
            entity.Property(e => e.TipoComposicao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo_composicao");
            entity.Property(e => e.TipoDesconto)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo_desconto");
            entity.Property(e => e.TipoLancamento)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo_lancamento");
            entity.Property(e => e.ValorComposicao)
                .HasColumnType("money")
                .HasColumnName("valor_composicao");
            entity.Property(e => e.ValorDesconto)
                .HasColumnType("money")
                .HasColumnName("valor_desconto");
            entity.Property(e => e.ValorFaturado)
                .HasColumnType("money")
                .HasColumnName("valor_faturado");
            entity.Property(e => e.ValorTipoComposicao)
                .HasColumnType("money")
                .HasColumnName("valor_tipo_composicao");
        });

        modelBuilder.Entity<TbLogFaturamentoComposicaoNf>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_faturamento_composicao_nf");

            entity.ToTable("tb_log_faturamento_composicao_nf");

            entity.HasIndex(e => e.IdUsuarioCrud, "idx_tb_log_faturamento_composicao_nf1");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Crud)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("crud");
            entity.Property(e => e.DataEmissaoNota)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_emissao_nota");
            entity.Property(e => e.DatahoraLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("datahora_log");
            entity.Property(e => e.IdFaturamentoComposicao).HasColumnName("id_faturamento_composicao");
            entity.Property(e => e.IdFaturamentoComposicaoNf).HasColumnName("id_faturamento_composicao_nf");
            entity.Property(e => e.IdUsuarioCrud).HasColumnName("id_usuario_crud");
            entity.Property(e => e.Nota)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("nota");
        });

        modelBuilder.Entity<TbLogFaturamentoExclusao>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_faturamento_exclusao");

            entity.ToTable("tb_log_faturamento_exclusao");

            entity.HasIndex(e => e.IdUsuarioCrud, "idx_tb_log_faturamento_exclusao1");

            entity.HasIndex(e => e.IdFaturamento, "idx_tb_log_faturamento_exclusao2");

            entity.HasIndex(e => e.IdAtendimento, "idx_tb_log_faturamento_exclusao3");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Crud)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("crud");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataCalculo)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_calculo");
            entity.Property(e => e.DataEmissaoDocumento)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_emissao_documento");
            entity.Property(e => e.DataEmissaoNotaFiscal)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_emissao_nota_fiscal");
            entity.Property(e => e.DataPagamento)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_pagamento");
            entity.Property(e => e.DataPrazoRetiradaVeiculo)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_prazo_retirada_veiculo");
            entity.Property(e => e.DataRetroativa)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_retroativa");
            entity.Property(e => e.DataVencimento)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vencimento");
            entity.Property(e => e.DatahoraLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("datahora_log");
            entity.Property(e => e.FlagClienteRealizaFaturamentoArrecadacao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_cliente_realiza_faturamento_arrecadacao");
            entity.Property(e => e.FlagCobrarDiariasDiasCorridos)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_cobrar_diarias_dias_corridos");
            entity.Property(e => e.FlagLimitacaoJudicial)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_limitacao_judicial");
            entity.Property(e => e.FlagPermissaoDataRetroativaFaturamento)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_permissao_data_retroativa_faturamento");
            entity.Property(e => e.FlagUsarHoraDiaria)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_usar_hora_diaria");
            entity.Property(e => e.HoraDiaria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("hora_diaria");
            entity.Property(e => e.IdAtendimento).HasColumnName("id_atendimento");
            entity.Property(e => e.IdFaturamento).HasColumnName("id_faturamento");
            entity.Property(e => e.IdTipoMeioCobranca).HasColumnName("id_tipo_meio_cobranca");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.IdUsuarioCrud).HasColumnName("id_usuario_crud");
            entity.Property(e => e.MaximoDiariasParaCobranca).HasColumnName("maximo_diarias_para_cobranca");
            entity.Property(e => e.MaximoDiasVencimento).HasColumnName("maximo_dias_vencimento");
            entity.Property(e => e.NumeroIdentificacao)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("numero_identificacao");
            entity.Property(e => e.NumeroNotaFiscal)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("numero_nota_fiscal");
            entity.Property(e => e.Sequencia).HasColumnName("sequencia");
            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status");
            entity.Property(e => e.ValorFaturado)
                .HasColumnType("money")
                .HasColumnName("valor_faturado");
            entity.Property(e => e.ValorPagamento)
                .HasColumnType("money")
                .HasColumnName("valor_pagamento");
        });

        modelBuilder.Entity<TbLogFaturamentoRegra>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_faturamento_regras");

            entity.ToTable("tb_log_faturamento_regras");

            entity.HasIndex(e => e.IdFaturamentoRegra, "idx_tb_log_faturamento_regras1");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataVigenciaFinal)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vigencia_final");
            entity.Property(e => e.DataVigenciaInicial)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vigencia_inicial");
            entity.Property(e => e.DatahoraLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("datahora_log");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdFaturamentoRegra).HasColumnName("id_faturamento_regra");
            entity.Property(e => e.IdFaturamentoRegraTipo).HasColumnName("id_faturamento_regra_tipo");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.Valor)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("valor");
        });

        modelBuilder.Entity<TbLogFaturamentoServicosAssociado>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_faturamento_servicos_associados");

            entity.ToTable("tb_log_faturamento_servicos_associados");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CnaeId).HasColumnName("CnaeID");
            entity.Property(e => e.Crud)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("crud");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataVigenciaFinal)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vigencia_final");
            entity.Property(e => e.DataVigenciaInicial)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vigencia_inicial");
            entity.Property(e => e.DatahoraLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("datahora_log");
            entity.Property(e => e.Descricao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.DescricaoConfiguracaoNfe)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FlagCobrarSomentePrimeiraFatura)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_cobrar_somente_primeira_fatura");
            entity.Property(e => e.FlagEnviarInscricaoEstadual)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FlagEnviarValorIss)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FlagPermiteAlteracaoValor)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_permite_alteracao_valor");
            entity.Property(e => e.FlagPermiteDesconto)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_permite_desconto");
            entity.Property(e => e.FlagServicoObrigatorio)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_servico_obrigatorio");
            entity.Property(e => e.FormaCobranca)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("forma_cobranca");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdFaturamentoRegra).HasColumnName("id_faturamento_regra");
            entity.Property(e => e.IdFaturamentoServicoAssociado).HasColumnName("id_faturamento_servico_associado");
            entity.Property(e => e.IdFaturamentoServicoTipo).HasColumnName("id_faturamento_servico_tipo");
            entity.Property(e => e.IdSapTipoComposicao).HasColumnName("id_sap_tipo_composicao");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.IdUsuarioCrud).HasColumnName("id_usuario_crud");
            entity.Property(e => e.ListaServicoId).HasColumnName("ListaServicoID");
            entity.Property(e => e.PrecoPadrao)
                .HasColumnType("smallmoney")
                .HasColumnName("preco_padrao");
            entity.Property(e => e.PrecoValorMinimo)
                .HasColumnType("smallmoney")
                .HasColumnName("preco_valor_minimo");
        });

        modelBuilder.Entity<TbLogFaturamentoServicosGrv>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_faturamento_servicos_grv");

            entity.ToTable("tb_log_faturamento_servicos_grv");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Crud)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("crud");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.FlagRealizarCobranca)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_realizar_cobranca");
            entity.Property(e => e.IdFaturamentoServicoGrv).HasColumnName("id_faturamento_servico_grv");
            entity.Property(e => e.IdFaturamentoServicoTipoVeiculo).HasColumnName("id_faturamento_servico_tipo_veiculo");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.IdUsuarioDesconto).HasColumnName("id_usuario_desconto");
            entity.Property(e => e.ObservacaoDesconto)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("observacao_desconto");
            entity.Property(e => e.OrigemCadastro)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("origem_cadastro");
            entity.Property(e => e.QuantidadeDesconto).HasColumnName("quantidade_desconto");
            entity.Property(e => e.TempoTrabalhado)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("tempo_trabalhado");
            entity.Property(e => e.TipoDesconto)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo_desconto");
            entity.Property(e => e.Valor)
                .HasColumnType("smallmoney")
                .HasColumnName("valor");
            entity.Property(e => e.ValorDesconto)
                .HasColumnType("money")
                .HasColumnName("valor_desconto");
        });

        modelBuilder.Entity<TbLogFaturamentoServicosTipo>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_faturamento_servicos_tipos");

            entity.ToTable("tb_log_faturamento_servicos_tipos");

            entity.HasIndex(e => e.IdFaturamentoServicoTipo, "idx_tb_log_faturamento_servicos_tipos1");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DatahoraLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("datahora_log");
            entity.Property(e => e.Descricao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.FaturamentoProdutoCodigo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("faturamento_produto_codigo");
            entity.Property(e => e.FlagAtivo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_ativo");
            entity.Property(e => e.FlagCobrancaPorHora)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_cobranca_por_hora");
            entity.Property(e => e.FlagCobrarTelaGrv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_cobrar_tela_grv");
            entity.Property(e => e.FlagImpressaoAgrupada)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_impressao_agrupada");
            entity.Property(e => e.FlagNaoCobrarSeNaoUsouReboque)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_nao_cobrar_se_nao_usou_reboque");
            entity.Property(e => e.FlagRebocada)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_rebocada");
            entity.Property(e => e.FlagServicoObrigatorio)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_servico_obrigatorio");
            entity.Property(e => e.FlagTributacao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_tributacao");
            entity.Property(e => e.IdFaturamentoServicoTipo).HasColumnName("id_faturamento_servico_tipo");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.OrdemImpressao).HasColumnName("ordem_impressao");
            entity.Property(e => e.TipoCobranca)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo_cobranca");
        });

        modelBuilder.Entity<TbLogFaturamentoTemp>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_faturamento_temp");

            entity.ToTable("tb_log_faturamento_temp");

            entity.HasIndex(e => e.IdAtendimento, "idx_tb_log_faturamento_temp1");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataCalculo)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_calculo");
            entity.Property(e => e.DataEmissaoDocumento)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_emissao_documento");
            entity.Property(e => e.DataEmissaoNotaFiscal)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_emissao_nota_fiscal");
            entity.Property(e => e.DataPagamento)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_pagamento");
            entity.Property(e => e.DataPrazoRetiradaVeiculo)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_prazo_retirada_veiculo");
            entity.Property(e => e.DataRetroativa)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_retroativa");
            entity.Property(e => e.DataVencimento)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vencimento");
            entity.Property(e => e.DatahoraLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("datahora_log");
            entity.Property(e => e.FlagClienteRealizaFaturamentoArrecadacao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_cliente_realiza_faturamento_arrecadacao");
            entity.Property(e => e.FlagCobrarDiariasDiasCorridos)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_cobrar_diarias_dias_corridos");
            entity.Property(e => e.FlagLimitacaoJudicial)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_limitacao_judicial");
            entity.Property(e => e.FlagPermissaoDataRetroativaFaturamento)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_permissao_data_retroativa_faturamento");
            entity.Property(e => e.FlagUsarHoraDiaria)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_usar_hora_diaria");
            entity.Property(e => e.HoraDiaria)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("hora_diaria");
            entity.Property(e => e.IdAtendimento).HasColumnName("id_atendimento");
            entity.Property(e => e.IdFaturamento).HasColumnName("id_faturamento");
            entity.Property(e => e.IdTipoMeioCobranca).HasColumnName("id_tipo_meio_cobranca");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.MaximoDiariasParaCobranca).HasColumnName("maximo_diarias_para_cobranca");
            entity.Property(e => e.MaximoDiasVencimento).HasColumnName("maximo_dias_vencimento");
            entity.Property(e => e.NumeroIdentificacao)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("numero_identificacao");
            entity.Property(e => e.NumeroNotaFiscal)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("numero_nota_fiscal");
            entity.Property(e => e.Sequencia).HasColumnName("sequencia");
            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status");
            entity.Property(e => e.ValorFaturado)
                .HasColumnType("money")
                .HasColumnName("valor_faturado");
            entity.Property(e => e.ValorPagamento)
                .HasColumnType("money")
                .HasColumnName("valor_pagamento");
        });

        modelBuilder.Entity<TbLogFuncionario>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_funcionarios1");

            entity.ToTable("tb_log_funcionarios");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.FlagAtivo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_ativo");
            entity.Property(e => e.IdCargo).HasColumnName("id_cargo");
            entity.Property(e => e.IdDepartamento).HasColumnName("id_departamento");
            entity.Property(e => e.IdEmpresa).HasColumnName("id_empresa");
            entity.Property(e => e.IdFuncionario).HasColumnName("id_funcionario");
            entity.Property(e => e.IdPessoa).HasColumnName("id_pessoa");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.Matricula)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("matricula");
        });

        modelBuilder.Entity<TbLogGeracaoRelatorio>(entity =>
        {
            entity.ToTable("tb_log_geracao_relatorio");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Data)
                .HasColumnType("smalldatetime")
                .HasColumnName("data");
            entity.Property(e => e.Extracao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("extracao");
            entity.Property(e => e.IdTipoRelatorio).HasColumnName("id_tipo_relatorio");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.Parametros)
                .IsRequired()
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("parametros");
        });

        modelBuilder.Entity<TbLogGrv>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_grv");

            entity.ToTable("tb_log_grv");

            entity.HasIndex(e => e.IdGrv, "idx_tb_log_grv1");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AgenteId).HasColumnName("AgenteID");
            entity.Property(e => e.Bairro)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("bairro");
            entity.Property(e => e.Chassi)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("chassi");
            entity.Property(e => e.Complemento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("complemento");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataHoraGuarda)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_hora_guarda");
            entity.Property(e => e.DataHoraRemocao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_hora_remocao");
            entity.Property(e => e.DataOficio)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_oficio");
            entity.Property(e => e.DataTransbordo)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_transbordo");
            entity.Property(e => e.DatahoraLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("datahora_log");
            entity.Property(e => e.DistanciaAteAcautelamento).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.Divergencia1)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasColumnName("divergencia1");
            entity.Property(e => e.Divergencia2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("divergencia2");
            entity.Property(e => e.Divergencia3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("divergencia3");
            entity.Property(e => e.Divergencia4)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("divergencia4");
            entity.Property(e => e.Divergencia5)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("divergencia5");
            entity.Property(e => e.EstacionamentoNumeroVaga)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("estacionamento_numero_vaga");
            entity.Property(e => e.EstacionamentoSetor)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("estacionamento_setor");
            entity.Property(e => e.FaturamentoProdutoCodigo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("faturamento_produto_codigo");
            entity.Property(e => e.FlagChaveDeposito)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_chave_deposito");
            entity.Property(e => e.FlagComboio)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_comboio");
            entity.Property(e => e.FlagEstadoLacre)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_estado_lacre");
            entity.Property(e => e.FlagGgv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_ggv");
            entity.Property(e => e.FlagTransbordo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_transbordo");
            entity.Property(e => e.FlagVeiculoMesmasCondicoes)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_veiculo_mesmas_condicoes");
            entity.Property(e => e.FlagVeiculoNaoIdentificado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_veiculo_nao_identificado");
            entity.Property(e => e.FlagVeiculoNaoOstentaPlaca)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_veiculo_nao_ostenta_placa");
            entity.Property(e => e.FlagVeiculoRoubadoFurtado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_veiculo_roubado_furtado");
            entity.Property(e => e.FlagVeiculoSemRegistro)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_veiculo_sem_registro");
            entity.Property(e => e.FlagVistoria)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_vistoria");
            entity.Property(e => e.IdAutoridadeResponsavel).HasColumnName("id_autoridade_responsavel");
            entity.Property(e => e.IdCep).HasColumnName("id_cep");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdCor).HasColumnName("id_cor");
            entity.Property(e => e.IdCorOstentada).HasColumnName("id_cor_ostentada");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdDetranMarcaModelo).HasColumnName("id_detran_marca_modelo");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdLiberacao).HasColumnName("id_liberacao");
            entity.Property(e => e.IdMotivoApreensao).HasColumnName("id_motivo_apreensao");
            entity.Property(e => e.IdReboque).HasColumnName("id_reboque");
            entity.Property(e => e.IdReboquista).HasColumnName("id_reboquista");
            entity.Property(e => e.IdStatusOperacao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_status_operacao");
            entity.Property(e => e.IdTarifaTipoVeiculo).HasColumnName("id_tarifa_tipo_veiculo");
            entity.Property(e => e.IdTipoVeiculo).HasColumnName("id_tipo_veiculo");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.IdUsuarioCadastroGgv).HasColumnName("id_usuario_cadastro_ggv");
            entity.Property(e => e.IdUsuarioEdicao).HasColumnName("id_usuario_edicao");
            entity.Property(e => e.Latitude)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("latitude");
            entity.Property(e => e.LatitudeAcautelamento)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Logradouro)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("logradouro");
            entity.Property(e => e.Longitude)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("longitude");
            entity.Property(e => e.LongitudeAcautelamento)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.MatriculaAutoridadeResponsavel)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("matricula_autoridade_responsavel");
            entity.Property(e => e.MatriculaComandante)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("matricula_comandante");
            entity.Property(e => e.Municipio)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("municipio");
            entity.Property(e => e.NomeAutoridadeResponsavel)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("nome_autoridade_responsavel");
            entity.Property(e => e.Numero)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("numero");
            entity.Property(e => e.NumeroChave)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("numero_chave");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("numero_formulario_grv");
            entity.Property(e => e.NumeroOficio)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("numero_oficio");
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa");
            entity.Property(e => e.PlacaOstentada)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("placa_ostentada");
            entity.Property(e => e.PontoReferencia)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ponto_referencia");
            entity.Property(e => e.Referencia)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("referencia");
            entity.Property(e => e.Renavam)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("renavam");
            entity.Property(e => e.Rfid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("rfid");
            entity.Property(e => e.TermoDetran)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("termo_detran");
            entity.Property(e => e.Uf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("uf");
            entity.Property(e => e.VeiculoUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TbLogGrvClientesCodigoIdentificacao>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_grv_clientes_codigo_identificacao");

            entity.ToTable("tb_log_grv_clientes_codigo_identificacao");

            entity.HasIndex(e => e.IdClienteCodigoIdentificacao, "idx_tb_log_grv_clientes_codigo_identificacao1");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ClienteCodigoIdentificacao)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("cliente_codigo_identificacao");
            entity.Property(e => e.DataAtualizacao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_atualizacao");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DatahoraLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("datahora_log");
            entity.Property(e => e.FlagAtivo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_ativo");
            entity.Property(e => e.IdClienteCodigoIdentificacao).HasColumnName("id_cliente_codigo_identificacao");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdUsuarioAtualizacao).HasColumnName("id_usuario_atualizacao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
        });

        modelBuilder.Entity<TbLogGrvDrfa>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_grv_drfa");

            entity.ToTable("tb_log_grv_drfa");

            entity.HasIndex(e => e.IdUsuarioCrud, "idx_tb_log_grv_drfa1");

            entity.HasIndex(e => e.IdGrvDrfa, "idx_tb_log_grv_drfa2");

            entity.HasIndex(e => e.IdGrv, "idx_tb_log_grv_drfa3");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AutoridadeDivisaoComplemento)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("autoridade_divisao_complemento");
            entity.Property(e => e.Crud)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("crud");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DatahoraLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("datahora_log");
            entity.Property(e => e.EstadoGeralVeiculo)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("estado_geral_veiculo");
            entity.Property(e => e.FlagRegistroAgendado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_registro_agendado");
            entity.Property(e => e.FlagRegistroRecuperacao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_registro_recuperacao");
            entity.Property(e => e.IdAutoridadeDivisao).HasColumnName("id_autoridade_divisao");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdGrvDrfa).HasColumnName("id_grv_drfa");
            entity.Property(e => e.IdGrvDrfaTipoRegistro).HasColumnName("id_grv_drfa_tipo_registro");
            entity.Property(e => e.IdOrgaoEmissor).HasColumnName("id_orgao_emissor");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.IdUsuarioCrud).HasColumnName("id_usuario_crud");
            entity.Property(e => e.LocalRemocaoEnderecoCompleto)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("local_remocao_endereco_completo");
            entity.Property(e => e.LocalRemocaoLatitude)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("local_remocao_latitude");
            entity.Property(e => e.LocalRemocaoLongitude)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("local_remocao_longitude");
            entity.Property(e => e.LocalRemocaoReferencia)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("local_remocao_referencia");
            entity.Property(e => e.NumeroRegistroRouboFurto)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("numero_registro_roubo_furto");
            entity.Property(e => e.RegistroRouboFurtoMatriculaAgente)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("registro_roubo_furto_matricula_agente");
            entity.Property(e => e.RegistroRouboFurtoNomeAgente)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("registro_roubo_furto_nome_agente");
        });

        modelBuilder.Entity<TbLogGrvDrfaAgendamentoRetiradum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_grv_drfa_agendamento_retirada");

            entity.ToTable("tb_log_grv_drfa_agendamento_retirada");

            entity.HasIndex(e => e.IdUsuarioCrud, "idx_tb_log_grv_drfa_agendamento_retirada1");

            entity.HasIndex(e => e.IdGrvDrfaAgendamentoRetirada, "idx_tb_log_grv_drfa_agendamento_retirada2");

            entity.HasIndex(e => e.IdGrvDrfa, "idx_tb_log_grv_drfa_agendamento_retirada3");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CpfResponsavelAgendamento)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("cpf_responsavel_agendamento");
            entity.Property(e => e.Crud)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("crud");
            entity.Property(e => e.DataAgendamento)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_agendamento");
            entity.Property(e => e.DataRegistroAgendamento)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_registro_agendamento");
            entity.Property(e => e.DatahoraLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("datahora_log");
            entity.Property(e => e.IdGrvDrfa).HasColumnName("id_grv_drfa");
            entity.Property(e => e.IdGrvDrfaAgendamentoRetirada).HasColumnName("id_grv_drfa_agendamento_retirada");
            entity.Property(e => e.IdUsuarioCrud).HasColumnName("id_usuario_crud");
            entity.Property(e => e.IdUsuarioRegistroAgendamento).HasColumnName("id_usuario_registro_agendamento");
            entity.Property(e => e.NomeResponsavelAgendamento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nome_responsavel_agendamento");
        });

        modelBuilder.Entity<TbLogGrvDrfaArquivoRegistro>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_grv_drfa_arquivo_registro");

            entity.ToTable("tb_log_grv_drfa_arquivo_registro");

            entity.HasIndex(e => e.IdUsuarioCrud, "idx_tb_log_grv_drfa_arquivo_registro1");

            entity.HasIndex(e => e.IdGrvDrfaArquivoRegistro, "idx_tb_log_grv_drfa_arquivo_registro2");

            entity.HasIndex(e => e.IdGrvDrfa, "idx_tb_log_grv_drfa_arquivo_registro3");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ArquivoNome)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("arquivo_nome");
            entity.Property(e => e.ArquivoRegistro).HasColumnName("arquivo_registro");
            entity.Property(e => e.Crud)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("crud");
            entity.Property(e => e.DatahoraLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("datahora_log");
            entity.Property(e => e.IdGrvDrfa).HasColumnName("id_grv_drfa");
            entity.Property(e => e.IdGrvDrfaArquivoRegistro).HasColumnName("id_grv_drfa_arquivo_registro");
            entity.Property(e => e.IdUsuarioCrud).HasColumnName("id_usuario_crud");
            entity.Property(e => e.TipoArquivo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo_arquivo");
        });

        modelBuilder.Entity<TbLogGrvDrfaRegistroRecuperacao>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_grv_drfa_registro_recuperacao");

            entity.ToTable("tb_log_grv_drfa_registro_recuperacao");

            entity.HasIndex(e => e.IdUsuarioCrud, "idx_tb_log_grv_drfa_registro_recuperacao1");

            entity.HasIndex(e => e.IdGrvDrfaRegistroRecuperacao, "idx_tb_log_grv_drfa_registro_recuperacao2");

            entity.HasIndex(e => e.IdGrvDrfa, "idx_tb_log_grv_drfa_registro_recuperacao3");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Crud)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("crud");
            entity.Property(e => e.DataRegistroRecuperacao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_registro_recuperacao");
            entity.Property(e => e.DatahoraLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("datahora_log");
            entity.Property(e => e.IdAutoridadeDivisao).HasColumnName("id_autoridade_divisao");
            entity.Property(e => e.IdGrvDrfa).HasColumnName("id_grv_drfa");
            entity.Property(e => e.IdGrvDrfaRegistroRecuperacao).HasColumnName("id_grv_drfa_registro_recuperacao");
            entity.Property(e => e.IdUsuarioCrud).HasColumnName("id_usuario_crud");
            entity.Property(e => e.NumeroRegistroRecuperacao)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("numero_registro_recuperacao");
            entity.Property(e => e.RegistroRecuperacaoMatriculaAgente)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("registro_recuperacao_matricula_agente");
            entity.Property(e => e.RegistroRecuperacaoNomeAgente)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("registro_recuperacao_nome_agente");
        });

        modelBuilder.Entity<TbLogGrvEnquadramentoInfraco>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_grv_enquadramento_infracoes");

            entity.ToTable("tb_log_grv_enquadramento_infracoes");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Crud)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("crud");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.IdEnquadramentoInfracao)
                .HasColumnType("numeric(4, 0)")
                .HasColumnName("id_enquadramento_infracao");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdGrvEnquadramentoInfracao).HasColumnName("id_grv_enquadramento_infracao");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.NumeroInfracao)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("numero_infracao");
        });

        modelBuilder.Entity<TbLogGrvExclusao>(entity =>
        {
            entity.ToTable("tb_log_grv_exclusao");

            entity.HasIndex(e => e.IdGrv, "idx_tb_log_grv_exclusao1");

            entity.HasIndex(e => e.IdUsuario, "idx_tb_log_grv_exclusao2");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DatahoraLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("datahora_log");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.Motivo)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("motivo");
        });

        modelBuilder.Entity<TbLogGrvFoto>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_grv_fotos");

            entity.ToTable("tb_log_grv_fotos");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DatahoraLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("datahora_log");
            entity.Property(e => e.Foto).HasColumnName("foto");
            entity.Property(e => e.IdFoto).HasColumnName("id_foto");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.TipoFoto)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo_foto");
        });

        modelBuilder.Entity<TbLogGrvLacre>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_grv_lacres");

            entity.ToTable("tb_log_grv_lacres");

            entity.HasIndex(e => e.IdGrv, "idx_tb_log_grv_lacres1");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DataAtualizacao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_atualizacao");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DatahoraLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("datahora_log");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdLacre).HasColumnName("id_lacre");
            entity.Property(e => e.IdLacreMotivoDesassociacao).HasColumnName("id_lacre_motivo_desassociacao");
            entity.Property(e => e.IdUsuarioAtualizacao).HasColumnName("id_usuario_atualizacao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.Lacre)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("lacre");
            entity.Property(e => e.LacreAnterior)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("lacre_anterior");
        });

        modelBuilder.Entity<TbLogGrvNew>(entity =>
        {
            entity.ToTable("tb_log_grv_new");

            entity.HasIndex(e => e.UsuarioCrudId, "IDX_tb_log_grv_new1");

            entity.HasIndex(e => e.IdGrv, "IDX_tb_log_grv_new2");

            entity.Property(e => e.AgenteId).HasColumnName("AgenteID");
            entity.Property(e => e.Bairro)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("bairro");
            entity.Property(e => e.Chassi)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("chassi");
            entity.Property(e => e.Complemento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("complemento");
            entity.Property(e => e.Crud)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('U')")
                .IsFixedLength();
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataHoraGuarda)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_hora_guarda");
            entity.Property(e => e.DataHoraLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.DataHoraRemocao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_hora_remocao");
            entity.Property(e => e.DataOficio)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_oficio");
            entity.Property(e => e.DataTransbordo)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_transbordo");
            entity.Property(e => e.DistanciaAteAcautelamento).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.Divergencia1)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasColumnName("divergencia1");
            entity.Property(e => e.Divergencia2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("divergencia2");
            entity.Property(e => e.Divergencia3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("divergencia3");
            entity.Property(e => e.Divergencia4)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("divergencia4");
            entity.Property(e => e.Divergencia5)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("divergencia5");
            entity.Property(e => e.EstacionamentoNumeroVaga)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("estacionamento_numero_vaga");
            entity.Property(e => e.EstacionamentoSetor)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("estacionamento_setor");
            entity.Property(e => e.FaturamentoProdutoCodigo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("faturamento_produto_codigo");
            entity.Property(e => e.FlagChaveDeposito)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_chave_deposito");
            entity.Property(e => e.FlagComboio)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_comboio");
            entity.Property(e => e.FlagEstadoLacre)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_estado_lacre");
            entity.Property(e => e.FlagGgv)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_ggv");
            entity.Property(e => e.FlagTransbordo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_transbordo");
            entity.Property(e => e.FlagVeiculoMesmasCondicoes)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_veiculo_mesmas_condicoes");
            entity.Property(e => e.FlagVeiculoNaoIdentificado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_veiculo_nao_identificado");
            entity.Property(e => e.FlagVeiculoNaoOstentaPlaca)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_veiculo_nao_ostenta_placa");
            entity.Property(e => e.FlagVeiculoRoubadoFurtado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_veiculo_roubado_furtado");
            entity.Property(e => e.FlagVeiculoSemRegistro)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_veiculo_sem_registro");
            entity.Property(e => e.FlagVistoria)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_vistoria");
            entity.Property(e => e.IdAutoridadeResponsavel).HasColumnName("id_autoridade_responsavel");
            entity.Property(e => e.IdCep).HasColumnName("id_cep");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdCor).HasColumnName("id_cor");
            entity.Property(e => e.IdCorOstentada).HasColumnName("id_cor_ostentada");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdDetranMarcaModelo).HasColumnName("id_detran_marca_modelo");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdLiberacao).HasColumnName("id_liberacao");
            entity.Property(e => e.IdMotivoApreensao).HasColumnName("id_motivo_apreensao");
            entity.Property(e => e.IdReboque).HasColumnName("id_reboque");
            entity.Property(e => e.IdReboquista).HasColumnName("id_reboquista");
            entity.Property(e => e.IdStatusOperacao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_status_operacao");
            entity.Property(e => e.IdTarifaTipoVeiculo).HasColumnName("id_tarifa_tipo_veiculo");
            entity.Property(e => e.IdTipoVeiculo).HasColumnName("id_tipo_veiculo");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.IdUsuarioCadastroGgv).HasColumnName("id_usuario_cadastro_ggv");
            entity.Property(e => e.IdUsuarioEdicao).HasColumnName("id_usuario_edicao");
            entity.Property(e => e.Latitude)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("latitude");
            entity.Property(e => e.LatitudeAcautelamento)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Logradouro)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("logradouro");
            entity.Property(e => e.Longitude)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("longitude");
            entity.Property(e => e.LongitudeAcautelamento)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.MatriculaAutoridadeResponsavel)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("matricula_autoridade_responsavel");
            entity.Property(e => e.MatriculaComandante)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("matricula_comandante");
            entity.Property(e => e.Mensagem)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.Municipio)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("municipio");
            entity.Property(e => e.NomeAutoridadeResponsavel)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("nome_autoridade_responsavel");
            entity.Property(e => e.Numero)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("numero");
            entity.Property(e => e.NumeroChave)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("numero_chave");
            entity.Property(e => e.NumeroFormularioGrv)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("numero_formulario_grv");
            entity.Property(e => e.NumeroOficio)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("numero_oficio");
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa");
            entity.Property(e => e.PlacaOstentada)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("placa_ostentada");
            entity.Property(e => e.PontoReferencia)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ponto_referencia");
            entity.Property(e => e.Referencia)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("referencia");
            entity.Property(e => e.Renavam)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("renavam");
            entity.Property(e => e.Rfid)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("rfid");
            entity.Property(e => e.TermoDetran)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("termo_detran");
            entity.Property(e => e.Uf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("uf");
            entity.Property(e => e.VeiculoUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TbLogGrvVistorium>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_grv_vistoria1");

            entity.ToTable("tb_log_grv_vistoria");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Crud)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("crud");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataVistoria)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vistoria");
            entity.Property(e => e.DatahoraLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("datahora_log");
            entity.Property(e => e.EstadoGeralVeiculo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("estado_geral_veiculo");
            entity.Property(e => e.FlagPossuiPlaca)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_possui_placa");
            entity.Property(e => e.FlagPossuiRestricoes)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_possui_restricoes");
            entity.Property(e => e.FlagPossuiTravaEletrica)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_possui_trava_eletrica");
            entity.Property(e => e.FlagPossuiVidroEletrico)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_possui_vidro_eletrico");
            entity.Property(e => e.IdEmpresaVistoria).HasColumnName("id_empresa_vistoria");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdGrvVistoria).HasColumnName("id_grv_vistoria");
            entity.Property(e => e.IdGrvVistoriaSituacaoChassi).HasColumnName("id_grv_vistoria_situacao_chassi");
            entity.Property(e => e.IdGrvVistoriaStatus).HasColumnName("id_grv_vistoria_status");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.IdUsuarioCrud).HasColumnName("id_usuario_crud");
            entity.Property(e => e.MotivoNaoRealizacaoVistoria)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("motivo_nao_realizacao_vistoria");
            entity.Property(e => e.NomeVistoriador)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("nome_vistoriador");
            entity.Property(e => e.NumeroMotor)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("numero_motor");
            entity.Property(e => e.NumeroVistoria)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("numero_vistoria");
            entity.Property(e => e.ResumoVistoria)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("resumo_vistoria");
            entity.Property(e => e.TipoDirecao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo_direcao");
        });

        modelBuilder.Entity<TbLogLiberacaoEspecial>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_liberacao_especial");

            entity.ToTable("tb_log_liberacao_especial");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DataEmissaoDocumento)
                .HasColumnType("date")
                .HasColumnName("data_emissao_documento");
            entity.Property(e => e.DataLiberacao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_liberacao");
            entity.Property(e => e.IdFaturamento).HasColumnName("id_faturamento");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdLiberacaoEspecial).HasColumnName("id_liberacao_especial");
            entity.Property(e => e.IdLiberacaoEspecialTipo).HasColumnName("id_liberacao_especial_tipo");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.NumeroDocumento)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("numero_documento");
            entity.Property(e => e.NumeroProcesso)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("numero_processo");
            entity.Property(e => e.OrgaoEmissor)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("orgao_emissor");
            entity.Property(e => e.PortadorCargo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("portador_cargo");
            entity.Property(e => e.PortadorMatricula)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("portador_matricula");
            entity.Property(e => e.PortadorNome)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("portador_nome");
            entity.Property(e => e.SignatarioMatricula)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("signatario_matricula");
            entity.Property(e => e.SignatarioNomeDocumento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("signatario_nome_documento");
            entity.Property(e => e.SignatarioTitulo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("signatario_titulo");
            entity.Property(e => e.TipoDocumento)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tipo_documento");
        });

        modelBuilder.Entity<TbLogLiberese>(entity =>
        {
            entity.ToTable("tb_log_liberese");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AgenteTransito)
                .HasMaxLength(150)
                .IsFixedLength()
                .HasColumnName("agente_transito");
            entity.Property(e => e.Categoria)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("categoria");
            entity.Property(e => e.Condutor)
                .HasMaxLength(150)
                .IsFixedLength()
                .HasColumnName("condutor");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("date")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataDocumento)
                .HasColumnType("date")
                .HasColumnName("data_documento");
            entity.Property(e => e.Datahoralog)
                .HasColumnType("datetime")
                .HasColumnName("datahoralog");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdLiberese).HasColumnName("id_liberese");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.NomeDiretorPresidente)
                .HasMaxLength(150)
                .IsFixedLength()
                .HasColumnName("nome_diretor_presidente");
            entity.Property(e => e.NomeFiscalTransporte)
                .HasMaxLength(150)
                .IsFixedLength()
                .HasColumnName("nome_fiscal_transporte");
            entity.Property(e => e.NomeProprietario)
                .HasMaxLength(150)
                .IsFixedLength()
                .HasColumnName("nome_proprietario");
            entity.Property(e => e.Observacao)
                .HasMaxLength(200)
                .IsFixedLength()
                .HasColumnName("observacao");
            entity.Property(e => e.ProcuradorCompradorSocio)
                .HasMaxLength(150)
                .IsFixedLength()
                .HasColumnName("procurador_comprador_socio");
            entity.Property(e => e.ProprietarioDocumento)
                .HasMaxLength(14)
                .IsFixedLength()
                .HasColumnName("proprietario_documento");
            entity.Property(e => e.ProprietarioRg)
                .HasMaxLength(11)
                .IsFixedLength()
                .HasColumnName("proprietario_rg");
            entity.Property(e => e.RegistroCnh)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("registro_cnh");
        });

        modelBuilder.Entity<TbLogNfe>(entity =>
        {
            entity.ToTable("tb_log_nfe");

            entity.Property(e => e.CaminhoXmlNotaFiscal)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Cnpj)
                .IsRequired()
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.CodigoVerificacao)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Crud)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DataAlteracao).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCadastro).HasColumnType("smalldatetime");
            entity.Property(e => e.DataEmissao).HasColumnType("datetime");
            entity.Property(e => e.DataHoraLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.Numero)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NumeroNotaFiscal)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NumeroRps)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Referencia)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SerieRps)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StatusNfe)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Url)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TbLogNfeRegra>(entity =>
        {
            entity.HasKey(e => e.LogId);

            entity.ToTable("tb_log_nfe_regras");

            entity.HasIndex(e => e.UsuarioCrudId, "IDX_tb_log_nfe_regras1");

            entity.Property(e => e.Crud)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DataAlteracao).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCadastro).HasColumnType("smalldatetime");
            entity.Property(e => e.DatahoraLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.Valor)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TbLogReboque>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_reboques1");

            entity.ToTable("tb_log_reboques");

            entity.HasIndex(e => e.IdReboque, "idx_tb_log_reboques1");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Ano)
                .HasColumnType("numeric(4, 0)")
                .HasColumnName("ano");
            entity.Property(e => e.Chassi)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("chassi");
            entity.Property(e => e.Codigo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("codigo");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.FlagAtivo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_ativo");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdReboque).HasColumnName("id_reboque");
            entity.Property(e => e.IdUsuarioAlteracao)
                .HasColumnType("numeric(5, 0)")
                .HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro)
                .HasColumnType("numeric(5, 0)")
                .HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.Marca)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("marca");
            entity.Property(e => e.Modelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("modelo");
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa");
            entity.Property(e => e.Renavam)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("renavam");
        });

        modelBuilder.Entity<TbLogReboquista>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_reboquistas1");

            entity.ToTable("tb_log_reboquistas");

            entity.HasIndex(e => e.IdReboquista, "idx_tb_log_reboquistas1");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.FlagAtivo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_ativo");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdReboquista).HasColumnName("id_reboquista");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.Nome)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nome");
        });

        modelBuilder.Entity<TbLogRepositorioArquivo>(entity =>
        {
            entity.HasKey(e => e.RepositorioArquivoLogId).HasName("pk_tb_log_repositorio_arquivos");

            entity.ToTable("tb_log_repositorio_arquivos");

            entity.HasIndex(e => e.UsuarioCrudId, "IDX_tb_log_repositorio_arquivos1");

            entity.HasIndex(e => e.RepositorioArquivoId, "IDX_tb_log_repositorio_arquivos2");

            entity.HasIndex(e => e.NomeTabelaOrigemId, "IDX_tb_log_repositorio_arquivos3");

            entity.HasIndex(e => e.TabelaOrigemId, "IDX_tb_log_repositorio_arquivos4");

            entity.Property(e => e.Crud)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DataHoraCadastro).HasColumnType("smalldatetime");
            entity.Property(e => e.DataHoraLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.NomeArquivo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PermissaoAcesso)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TipoArquivo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Url)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TbLogSistemaPerfilAcesso>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_sistema_perfil_acesso");

            entity.ToTable("tb_log_sistema_perfil_acesso");

            entity.HasIndex(e => e.IdPerfilAcesso, "idx_tb_log_sistema_perfil_acesso1");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.Descricao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.FlagAtivo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_ativo");
            entity.Property(e => e.IdPerfilAcesso).HasColumnName("id_perfil_acesso");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
        });

        modelBuilder.Entity<TbLogTipoVeiculo>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_tipo_veiculos");

            entity.ToTable("tb_log_tipo_veiculos");

            entity.HasIndex(e => e.IdTipoVeiculo, "idx_tb_log_tipo_veiculos1");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.Descricao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.FlagAtivo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_ativo");
            entity.Property(e => e.FlagNaoRequerCnhNaLiberacao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_nao_requer_cnh_na_liberacao");
            entity.Property(e => e.IdTipoVeiculo).HasColumnName("id_tipo_veiculo");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
        });

        modelBuilder.Entity<TbLogTipoVeiculosEquipamentosAssociacao>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_tipo_veiculos_equipamentos_associacao");

            entity.ToTable("tb_log_tipo_veiculos_equipamentos_associacao");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataExclusao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_exclusao");
            entity.Property(e => e.DatahoraLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("datahora_log");
            entity.Property(e => e.IdEquipamentoOpcional)
                .HasColumnType("numeric(3, 0)")
                .HasColumnName("id_equipamento_opcional");
            entity.Property(e => e.IdTipoVeiculo).HasColumnName("id_tipo_veiculo");
            entity.Property(e => e.IdTipoVeiculoEquipamentoAssociacao).HasColumnName("id_tipo_veiculo_equipamento_associacao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.IdUsuarioExclusao).HasColumnName("id_usuario_exclusao");
        });

        modelBuilder.Entity<TbLogTiposCombustivei>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_tipos_combustiveis1");

            entity.ToTable("tb_log_tipos_combustiveis");

            entity.HasIndex(e => e.IdTipoCombustivel, "idx_tb_log_tipos_combustiveis1");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.Descricao)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.IdTipoCombustivel)
                .HasColumnType("numeric(2, 0)")
                .HasColumnName("id_tipo_combustivel");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status");
        });

        modelBuilder.Entity<TbLogTransmissaoGgv>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_ggv");

            entity.ToTable("tb_log_transmissao_ggv");

            entity.HasIndex(e => e.Id, "idx_tb_log_ggv");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DataCadastro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.Retorno)
                .IsUnicode(false)
                .HasColumnName("retorno");
            entity.Property(e => e.Transmitido)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .HasColumnName("transmitido");
        });

        modelBuilder.Entity<TbLogUsuario>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_usuarios1");

            entity.ToTable("tb_log_usuarios");

            entity.HasIndex(e => e.IdUsuario, "idx_tb_log_usuarios1");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Crud)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataCadastroSenha)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro_senha");
            entity.Property(e => e.DataHoraLog)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.DataUltimoAcesso)
                .HasColumnType("datetime")
                .HasColumnName("data_ultimo_acesso");
            entity.Property(e => e.Dummy)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("dummy");
            entity.Property(e => e.Email)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.FlagAtivo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_ativo");
            entity.Property(e => e.FlagPermissaoDataRetroativaFaturamento)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_permissao_data_retroativa_faturamento");
            entity.Property(e => e.FlagPermissaoDesconto)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_permissao_desconto");
            entity.Property(e => e.FlagReceberEmailErro)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_receber_email_erro");
            entity.Property(e => e.IdFuncionario).HasColumnName("id_funcionario");
            entity.Property(e => e.IdTipoOperador).HasColumnName("id_tipo_operador");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.Login)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("login");
            entity.Property(e => e.Matricula)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.PessoaId).HasColumnName("PessoaID");
            entity.Property(e => e.Senha1)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("senha1");
            entity.Property(e => e.Senha2)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("senha2");
            entity.Property(e => e.Senha3)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("senha3");
            entity.Property(e => e.Senha4)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("senha4");
            entity.Property(e => e.Senha5)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("senha5");
            entity.Property(e => e.SenhaAndroid)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("senha_android");
            entity.Property(e => e.UsuarioCrudId).HasColumnName("UsuarioCrudID");
        });

        modelBuilder.Entity<TbLogUsuariosCliente>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_usuarios_clientes1");

            entity.ToTable("tb_log_usuarios_clientes");

            entity.HasIndex(e => e.IdUsuario, "idx_tb_log_usuarios_clientes1");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.IdUsuarioCliente).HasColumnName("id_usuario_cliente");
        });

        modelBuilder.Entity<TbLogUsuariosDeposito>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_tb_log_usuarios_depositos1");

            entity.ToTable("tb_log_usuarios_depositos");

            entity.HasIndex(e => e.IdUsuario, "idx_tb_log_usuarios_depositos1");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.IdUsuarioDeposito).HasColumnName("id_usuario_deposito");
        });

        modelBuilder.Entity<TbLogWebpatiosAcesso>(entity =>
        {
            entity.ToTable("tb_log_webpatios_acesso");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DataHoraVisita)
                .HasComputedColumnSql("(getdate())", false)
                .HasColumnType("datetime")
                .HasColumnName("data_hora_visita");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.IpUsuario)
                .HasMaxLength(50)
                .HasColumnName("ip_usuario");
        });

        modelBuilder.Entity<TbSapCliente>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("tb_sap_clientes");

            entity.Property(e => e.Andar)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("andar");
            entity.Property(e => e.Bairro)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("bairro");
            entity.Property(e => e.Cep)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cep");
            entity.Property(e => e.Cidade)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("cidade");
            entity.Property(e => e.Cnpj)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("cnpj");
            entity.Property(e => e.CodOrg)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("cod_org");
            entity.Property(e => e.CodParceiro)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cod_parceiro");
            entity.Property(e => e.CodigoEmpresa)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("codigo_empresa");
            entity.Property(e => e.CondicaoPagamento)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("condicao_pagamento");
            entity.Property(e => e.ContatoEmail)
                .IsRequired()
                .HasMaxLength(241)
                .IsUnicode(false)
                .HasColumnName("contato_email");
            entity.Property(e => e.ContatoTelefone)
                .IsRequired()
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("contato_telefone");
            entity.Property(e => e.Cpf)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("cpf");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.Edificio)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("edificio");
            entity.Property(e => e.EnderecoNumero)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("endereco_numero");
            entity.Property(e => e.EnderecoRua)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("endereco_rua");
            entity.Property(e => e.FlagErroWsSap)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_erro_ws_sap");
            entity.Property(e => e.FormaPagamento)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("forma_pagamento");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdSapClientes)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_sap_clientes");
            entity.Property(e => e.IdTransacaoSap).HasColumnName("id_transacao_sap");
            entity.Property(e => e.InscricaoEstadual)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("inscricao_estadual");
            entity.Property(e => e.InscricaoMunicipal)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("inscricao_municipal");
            entity.Property(e => e.NomeCliente)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("nome_cliente");
            entity.Property(e => e.OrganizacaoVendas)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("organizacao_vendas");
            entity.Property(e => e.Regiao)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("regiao");
            entity.Property(e => e.TipoParceiro)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("tipo_parceiro");
        });

        modelBuilder.Entity<TbSapClientesLeilao>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("tb_sap_clientes_leilao");

            entity.Property(e => e.Andar)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("andar");
            entity.Property(e => e.Bairro)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("bairro");
            entity.Property(e => e.Cep)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cep");
            entity.Property(e => e.Cidade)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("cidade");
            entity.Property(e => e.Cnpj)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("cnpj");
            entity.Property(e => e.CodOrg)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("cod_org");
            entity.Property(e => e.CodParceiro)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cod_parceiro");
            entity.Property(e => e.CodigoEmpresa)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("codigo_empresa");
            entity.Property(e => e.CondicaoPagamento)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("condicao_pagamento");
            entity.Property(e => e.ContatoEmail)
                .IsRequired()
                .HasMaxLength(241)
                .IsUnicode(false)
                .HasColumnName("contato_email");
            entity.Property(e => e.ContatoTelefone)
                .IsRequired()
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("contato_telefone");
            entity.Property(e => e.Cpf)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("cpf");
            entity.Property(e => e.Edificio)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("edificio");
            entity.Property(e => e.EnderecoNumero)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("endereco_numero");
            entity.Property(e => e.EnderecoRua)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("endereco_rua");
            entity.Property(e => e.FormaPagamento)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("forma_pagamento");
            entity.Property(e => e.IdLeilao).HasColumnName("id_leilao");
            entity.Property(e => e.IdLote).HasColumnName("id_lote");
            entity.Property(e => e.IdSapClienteLeilao)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_sap_cliente_leilao");
            entity.Property(e => e.IdTransacaoSap).HasColumnName("id_transacao_sap");
            entity.Property(e => e.InscricaoEstadual)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("inscricao_estadual");
            entity.Property(e => e.InscricaoMunicipal)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("inscricao_municipal");
            entity.Property(e => e.NomeCliente)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("nome_cliente");
            entity.Property(e => e.OrganizacaoVendas)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("organizacao_vendas");
            entity.Property(e => e.Regiao)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("regiao");
            entity.Property(e => e.TipoParceiro)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("tipo_parceiro");
        });

        modelBuilder.Entity<TbSapErro>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("tb_sap_erros");

            entity.Property(e => e.Datahora)
                .HasColumnType("datetime")
                .HasColumnName("datahora");
            entity.Property(e => e.Erro)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("erro");
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("id");
            entity.Property(e => e.Mensagem)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("mensagem");
            entity.Property(e => e.Metodo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("metodo");
        });

        modelBuilder.Entity<TbSapFaturamentoComposicao>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("tb_sap_faturamento_composicao");

            entity.Property(e => e.Centro)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("centro");
            entity.Property(e => e.CodigoCliente)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codigo_cliente");
            entity.Property(e => e.CodigoMaterial)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codigo_material");
            entity.Property(e => e.CodigoOrdem)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("codigo_ordem");
            entity.Property(e => e.CodigoPedido)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codigo_pedido");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.FlagErroWsSap)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_erro_ws_sap");
            entity.Property(e => e.IdAtendimento).HasColumnName("id_atendimento");
            entity.Property(e => e.IdSapFaturamentoComposicao)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_sap_faturamento_composicao");
            entity.Property(e => e.IdTransacaoSap).HasColumnName("id_transacao_sap");
            entity.Property(e => e.MeioPagamento)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("meio_pagamento");
            entity.Property(e => e.NumeroContrato)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("numero_contrato");
            entity.Property(e => e.NumeroDocumento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("numero_documento");
            entity.Property(e => e.NumeroLeilaoPatioLote)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("numero_leilao_patio_lote");
            entity.Property(e => e.NumeroProcesso)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("numero_processo");
            entity.Property(e => e.Periodo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("periodo");
            entity.Property(e => e.Quantidade)
                .HasColumnType("smallmoney")
                .HasColumnName("quantidade");
            entity.Property(e => e.TextoCabecalho)
                .HasMaxLength(132)
                .IsUnicode(false)
                .HasColumnName("texto_cabecalho");
            entity.Property(e => e.TipoComposicao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo_composicao");
            entity.Property(e => e.TipoDocumento)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo_documento");
            entity.Property(e => e.ValorBruto)
                .HasColumnType("smallmoney")
                .HasColumnName("valor_bruto");
            entity.Property(e => e.ValorDesconto)
                .HasColumnType("smallmoney")
                .HasColumnName("valor_desconto");
        });

        modelBuilder.Entity<TbSapFaturamentoComposicaoIten>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("tb_sap_faturamento_composicao_itens");

            entity.Property(e => e.IdFaturamentoComposicao).HasColumnName("id_faturamento_composicao");
            entity.Property(e => e.IdSapFaturamentoComposicao).HasColumnName("id_sap_faturamento_composicao");
            entity.Property(e => e.IdSapFaturamentoComposicaoItem)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_sap_faturamento_composicao_item");
        });

        modelBuilder.Entity<TbSapRequest>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("tb_sap_request");

            entity.Property(e => e.AllHttp)
                .IsUnicode(false)
                .HasColumnName("ALL_HTTP");
            entity.Property(e => e.AuthPassword)
                .IsUnicode(false)
                .HasColumnName("AUTH_PASSWORD");
            entity.Property(e => e.AuthType)
                .IsUnicode(false)
                .HasColumnName("AUTH_TYPE");
            entity.Property(e => e.AuthUser)
                .IsUnicode(false)
                .HasColumnName("AUTH_USER");
            entity.Property(e => e.HttpHost)
                .IsUnicode(false)
                .HasColumnName("HTTP_HOST");
            entity.Property(e => e.HttpReferer)
                .IsUnicode(false)
                .HasColumnName("HTTP_REFERER");
            entity.Property(e => e.LocalAddr)
                .IsUnicode(false)
                .HasColumnName("LOCAL_ADDR");
            entity.Property(e => e.LogonUser)
                .IsUnicode(false)
                .HasColumnName("LOGON_USER");
            entity.Property(e => e.PathInfo)
                .IsUnicode(false)
                .HasColumnName("PATH_INFO");
            entity.Property(e => e.QueryString)
                .IsUnicode(false)
                .HasColumnName("QUERY_STRING");
            entity.Property(e => e.RemoteAddr)
                .IsUnicode(false)
                .HasColumnName("REMOTE_ADDR");
            entity.Property(e => e.RemoteHost)
                .IsUnicode(false)
                .HasColumnName("REMOTE_HOST");
            entity.Property(e => e.RemotePort)
                .IsUnicode(false)
                .HasColumnName("REMOTE_PORT");
            entity.Property(e => e.RemoteUser)
                .IsUnicode(false)
                .HasColumnName("REMOTE_USER");
            entity.Property(e => e.RequestMethod)
                .IsUnicode(false)
                .HasColumnName("REQUEST_METHOD");
            entity.Property(e => e.ServerName)
                .IsUnicode(false)
                .HasColumnName("SERVER_NAME");
            entity.Property(e => e.ServerPort)
                .IsUnicode(false)
                .HasColumnName("SERVER_PORT");
            entity.Property(e => e.ServerSoftware)
                .IsUnicode(false)
                .HasColumnName("SERVER_SOFTWARE");
            entity.Property(e => e.Url)
                .IsUnicode(false)
                .HasColumnName("URL");
        });

        modelBuilder.Entity<TbSapRetorno>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("tb_sap_retorno");

            entity.Property(e => e.DataEmissaoNota)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("data_emissao_nota");
            entity.Property(e => e.DataHoraRegistro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_hora_registro");
            entity.Property(e => e.Http)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("http");
            entity.Property(e => e.IdDocumento)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("id_documento");
            entity.Property(e => e.IdSapRetorno)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_sap_retorno");
            entity.Property(e => e.IdTransacaoSap).HasColumnName("id_transacao_sap");
            entity.Property(e => e.IpLocal)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ip_local");
            entity.Property(e => e.IpRemoto)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ip_remoto");
            entity.Property(e => e.Link)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("link");
            entity.Property(e => e.Mensagens)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("mensagens");
            entity.Property(e => e.Metodo)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("metodo");
            entity.Property(e => e.Nota)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("nota");
            entity.Property(e => e.PortaAcesso).HasColumnName("porta_acesso");
            entity.Property(e => e.Url)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("url");
            entity.Property(e => e.UsuarioAut)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usuario_aut");
            entity.Property(e => e.Verbo)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("verbo");
        });

        modelBuilder.Entity<TbSapSolicitacao>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("tb_sap_solicitacao");

            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.IdAtendimento).HasColumnName("id_atendimento");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdSapSolicitacao)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_sap_solicitacao");
            entity.Property(e => e.IdTransacaoSap).HasColumnName("id_transacao_sap");
            entity.Property(e => e.Operacao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("operacao");
        });

        modelBuilder.Entity<TbTipoRelatorio>(entity =>
        {
            entity.HasKey(e => e.IdTipoRelatorio);

            entity.ToTable("tb_tipo_relatorio");

            entity.Property(e => e.IdTipoRelatorio).HasColumnName("id_tipo_relatorio");
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(100)
                .IsFixedLength()
                .HasColumnName("descricao");
        });

        modelBuilder.Entity<TdLogVoltarProcesso>(entity =>
        {
            entity.ToTable("td_log_voltar_processo");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Data)
                .HasColumnType("smalldatetime")
                .HasColumnName("data");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.Ip)
                .HasMaxLength(30)
                .IsFixedLength()
                .HasColumnName("ip");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("numero_formulario_grv");
        });

        modelBuilder.Entity<VwCdxBoleto>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_cdx_boletos");

            entity.Property(e => e.IdFaturamento).HasColumnName("id_faturamento");
        });

        modelBuilder.Entity<VwConsultarGrv>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_consultar_grv");

            entity.Property(e => e.Chassi)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("chassi");
            entity.Property(e => e.DataHoraGuarda)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("data_hora_guarda");
            entity.Property(e => e.DataHoraRemocao)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("data_hora_remocao");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdStatusOperacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_status_operacao");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.NomeUsuarioAlteracao)
                .HasMaxLength(152)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("nome_usuario_alteracao");
            entity.Property(e => e.NomeUsuarioCadastro)
                .IsRequired()
                .HasMaxLength(152)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("nome_usuario_cadastro");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("numero_formulario_grv");
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa");
            entity.Property(e => e.StatusOperacaoDescricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("status_operacao_descricao");
        });

        modelBuilder.Entity<VwDashFaturamento>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dash_faturamento");

            entity.Property(e => e.Ano).HasColumnName("ano");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.Mes).HasColumnName("mes");
            entity.Property(e => e.Pagamento)
                .HasColumnType("money")
                .HasColumnName("pagamento");
        });

        modelBuilder.Entity<VwDashboardEstoqueVeiculo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dashboard_estoque_veiculo");

            entity.Property(e => e.AutoridadeDivisao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("autoridade_divisao");
            entity.Property(e => e.Chassi)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("chassi");
            entity.Property(e => e.Cliente)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cliente");
            entity.Property(e => e.Cor)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.DataHoraGuarda)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_hora_guarda");
            entity.Property(e => e.DataHoraRemocao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_hora_remocao");
            entity.Property(e => e.Deposito)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("deposito");
            entity.Property(e => e.EstacionamentoNumeroVaga)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("estacionamento_numero_vaga");
            entity.Property(e => e.EstacionamentoSetor)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("estacionamento_setor");
            entity.Property(e => e.FlagComboio)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_comboio");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdReboquista).HasColumnName("id_reboquista");
            entity.Property(e => e.IdStatusOperacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_status_operacao");
            entity.Property(e => e.MarcaModelo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("marca_modelo");
            entity.Property(e => e.MatriculaAutoridadeResponsavel)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("matricula_autoridade_responsavel");
            entity.Property(e => e.NomeReboquista)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nome_reboquista");
            entity.Property(e => e.NumeroChave)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("numero_chave");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("numero_formulario_grv");
            entity.Property(e => e.Placa)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa");
            entity.Property(e => e.PlacaOstentada)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("placa_ostentada");
            entity.Property(e => e.PlacaReboque)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa_reboque");
            entity.Property(e => e.Renavam)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("renavam");
            entity.Property(e => e.StatusOperacao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("status_operacao");
        });

        modelBuilder.Entity<VwDashboardQliksense>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dashboard_qliksense");

            entity.Property(e => e.CategoriaVeiculo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("categoria veiculo");
            entity.Property(e => e.Chassi)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("chassi");
            entity.Property(e => e.DataGuarda)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("data guarda");
            entity.Property(e => e.DataLiberacao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_liberacao");
            entity.Property(e => e.DataRecolhimento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("data recolhimento");
            entity.Property(e => e.DiaMesApreensao).HasColumnName("dia mes apreensao");
            entity.Property(e => e.DiaMesLiberacao).HasColumnName("dia mes liberacao");
            entity.Property(e => e.DiaSemanaApreensao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("dia semana apreensao");
            entity.Property(e => e.DiaSemanaLiberacao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("dia semana liberacao");
            entity.Property(e => e.Dias).HasColumnName("dias");
            entity.Property(e => e.DiasConsiderados).HasColumnName("dias considerados");
            entity.Property(e => e.Estado)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("estado");
            entity.Property(e => e.FormaLiberacao)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("forma_liberacao");
            entity.Property(e => e.Frota)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("frota");
            entity.Property(e => e.HoraCheiaApreensao).HasColumnName("hora cheia apreensao");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.MarcaModelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("marca modelo");
            entity.Property(e => e.OrgaoApreensor)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("orgao apreensor");
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa");
            entity.Property(e => e.PlacaReboque)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa reboque");
            entity.Property(e => e.Processo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("processo");
            entity.Property(e => e.Reboque)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("reboque");
            entity.Property(e => e.Reboquista)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("reboquista");
            entity.Property(e => e.Regiao)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("regiao");
            entity.Property(e => e.ResponsavelApreensao)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("responsavel apreensao");
            entity.Property(e => e.StatusLote)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("statusLote");
            entity.Property(e => e.TipoCobranca)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tipo cobranca");
            entity.Property(e => e.TipoVeiculo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipo_veiculo");
            entity.Property(e => e.Unidade)
                .HasMaxLength(21)
                .IsUnicode(false)
                .HasColumnName("unidade");
            entity.Property(e => e.ValorDiaria)
                .HasColumnType("money")
                .HasColumnName("valor_diaria");
            entity.Property(e => e.ValorDiariaDesconto)
                .HasColumnType("money")
                .HasColumnName("valor_diaria_desconto");
            entity.Property(e => e.ValorOutrosServicos)
                .HasColumnType("money")
                .HasColumnName("valor_outros_servicos");
            entity.Property(e => e.ValorOutrosServicosDesconto)
                .HasColumnType("money")
                .HasColumnName("valor_outros_servicos_desconto");
            entity.Property(e => e.ValorReboque)
                .HasColumnType("money")
                .HasColumnName("valor_reboque");
            entity.Property(e => e.ValorReboqueDesconto)
                .HasColumnType("money")
                .HasColumnName("valor_reboque_desconto");
            entity.Property(e => e.ValorTotal)
                .HasColumnType("money")
                .HasColumnName("valor_total");
            entity.Property(e => e.ValorTotalComDesconto)
                .HasColumnType("money")
                .HasColumnName("valor_total_com_desconto");
            entity.Property(e => e.ValorTotalSemDesconto)
                .HasColumnType("money")
                .HasColumnName("valor_total_sem_desconto");
            entity.Property(e => e.VeiculoAnoFabricacao).HasColumnName("veiculo_ano_fabricacao");
            entity.Property(e => e.VeiculoAnoModelo).HasColumnName("veiculo_ano_modelo");
        });

        modelBuilder.Entity<VwDashboardQliksenseDetro>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dashboard_qliksense_detro");

            entity.Property(e => e.CategoriaVeiculo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("categoria veiculo");
            entity.Property(e => e.Chassi)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("chassi");
            entity.Property(e => e.DataGuarda)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("data guarda");
            entity.Property(e => e.DataLiberacao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_liberacao");
            entity.Property(e => e.DataRecolhimento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("data recolhimento");
            entity.Property(e => e.DiaMesApreensao).HasColumnName("dia mes apreensao");
            entity.Property(e => e.DiaMesLiberacao).HasColumnName("dia mes liberacao");
            entity.Property(e => e.DiaSemanaApreensao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("dia semana apreensao");
            entity.Property(e => e.DiaSemanaLiberacao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("dia semana liberacao");
            entity.Property(e => e.Dias).HasColumnName("dias");
            entity.Property(e => e.DiasConsiderados).HasColumnName("dias considerados");
            entity.Property(e => e.Estado)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("estado");
            entity.Property(e => e.FormaLiberacao)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("forma_liberacao");
            entity.Property(e => e.Frota)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("frota");
            entity.Property(e => e.HoraCheiaApreensao).HasColumnName("hora cheia apreensao");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.MarcaModelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("marca modelo");
            entity.Property(e => e.OrgaoApreensor)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("orgao apreensor");
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa");
            entity.Property(e => e.PlacaReboque)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa reboque");
            entity.Property(e => e.Processo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("processo");
            entity.Property(e => e.Reboque)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("reboque");
            entity.Property(e => e.Reboquista)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("reboquista");
            entity.Property(e => e.Regiao)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("regiao");
            entity.Property(e => e.ResponsavelApreensao)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("responsavel apreensao");
            entity.Property(e => e.TipoCobranca)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tipo cobranca");
            entity.Property(e => e.TipoVeiculo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipo_veiculo");
            entity.Property(e => e.Unidade)
                .HasMaxLength(21)
                .IsUnicode(false)
                .HasColumnName("unidade");
            entity.Property(e => e.ValorDiaria)
                .HasColumnType("money")
                .HasColumnName("valor_diaria");
            entity.Property(e => e.ValorDiariaDesconto)
                .HasColumnType("money")
                .HasColumnName("valor_diaria_desconto");
            entity.Property(e => e.ValorOutrosServicos)
                .HasColumnType("money")
                .HasColumnName("valor_outros_servicos");
            entity.Property(e => e.ValorOutrosServicosDesconto)
                .HasColumnType("money")
                .HasColumnName("valor_outros_servicos_desconto");
            entity.Property(e => e.ValorReboque)
                .HasColumnType("money")
                .HasColumnName("valor_reboque");
            entity.Property(e => e.ValorReboqueDesconto)
                .HasColumnType("money")
                .HasColumnName("valor_reboque_desconto");
            entity.Property(e => e.ValorTotal)
                .HasColumnType("money")
                .HasColumnName("valor_total");
            entity.Property(e => e.ValorTotalComDesconto)
                .HasColumnType("money")
                .HasColumnName("valor_total_com_desconto");
            entity.Property(e => e.ValorTotalSemDesconto)
                .HasColumnType("money")
                .HasColumnName("valor_total_sem_desconto");
        });

        modelBuilder.Entity<VwDashboardQliksenseResumido>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dashboard_qliksense_resumido");

            entity.Property(e => e.CategoriaVeiculo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("categoria veiculo");
            entity.Property(e => e.Chassi)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("chassi");
            entity.Property(e => e.DataGuarda)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("data guarda");
            entity.Property(e => e.DataLiberacao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_liberacao");
            entity.Property(e => e.DataRecolhimento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("data recolhimento");
            entity.Property(e => e.DiasConsiderados).HasColumnName("dias considerados");
            entity.Property(e => e.Estado)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("estado");
            entity.Property(e => e.FormaLiberacao)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("forma_liberacao");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.MarcaModelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("marca modelo");
            entity.Property(e => e.OrgaoApreensor)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("orgao apreensor");
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa");
            entity.Property(e => e.PlacaReboque)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa reboque");
            entity.Property(e => e.Processo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("processo");
            entity.Property(e => e.Reboque)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("reboque");
            entity.Property(e => e.Reboquista)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("reboquista");
            entity.Property(e => e.ResponsavelApreensao)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("responsavel apreensao");
            entity.Property(e => e.StatusLote)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("statusLote");
            entity.Property(e => e.TipoCobranca)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tipo cobranca");
            entity.Property(e => e.TipoVeiculo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipo_veiculo");
            entity.Property(e => e.Unidade)
                .HasMaxLength(21)
                .IsUnicode(false)
                .HasColumnName("unidade");
            entity.Property(e => e.ValorTotal)
                .HasColumnType("money")
                .HasColumnName("valor_total");
        });

        modelBuilder.Entity<VwDepAlterdataDocumento>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_alterdata_documento");

            entity.Property(e => e.AlterDataIdentificadorCliente)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Cliente)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CodigoEmpresa)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DataEntrega).HasColumnType("smalldatetime");
            entity.Property(e => e.Deposito)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IdentificadorNaturezaLancamentoCodigo)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IdentificadorNaturezaLancamentoDescricao)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.StatusCadastroCliente)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StatusCadastroDocumento)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwDepAlterdataLoteBaixa>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_alterdata_lote_baixa");

            entity.Property(e => e.CodigoEmpresa)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DataCadastro).HasColumnType("smalldatetime");
            entity.Property(e => e.DataDeBaixa).HasColumnType("smalldatetime");
            entity.Property(e => e.DataVencimento).HasColumnType("smalldatetime");
            entity.Property(e => e.IdentificadorContaBancaria)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IdentificadorFormaPagamento)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.IdentificadorTituloAreceber)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("IdentificadorTituloAReceber");
            entity.Property(e => e.LoteBaixaEnviado)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwDepAlterdataOperacao>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_alterdata_operacao");

            entity.Property(e => e.AliquotaIss).HasColumnType("smallmoney");
            entity.Property(e => e.CfopCodigo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CfopDescricao)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Cliente)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CnaeCodigo)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.CnaeCodigoFormatado)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.CnaeDescricao)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.CodigoEmpresa)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CodigoMunicipioIbge)
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.CodigoTributarioMunicipio)
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.DataAlteracao).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCadastro).HasColumnType("smalldatetime");
            entity.Property(e => e.Deposito)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IdentificadorNaturezaLancamentoCodigo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IdentificadorNaturezaLancamentoDescricao)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IdentificadorProdutoCodigo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IdentificadorProdutoDescricao)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ListaServico)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.ListaServicoDescricao)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.Municipio)
                .IsRequired()
                .HasMaxLength(75)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.OperacaoCodigo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OperacaoDescricao)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Uf)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS");
        });

        modelBuilder.Entity<VwDepAlterdataTituloReceber>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_alterdata_titulo_receber");

            entity.Property(e => e.CodigoEmpresa)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DataVencimento).HasColumnType("smalldatetime");
            entity.Property(e => e.IdentificadorPessoa)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwDepAtendimento>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_atendimento");

            entity.Property(e => e.Cliente)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Depósito)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IdAtendimento).HasColumnName("id_atendimento");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdDocumentoSap)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_documento_sap");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdStatusOperacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_status_operacao");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("numero_formulario_grv");
            entity.Property(e => e.StatusCadastroOrdensVendaSap)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status_cadastro_ordens_venda_sap");
            entity.Property(e => e.StatusCadastroSap)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status_cadastro_sap");
            entity.Property(e => e.StatusDoGrv)
                .IsRequired()
                .HasMaxLength(54)
                .IsUnicode(false)
                .HasColumnName("Status do GRV");
        });

        modelBuilder.Entity<VwDepAtendimentoLiberado>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_atendimento_liberado");

            entity.Property(e => e.Cliente)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DataAlteracao).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCadastro).HasColumnType("smalldatetime");
            entity.Property(e => e.DataEntrega).HasColumnType("smalldatetime");
            entity.Property(e => e.DataHoraInicioAtendimento).HasColumnType("datetime");
            entity.Property(e => e.Deposito)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FlagAtendimentoWs)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FlagPagamentoFinanciado)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FormaLiberacao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FormaLiberacaoCnh)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.FormaLiberacaoCpf)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.FormaLiberacaoNome)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FormaLiberacaoPlaca)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NotaFiscalBairro)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NotaFiscalCep)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NotaFiscalComplemento)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NotaFiscalCpf)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.NotaFiscalDdd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NotaFiscalEmail)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.NotaFiscalEndereco)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NotaFiscalMunicipio)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NotaFiscalNome)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NotaFiscalNumero)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.NotaFiscalTelefone)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.NotaFiscalTipoLogradouro)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.NotaFiscalUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.ProprietarioBairro)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProprietarioCep)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProprietarioComplemento)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProprietarioDdd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProprietarioDocumento)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.ProprietarioEndereco)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ProprietarioMunicipio)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProprietarioNome)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ProprietarioNumero)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ProprietarioTelefone)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.ProprietarioTipoDocumento)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.ProprietarioUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ResponsavelBairro)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ResponsavelCep)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ResponsavelCnh)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.ResponsavelComplemento)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ResponsavelDdd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ResponsavelDocumento)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.ResponsavelEndereco)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ResponsavelMunicipio)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ResponsavelNome)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ResponsavelNumero)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ResponsavelTelefone)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.ResponsavelUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StatusCadastroOrdensVendaSap)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StatusCadastroSap)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwDepAtendimentoRelacionado>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_atendimento_relacionado");

            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataHoraInicioAtendimento)
                .HasColumnType("datetime")
                .HasColumnName("data_hora_inicio_atendimento");
            entity.Property(e => e.DataImpressao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_impressao");
            entity.Property(e => e.FlagAtendimentoWs)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_atendimento_ws");
            entity.Property(e => e.FlagPagamentoFinanciado)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_pagamento_financiado");
            entity.Property(e => e.FormaLiberacao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("forma_liberacao");
            entity.Property(e => e.FormaLiberacaoCnh)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("forma_liberacao_cnh");
            entity.Property(e => e.FormaLiberacaoCpf)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("forma_liberacao_cpf");
            entity.Property(e => e.FormaLiberacaoNome)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("forma_liberacao_nome");
            entity.Property(e => e.FormaLiberacaoPlaca)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("forma_liberacao_placa");
            entity.Property(e => e.IdAtendimento).HasColumnName("id_atendimento");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdQualificacaoResponsavel).HasColumnName("id_qualificacao_responsavel");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.NomeUsuarioAlteracao)
                .HasMaxLength(152)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("nome_usuario_alteracao");
            entity.Property(e => e.NomeUsuarioCadastro)
                .IsRequired()
                .HasMaxLength(152)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("nome_usuario_cadastro");
            entity.Property(e => e.NotaFiscalBairro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_bairro");
            entity.Property(e => e.NotaFiscalCep)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nota_fiscal_cep");
            entity.Property(e => e.NotaFiscalComplemento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_complemento");
            entity.Property(e => e.NotaFiscalCpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_cpf");
            entity.Property(e => e.NotaFiscalDdd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nota_fiscal_ddd");
            entity.Property(e => e.NotaFiscalEmail)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_email");
            entity.Property(e => e.NotaFiscalEndereco)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_endereco");
            entity.Property(e => e.NotaFiscalIdTipoLogradouro).HasColumnName("nota_fiscal_id_tipo_logradouro");
            entity.Property(e => e.NotaFiscalInscricaoMunicipal)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_inscricao_municipal");
            entity.Property(e => e.NotaFiscalMunicipio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_municipio");
            entity.Property(e => e.NotaFiscalNome)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_nome");
            entity.Property(e => e.NotaFiscalNumero)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_numero");
            entity.Property(e => e.NotaFiscalTelefone)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_telefone");
            entity.Property(e => e.NotaFiscalTipoLogradouro)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("nota_fiscal_tipo_logradouro");
            entity.Property(e => e.NotaFiscalUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("nota_fiscal_uf");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("numero_formulario_grv");
            entity.Property(e => e.ProprietarioBairro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("proprietario_bairro");
            entity.Property(e => e.ProprietarioCep)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("proprietario_cep");
            entity.Property(e => e.ProprietarioComplemento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("proprietario_complemento");
            entity.Property(e => e.ProprietarioDdd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("proprietario_ddd");
            entity.Property(e => e.ProprietarioDocumento)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("proprietario_documento");
            entity.Property(e => e.ProprietarioEndereco)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("proprietario_endereco");
            entity.Property(e => e.ProprietarioIdTipoDocumento).HasColumnName("proprietario_id_tipo_documento");
            entity.Property(e => e.ProprietarioMunicipio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("proprietario_municipio");
            entity.Property(e => e.ProprietarioNome)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("proprietario_nome");
            entity.Property(e => e.ProprietarioNumero)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("proprietario_numero");
            entity.Property(e => e.ProprietarioTelefone)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("proprietario_telefone");
            entity.Property(e => e.ProprietarioUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("proprietario_uf");
            entity.Property(e => e.QualificacaoResponsavelDescricao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("qualificacao_responsavel_descricao");
            entity.Property(e => e.ResponsavelBairro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("responsavel_bairro");
            entity.Property(e => e.ResponsavelCep)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("responsavel_cep");
            entity.Property(e => e.ResponsavelCnh)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("responsavel_cnh");
            entity.Property(e => e.ResponsavelComplemento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("responsavel_complemento");
            entity.Property(e => e.ResponsavelDdd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("responsavel_ddd");
            entity.Property(e => e.ResponsavelDocumento)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("responsavel_documento");
            entity.Property(e => e.ResponsavelEndereco)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("responsavel_endereco");
            entity.Property(e => e.ResponsavelMunicipio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("responsavel_municipio");
            entity.Property(e => e.ResponsavelNome)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("responsavel_nome");
            entity.Property(e => e.ResponsavelNumero)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("responsavel_numero");
            entity.Property(e => e.ResponsavelTelefone)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("responsavel_telefone");
            entity.Property(e => e.ResponsavelUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("responsavel_uf");
            entity.Property(e => e.StatusCadastroOrdensVendaSap)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status_cadastro_ordens_venda_sap");
            entity.Property(e => e.StatusCadastroSap)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status_cadastro_sap");
            entity.Property(e => e.TotalImpressoes).HasColumnName("total_impressoes");
        });

        modelBuilder.Entity<VwDepAutoridadesResponsavei>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_autoridades_responsaveis");

            entity.Property(e => e.AutoridadesResponsaveisDivisao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("autoridades_responsaveis_divisao");
            entity.Property(e => e.AutoridadesResponsaveisFlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("autoridades_responsaveis_flag_ativo");
            entity.Property(e => e.IdAutoridadeResponsavel).HasColumnName("id_autoridade_responsavel");
            entity.Property(e => e.IdOrgaoEmissor).HasColumnName("id_orgao_emissor");
            entity.Property(e => e.OrgaoEmissorDescricao)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("orgao_emissor_descricao");
            entity.Property(e => e.OrgaoEmissorFlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("orgao_emissor_flag_ativo");
            entity.Property(e => e.OrgaoEmissorSigla)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("orgao_emissor_sigla");
            entity.Property(e => e.OrgaoEmissorUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("orgao_emissor_uf");
        });

        modelBuilder.Entity<VwDepBoleto>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_boleto");

            entity.Property(e => e.CedenteAgencia)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("cedente_agencia");
            entity.Property(e => e.CedenteBancoNome)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cedente_banco_nome");
            entity.Property(e => e.CedenteCodigo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cedente_codigo");
            entity.Property(e => e.CedenteCodigoFebraban)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cedente_codigo_febraban");
            entity.Property(e => e.CedenteContaCorrente)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cedente_conta_corrente");
            entity.Property(e => e.CedenteDocumento)
                .IsRequired()
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cedente_documento");
            entity.Property(e => e.CedenteDv)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("cedente_dv");
            entity.Property(e => e.CedenteNome)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cedente_nome");
            entity.Property(e => e.CedenteNossoNumero)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cedente_nosso_numero");
            entity.Property(e => e.IdFaturamento).HasColumnName("id_faturamento");
            entity.Property(e => e.NumeroDocumento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("numero_documento");
            entity.Property(e => e.SacadoBairro)
                .HasMaxLength(39)
                .IsUnicode(false)
                .HasColumnName("sacado_bairro");
            entity.Property(e => e.SacadoCarteira)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("sacado_carteira");
            entity.Property(e => e.SacadoCep)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("sacado_cep");
            entity.Property(e => e.SacadoCidade)
                .IsRequired()
                .HasMaxLength(29)
                .IsUnicode(false)
                .HasColumnName("sacado_cidade");
            entity.Property(e => e.SacadoDocumento)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("sacado_documento");
            entity.Property(e => e.SacadoEndereco)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("sacado_endereco");
            entity.Property(e => e.SacadoInstrucoes)
                .HasMaxLength(288)
                .IsUnicode(false)
                .HasColumnName("sacado_instrucoes");
            entity.Property(e => e.SacadoNome)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("sacado_nome");
            entity.Property(e => e.SacadoUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("sacado_uf");
            entity.Property(e => e.ValorBoleto)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("valor_boleto");
            entity.Property(e => e.Vencimento)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("vencimento");
        });

        modelBuilder.Entity<VwDepBoletoOld>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_boleto_old");

            entity.Property(e => e.CedenteAgencia)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("cedente_agencia");
            entity.Property(e => e.CedenteBancoNome)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cedente_banco_nome");
            entity.Property(e => e.CedenteCodigo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cedente_codigo");
            entity.Property(e => e.CedenteCodigoFebraban)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cedente_codigo_febraban");
            entity.Property(e => e.CedenteContaCorrente)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cedente_conta_corrente");
            entity.Property(e => e.CedenteDocumento)
                .IsRequired()
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cedente_documento");
            entity.Property(e => e.CedenteDv)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("cedente_dv");
            entity.Property(e => e.CedenteNome)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cedente_nome");
            entity.Property(e => e.CedenteNossoNumero)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cedente_nosso_numero");
            entity.Property(e => e.IdFaturamento).HasColumnName("id_faturamento");
            entity.Property(e => e.NumeroDocumento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("numero_documento");
            entity.Property(e => e.SacadoBairro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sacado_bairro");
            entity.Property(e => e.SacadoCarteira)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("sacado_carteira");
            entity.Property(e => e.SacadoCep)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("sacado_cep");
            entity.Property(e => e.SacadoCidade)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sacado_cidade");
            entity.Property(e => e.SacadoDocumento)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("sacado_documento");
            entity.Property(e => e.SacadoEndereco)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("sacado_endereco");
            entity.Property(e => e.SacadoInstrucoes)
                .IsRequired()
                .HasMaxLength(274)
                .IsUnicode(false)
                .HasColumnName("sacado_instrucoes");
            entity.Property(e => e.SacadoNome)
                .HasMaxLength(123)
                .IsUnicode(false)
                .HasColumnName("sacado_nome");
            entity.Property(e => e.SacadoUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("sacado_uf");
            entity.Property(e => e.ValorBoleto)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("valor_boleto");
            entity.Property(e => e.Vencimento)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("vencimento");
        });

        modelBuilder.Entity<VwDepCliente>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_clientes");

            entity.Property(e => e.Bairro)
                .HasMaxLength(150)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("bairro");
            entity.Property(e => e.Cep)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cep");
            entity.Property(e => e.Cnpj)
                .IsRequired()
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("cnpj");
            entity.Property(e => e.CodigoSap)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("codigo_sap");
            entity.Property(e => e.EnderecoCompleto)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasColumnName("endereco_completo");
            entity.Property(e => e.Estado)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("estado");
            entity.Property(e => e.FlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_ativo");
            entity.Property(e => e.FlagCadastrarQuilometragem)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_cadastrar_quilometragem");
            entity.Property(e => e.FlagClienteRealizaFaturamentoArrecadacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_cliente_realiza_faturamento_arrecadacao");
            entity.Property(e => e.FlagCobrarDiariasDiasCorridos)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_cobrar_diarias_dias_corridos");
            entity.Property(e => e.FlagEmissaoNotaFiscalSap)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_emissao_nota_fiscal_sap");
            entity.Property(e => e.FlagUsarHoraDiaria)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_usar_hora_diaria");
            entity.Property(e => e.HoraDiaria)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("hora_diaria");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.Logradouro)
                .HasMaxLength(150)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("logradouro");
            entity.Property(e => e.MaximoDiariasParaCobranca).HasColumnName("maximo_diarias_para_cobranca");
            entity.Property(e => e.MaximoDiasVencimento).HasColumnName("maximo_dias_vencimento");
            entity.Property(e => e.Municipio)
                .IsRequired()
                .HasMaxLength(75)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("municipio");
            entity.Property(e => e.Nome)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nome");
            entity.Property(e => e.TipoLogradouro)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("tipo_logradouro");
            entity.Property(e => e.Uf)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("uf");
        });

        modelBuilder.Entity<VwDepClientesDeposito>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_clientes_depositos");

            entity.Property(e => e.ClienteBairro)
                .HasMaxLength(150)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_bairro");
            entity.Property(e => e.ClienteCep)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_cep");
            entity.Property(e => e.ClienteCnpj)
                .IsRequired()
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("cliente_cnpj");
            entity.Property(e => e.ClienteCodigoSap)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("cliente_codigo_sap");
            entity.Property(e => e.ClienteDataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("cliente_data_alteracao");
            entity.Property(e => e.ClienteDataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("cliente_data_cadastro");
            entity.Property(e => e.ClienteDepositoFlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_deposito_flag_ativo");
            entity.Property(e => e.ClienteDepositoFlagCadastrarGrvBloqueado)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_deposito_flag_cadastrar_grv_bloqueado");
            entity.Property(e => e.ClienteDepositoFlagUtilizaSistemaMobileGgv)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_deposito_flag_utiliza_sistema_mobile_ggv");
            entity.Property(e => e.ClienteEnderecoCompleto)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasColumnName("cliente_endereco_completo");
            entity.Property(e => e.ClienteEstado)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_estado");
            entity.Property(e => e.ClienteFlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_flag_ativo");
            entity.Property(e => e.ClienteFlagCadastrarQuilometragem)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_flag_cadastrar_quilometragem");
            entity.Property(e => e.ClienteFlagClienteRealizaFaturamentoArrecadacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_flag_cliente_realiza_faturamento_arrecadacao");
            entity.Property(e => e.ClienteFlagCobrarDiariasDiasCorridos)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_flag_cobrar_diarias_dias_corridos");
            entity.Property(e => e.ClienteFlagEmissaoNotaFiscalSap)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_flag_emissao_nota_fiscal_sap");
            entity.Property(e => e.ClienteFlagLancarIpvaMultas)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_flag_lancar_ipva_multas");
            entity.Property(e => e.ClienteFlagPermiteAlteracaoTipoVeiculo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_flag_permite_alteracao_tipo_veiculo");
            entity.Property(e => e.ClienteFlagUsarHoraDiaria)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_flag_usar_hora_diaria");
            entity.Property(e => e.ClienteHoraDiaria)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("cliente_hora_diaria");
            entity.Property(e => e.ClienteIdAgenciaBancaria).HasColumnName("cliente_id_agencia_bancaria");
            entity.Property(e => e.ClienteIdEmpresa).HasColumnName("cliente_id_empresa");
            entity.Property(e => e.ClienteIdTipoMeioCobranca).HasColumnName("cliente_id_tipo_meio_cobranca");
            entity.Property(e => e.ClienteLogradouro)
                .HasMaxLength(150)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_logradouro");
            entity.Property(e => e.ClienteMaximoDiariasParaCobranca).HasColumnName("cliente_maximo_diarias_para_cobranca");
            entity.Property(e => e.ClienteMaximoDiasVencimento).HasColumnName("cliente_maximo_dias_vencimento");
            entity.Property(e => e.ClienteMetragemGuarda)
                .HasColumnType("numeric(5, 2)")
                .HasColumnName("cliente_metragem_guarda");
            entity.Property(e => e.ClienteMetragemTotal)
                .HasColumnType("numeric(5, 2)")
                .HasColumnName("cliente_metragem_total");
            entity.Property(e => e.ClienteMunicipio)
                .IsRequired()
                .HasMaxLength(75)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_municipio");
            entity.Property(e => e.ClienteNome)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cliente_nome");
            entity.Property(e => e.ClienteNomeUsuarioAlteracao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_nome_usuario_alteracao");
            entity.Property(e => e.ClienteNomeUsuarioCadastro)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_nome_usuario_cadastro");
            entity.Property(e => e.ClienteTipoLogradouro)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_tipo_logradouro");
            entity.Property(e => e.ClienteUf)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_uf");
            entity.Property(e => e.DepositoBairro)
                .HasMaxLength(150)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.DepositoCep)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DepositoEnderecoCompleto)
                .HasMaxLength(400)
                .IsUnicode(false);
            entity.Property(e => e.DepositoEstado)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.DepositoFlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("deposito_flag_ativo");
            entity.Property(e => e.DepositoLogradouro)
                .HasMaxLength(150)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.DepositoMunicipio)
                .HasMaxLength(75)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.DepositoNome)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("deposito_nome");
            entity.Property(e => e.DepositoTipoLogradouro)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.DepositoUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.GrvLimiteMinimoDatahoraGuarda).HasColumnName("grv_limite_minimo_datahora_guarda");
            entity.Property(e => e.GrvMinimoFotosExigidas).HasColumnName("grv_minimo_fotos_exigidas");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdClienteDeposito).HasColumnName("id_cliente_deposito");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdSapCondicaoPagamento).HasColumnName("id_sap_condicao_pagamento");
            entity.Property(e => e.IdTipoMeioCobranca).HasColumnName("id_tipo_meio_cobranca");
            entity.Property(e => e.SapCondicaoPagamentoCodigo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("sap_condicao_pagamento_codigo");
            entity.Property(e => e.SapCondicaoPagamentoDescricao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sap_condicao_pagamento_descricao");
            entity.Property(e => e.TiposMeiosCobrancasAlias)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tipos_meios_cobrancas_alias");
            entity.Property(e => e.TiposMeiosCobrancasCodigoSap)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipos_meios_cobrancas_codigo_sap");
            entity.Property(e => e.TiposMeiosCobrancasDescricao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipos_meios_cobrancas_descricao");
            entity.Property(e => e.TiposMeiosCobrancasFlagBanco)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipos_meios_cobrancas_flag_banco");
            entity.Property(e => e.TiposMeiosCobrancasFlagPossuiCodigoAutorizacaoCartao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipos_meios_cobrancas_flag_possui_codigo_autorizacao_cartao");
        });

        modelBuilder.Entity<VwDepDetranClienteDepositoApto>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_detran_cliente_deposito_apto");

            entity.Property(e => e.CodigoPatioDetro)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("codigo_patio_detro");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdClienteDeposito).HasColumnName("id_cliente_deposito");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdOrgaoEmissor).HasColumnName("id_orgao_emissor");
            entity.Property(e => e.IdTransacaoClienteDeposito).HasColumnName("id_transacao_cliente_deposito");
            entity.Property(e => e.IdTransacaoStatus).HasColumnName("id_transacao_status");
            entity.Property(e => e.IdTransacaoTipo).HasColumnName("id_transacao_tipo");
            entity.Property(e => e.OrgaoEmissorUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("orgao_emissor_uf");
            entity.Property(e => e.StatusDescricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("status_descricao");
            entity.Property(e => e.StatusTipoEvento)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status_tipo_evento");
            entity.Property(e => e.TipoCodigo)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo_codigo");
            entity.Property(e => e.TipoDescricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipo_descricao");
            entity.Property(e => e.TransacaoClienteDepositoFlagObrigatorio)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("transacao_cliente_deposito_flag_obrigatorio");
            entity.Property(e => e.TransacaoOrdenacao).HasColumnName("transacao_ordenacao");
        });

        modelBuilder.Entity<VwDepEquipamentosOpcionai>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_equipamentos_opcionais");

            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.IdEquipamentoOpcional)
                .HasColumnType("numeric(3, 0)")
                .HasColumnName("id_equipamento_opcional");
            entity.Property(e => e.IdEquipamentoOpcionalLocalizacao).HasColumnName("id_equipamento_opcional_localizacao");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.ItemObrigatorio)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("item_obrigatorio");
            entity.Property(e => e.Localizacao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("localizacao");
            entity.Property(e => e.OrdemVistoria).HasColumnName("ordem_vistoria");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status");
        });

        modelBuilder.Entity<VwDepFaturamento>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_faturamento");

            entity.Property(e => e.DataEmissaoDocumento)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_emissao_documento");
            entity.Property(e => e.DataEmissaoNotaFiscal)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_emissao_nota_fiscal");
            entity.Property(e => e.DataPagamento)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_pagamento");
            entity.Property(e => e.DataPrazoRetiradaVeiculo)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_prazo_retirada_veiculo");
            entity.Property(e => e.DataVencimento)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vencimento");
            entity.Property(e => e.IdAtendimento).HasColumnName("id_atendimento");
            entity.Property(e => e.IdDocumentoSap)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_documento_sap");
            entity.Property(e => e.IdFaturamento).HasColumnName("id_faturamento");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdStatusOperacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_status_operacao");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("numero_formulario_grv");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status");
            entity.Property(e => e.StatusCadastroOrdensVendaSap)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status_cadastro_ordens_venda_sap");
            entity.Property(e => e.StatusCadastroSap)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status_cadastro_sap");
            entity.Property(e => e.ValorFaturado)
                .HasColumnType("money")
                .HasColumnName("valor_faturado");
            entity.Property(e => e.ValorPagamento)
                .HasColumnType("money")
                .HasColumnName("valor_pagamento");
        });

        modelBuilder.Entity<VwDepFaturamentoComposicao>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_faturamento_composicao");

            entity.Property(e => e.CnaeCodigo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.CnaeCodigoFormatado)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.CnaeDescricao)
                .HasMaxLength(200)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.CnaeId).HasColumnName("CnaeID");
            entity.Property(e => e.FaturamentoStatus)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("faturamento_status");
            entity.Property(e => e.IdAtendimento).HasColumnName("id_atendimento");
            entity.Property(e => e.IdDocumentoSap)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_documento_sap");
            entity.Property(e => e.IdFaturamento).HasColumnName("id_faturamento");
            entity.Property(e => e.IdFaturamentoComposicao).HasColumnName("id_faturamento_composicao");
            entity.Property(e => e.IdFaturamentoServicoTipo).HasColumnName("id_faturamento_servico_tipo");
            entity.Property(e => e.IdFaturamentoServicoTipoVeiculo).HasColumnName("id_faturamento_servico_tipo_veiculo");
            entity.Property(e => e.IdFaturamentoTipoComposicao).HasColumnName("id_faturamento_tipo_composicao");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdStatusOperacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_status_operacao");
            entity.Property(e => e.IdUsuarioDesconto).HasColumnName("id_usuario_desconto");
            entity.Property(e => e.ListaServicoAliquotaIss).HasColumnType("smallmoney");
            entity.Property(e => e.ListaServicoDescricao)
                .HasMaxLength(500)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.ListaServicoId).HasColumnName("ListaServicoID");
            entity.Property(e => e.ListaServicoItemLista)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("numero_formulario_grv");
            entity.Property(e => e.ObservacaoDesconto)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("observacao_desconto");
            entity.Property(e => e.QuantidadeComposicao)
                .HasColumnType("smallmoney")
                .HasColumnName("quantidade_composicao");
            entity.Property(e => e.QuantidadeDesconto).HasColumnName("quantidade_desconto");
            entity.Property(e => e.SapTipoComposicaoCodigoMaterial)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SapTipoComposicaoDescricaoNotaFiscal)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SapTipoComposicaoTipoDocumentoVenda)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ServicosTiposDescricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("servicos_tipos_descricao");
            entity.Property(e => e.ServicosTiposFlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ServicosTiposFlagCobrancaPorHora)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ServicosTiposFlagCobrarTelaGrv)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ServicosTiposFlagImpressaoAgrupada)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ServicosTiposFlagNaoCobrarSeNaoUsouReboque)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ServicosTiposFlagRebocada)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ServicosTiposFlagServicoObrigatorio)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ServicosTiposFlagTributacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ServicosTiposOrdemImpressao).HasColumnName("servicos_tipos_ordem_impressao");
            entity.Property(e => e.ServicosTiposTipoCobranca)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("servicos_tipos_tipo_cobranca");
            entity.Property(e => e.StatusCadastroOrdensVendaSap)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status_cadastro_ordens_venda_sap");
            entity.Property(e => e.StatusCadastroSap)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status_cadastro_sap");
            entity.Property(e => e.TipoComposicao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo_composicao");
            entity.Property(e => e.TipoDesconto)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo_desconto");
            entity.Property(e => e.ValorComposicao)
                .HasColumnType("money")
                .HasColumnName("valor_composicao");
            entity.Property(e => e.ValorDesconto)
                .HasColumnType("money")
                .HasColumnName("valor_desconto");
            entity.Property(e => e.ValorFaturado)
                .HasColumnType("money")
                .HasColumnName("valor_faturado");
            entity.Property(e => e.ValorTipoComposicao)
                .HasColumnType("money")
                .HasColumnName("valor_tipo_composicao");
        });

        modelBuilder.Entity<VwDepFaturamentoComposicaoServicoSap>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_faturamento_composicao_servico_sap");

            entity.Property(e => e.CodigoMaterial)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codigo_material");
            entity.Property(e => e.DescricaoNotaFiscal)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("descricao_nota_fiscal");
            entity.Property(e => e.IdAtendimento).HasColumnName("id_atendimento");
            entity.Property(e => e.QuantidadeComposicao)
                .HasColumnType("money")
                .HasColumnName("quantidade_composicao");
            entity.Property(e => e.TipoDocumentoVenda)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo_documento_venda");
            entity.Property(e => e.ValorComposicao)
                .HasColumnType("money")
                .HasColumnName("valor_composicao");
            entity.Property(e => e.ValorDesconto)
                .HasColumnType("money")
                .HasColumnName("valor_desconto");
            entity.Property(e => e.ValorTipoComposicao)
                .HasColumnType("money")
                .HasColumnName("valor_tipo_composicao");
        });

        modelBuilder.Entity<VwDepFaturamentoComposicaoServicoSapAberto>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_faturamento_composicao_servico_sap_aberto");

            entity.Property(e => e.CodigoMaterial)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codigo_material");
            entity.Property(e => e.DescricaoNotaFiscal)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("descricao_nota_fiscal");
            entity.Property(e => e.IdAtendimento).HasColumnName("id_atendimento");
            entity.Property(e => e.IdFaturamento).HasColumnName("id_faturamento");
            entity.Property(e => e.IdFaturamentoComposicao).HasColumnName("id_faturamento_composicao");
            entity.Property(e => e.QuantidadeComposicao)
                .HasColumnType("smallmoney")
                .HasColumnName("quantidade_composicao");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status");
            entity.Property(e => e.TipoDocumentoVenda)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo_documento_venda");
            entity.Property(e => e.ValorComposicao)
                .HasColumnType("money")
                .HasColumnName("valor_composicao");
            entity.Property(e => e.ValorDesconto)
                .HasColumnType("money")
                .HasColumnName("valor_desconto");
            entity.Property(e => e.ValorTipoComposicao)
                .HasColumnType("money")
                .HasColumnName("valor_tipo_composicao");
        });

        modelBuilder.Entity<VwDepFaturamentoRegra>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_faturamento_regras");

            entity.Property(e => e.Cliente)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cliente");
            entity.Property(e => e.Codigo)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("codigo");
            entity.Property(e => e.DataVigenciaFinal)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vigencia_final");
            entity.Property(e => e.DataVigenciaInicial)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vigencia_inicial");
            entity.Property(e => e.Deposito)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("deposito");
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdFaturamentoRegra).HasColumnName("id_faturamento_regra");
            entity.Property(e => e.IdFaturamentoRegraTipo).HasColumnName("id_faturamento_regra_tipo");
            entity.Property(e => e.Valor)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("valor");
        });

        modelBuilder.Entity<VwDepFaturamentoSemCodigoSap>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_faturamento_sem_codigo_sap");

            entity.Property(e => e.DataEmissaoDocumento)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_emissao_documento");
            entity.Property(e => e.DataEmissaoNotaFiscal)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_emissao_nota_fiscal");
            entity.Property(e => e.DataFaturamento)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_faturamento");
            entity.Property(e => e.DataPagamento)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_pagamento");
            entity.Property(e => e.DataPrazoRetiradaVeiculo)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_prazo_retirada_veiculo");
            entity.Property(e => e.DataVencimento)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vencimento");
            entity.Property(e => e.IdAtendimento).HasColumnName("id_atendimento");
            entity.Property(e => e.IdDocumentoSap)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_documento_sap");
            entity.Property(e => e.IdFaturamento).HasColumnName("id_faturamento");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdStatusOperacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_status_operacao");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("numero_formulario_grv");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status");
            entity.Property(e => e.StatusCadastroOrdensVendaSap)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status_cadastro_ordens_venda_sap");
            entity.Property(e => e.StatusCadastroSap)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status_cadastro_sap");
            entity.Property(e => e.ValorFaturado)
                .HasColumnType("money")
                .HasColumnName("valor_faturado");
            entity.Property(e => e.ValorPagamento)
                .HasColumnType("money")
                .HasColumnName("valor_pagamento");
        });

        modelBuilder.Entity<VwDepFaturamentoServicosAssociado>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_faturamento_servicos_associados");

            entity.Property(e => e.ClienteCnpj)
                .IsRequired()
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("cliente_cnpj");
            entity.Property(e => e.ClienteCodigoSap)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("cliente_codigo_sap");
            entity.Property(e => e.ClienteFlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_flag_ativo");
            entity.Property(e => e.ClienteFlagClienteRealizaFaturamentoArrecadacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_flag_cliente_realiza_faturamento_arrecadacao");
            entity.Property(e => e.ClienteFlagCobrarDiariasDiasCorridos)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_flag_cobrar_diarias_dias_corridos");
            entity.Property(e => e.ClienteFlagEmissaoNotaFiscalSap)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_flag_emissao_nota_fiscal_sap");
            entity.Property(e => e.ClienteFlagUsarHoraDiaria)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_flag_usar_hora_diaria");
            entity.Property(e => e.ClienteHoraDiaria)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("cliente_hora_diaria");
            entity.Property(e => e.ClienteIdAgenciaBancaria).HasColumnName("cliente_id_agencia_bancaria");
            entity.Property(e => e.ClienteIdEmpresa).HasColumnName("cliente_id_empresa");
            entity.Property(e => e.ClienteIdTipoMeioCobranca).HasColumnName("cliente_id_tipo_meio_cobranca");
            entity.Property(e => e.ClienteMaximoDiariasParaCobranca).HasColumnName("cliente_maximo_diarias_para_cobranca");
            entity.Property(e => e.ClienteMaximoDiasVencimento).HasColumnName("cliente_maximo_dias_vencimento");
            entity.Property(e => e.ClienteMetragemGuarda)
                .HasColumnType("numeric(5, 2)")
                .HasColumnName("cliente_metragem_guarda");
            entity.Property(e => e.ClienteMetragemTotal)
                .HasColumnType("numeric(5, 2)")
                .HasColumnName("cliente_metragem_total");
            entity.Property(e => e.ClienteNome)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cliente_nome");
            entity.Property(e => e.CnaeCodigo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.CnaeCodigoFormatado)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.CnaeDescricao)
                .HasMaxLength(200)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.CnaeId).HasColumnName("CnaeID");
            entity.Property(e => e.CodigoMaterial)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codigo_material");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataVigenciaFinal)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vigencia_final");
            entity.Property(e => e.DataVigenciaInicial)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vigencia_inicial");
            entity.Property(e => e.DepositoFlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("deposito_flag_ativo");
            entity.Property(e => e.DepositoNome)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("deposito_nome");
            entity.Property(e => e.Descricao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.DescricaoConfiguracaoNfe)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FaturamentoProdutoCodigo)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("faturamento_produto_codigo");
            entity.Property(e => e.FaturamentoProdutoDescricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("faturamento_produto_descricao");
            entity.Property(e => e.FaturamentoRegraTipoCodigo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("faturamento_regra_tipo_codigo");
            entity.Property(e => e.FaturamentoRegraTipoDescricao)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("faturamento_regra_tipo_descricao");
            entity.Property(e => e.FaturamentoRegraTipoFlagAtivo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("faturamento_regra_tipo_flag_ativo");
            entity.Property(e => e.FaturamentoRegraTipoFlagPossuiValor)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("faturamento_regra_tipo_flag_possui_valor");
            entity.Property(e => e.FlagCobrarSomentePrimeiraFatura)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_cobrar_somente_primeira_fatura");
            entity.Property(e => e.FlagCobrarTelaGrv)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_cobrar_tela_grv");
            entity.Property(e => e.FlagEnviarInscricaoEstadual)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FlagEnviarValorIss)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FlagImpressaoAgrupada)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_impressao_agrupada");
            entity.Property(e => e.FlagNaoCobrarSeNaoUsouReboque)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_nao_cobrar_se_nao_usou_reboque");
            entity.Property(e => e.FlagPermiteAlteracaoValor)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_permite_alteracao_valor");
            entity.Property(e => e.FlagPermiteDesconto)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_permite_desconto");
            entity.Property(e => e.FlagRebocada)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_rebocada");
            entity.Property(e => e.FlagServicoObrigatorio)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_servico_obrigatorio");
            entity.Property(e => e.FlagServicoObrigatorioGlobal)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_servico_obrigatorio_global");
            entity.Property(e => e.FlagTributacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_tributacao");
            entity.Property(e => e.FormaCobranca)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("forma_cobranca");
            entity.Property(e => e.GrvLimiteMinimoDatahoraGuarda).HasColumnName("grv_limite_minimo_datahora_guarda");
            entity.Property(e => e.GrvMinimoFotosExigidas).HasColumnName("grv_minimo_fotos_exigidas");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdFaturamentoRegra).HasColumnName("id_faturamento_regra");
            entity.Property(e => e.IdFaturamentoRegraTipo).HasColumnName("id_faturamento_regra_tipo");
            entity.Property(e => e.IdFaturamentoServicoAssociado).HasColumnName("id_faturamento_servico_associado");
            entity.Property(e => e.IdFaturamentoServicoTipo).HasColumnName("id_faturamento_servico_tipo");
            entity.Property(e => e.IdSapCondicaoPagamento).HasColumnName("id_sap_condicao_pagamento");
            entity.Property(e => e.IdSapTipoComposicao).HasColumnName("id_sap_tipo_composicao");
            entity.Property(e => e.IdTipoMeioCobranca).HasColumnName("id_tipo_meio_cobranca");
            entity.Property(e => e.ListaServicoAliquotaIss).HasColumnType("smallmoney");
            entity.Property(e => e.ListaServicoDescricao)
                .HasMaxLength(500)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.ListaServicoId).HasColumnName("ListaServicoID");
            entity.Property(e => e.ListaServicoItemLista)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.NomeUsuarioAlteracao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("nome_usuario_alteracao");
            entity.Property(e => e.NomeUsuarioCadastro)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("nome_usuario_cadastro");
            entity.Property(e => e.OrdemImpressao).HasColumnName("ordem_impressao");
            entity.Property(e => e.PrecoPadrao)
                .HasColumnType("smallmoney")
                .HasColumnName("preco_padrao");
            entity.Property(e => e.PrecoValorMinimo)
                .HasColumnType("smallmoney")
                .HasColumnName("preco_valor_minimo");
            entity.Property(e => e.SapCodigoDescricao)
                .IsRequired()
                .HasMaxLength(63)
                .IsUnicode(false)
                .HasColumnName("sap_codigo_descricao");
            entity.Property(e => e.SapCondicaoPagamentoCodigo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("sap_condicao_pagamento_codigo");
            entity.Property(e => e.SapCondicaoPagamentoDescricao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sap_condicao_pagamento_descricao");
            entity.Property(e => e.SapDescricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sap_descricao");
            entity.Property(e => e.ServicoDescricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("servico_descricao");
            entity.Property(e => e.TipoCobranca)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo_cobranca");
            entity.Property(e => e.TiposMeiosCobrancasCodigoSap)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipos_meios_cobrancas_codigo_sap");
            entity.Property(e => e.TiposMeiosCobrancasDescricao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipos_meios_cobrancas_descricao");
            entity.Property(e => e.TiposMeiosCobrancasFlagBanco)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipos_meios_cobrancas_flag_banco");
            entity.Property(e => e.TiposMeiosCobrancasFlagPossuiCodigoAutorizacaoCartao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipos_meios_cobrancas_flag_possui_codigo_autorizacao_cartao");
        });

        modelBuilder.Entity<VwDepFaturamentoServicosAssociadosVeiculo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_faturamento_servicos_associados_veiculos");

            entity.Property(e => e.ClienteCnpj)
                .IsRequired()
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("cliente_cnpj");
            entity.Property(e => e.ClienteCodigoSap)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("cliente_codigo_sap");
            entity.Property(e => e.ClienteFlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_flag_ativo");
            entity.Property(e => e.ClienteFlagClienteRealizaFaturamentoArrecadacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_flag_cliente_realiza_faturamento_arrecadacao");
            entity.Property(e => e.ClienteFlagCobrarDiariasDiasCorridos)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_flag_cobrar_diarias_dias_corridos");
            entity.Property(e => e.ClienteFlagEmissaoNotaFiscalSap)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_flag_emissao_nota_fiscal_sap");
            entity.Property(e => e.ClienteFlagUsarHoraDiaria)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_flag_usar_hora_diaria");
            entity.Property(e => e.ClienteHoraDiaria)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("cliente_hora_diaria");
            entity.Property(e => e.ClienteIdAgenciaBancaria).HasColumnName("cliente_id_agencia_bancaria");
            entity.Property(e => e.ClienteIdEmpresa).HasColumnName("cliente_id_empresa");
            entity.Property(e => e.ClienteIdTipoMeioCobranca).HasColumnName("cliente_id_tipo_meio_cobranca");
            entity.Property(e => e.ClienteMaximoDiariasParaCobranca).HasColumnName("cliente_maximo_diarias_para_cobranca");
            entity.Property(e => e.ClienteMaximoDiasVencimento).HasColumnName("cliente_maximo_dias_vencimento");
            entity.Property(e => e.ClienteMetragemGuarda)
                .HasColumnType("numeric(5, 2)")
                .HasColumnName("cliente_metragem_guarda");
            entity.Property(e => e.ClienteMetragemTotal)
                .HasColumnType("numeric(5, 2)")
                .HasColumnName("cliente_metragem_total");
            entity.Property(e => e.ClienteNome)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cliente_nome");
            entity.Property(e => e.CodigoMaterial)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codigo_material");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataVigenciaFinal)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vigencia_final");
            entity.Property(e => e.DataVigenciaInicial)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vigencia_inicial");
            entity.Property(e => e.DepositoFlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("deposito_flag_ativo");
            entity.Property(e => e.DepositoNome)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("deposito_nome");
            entity.Property(e => e.Descricao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.FaturamentoProdutoCodigo)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("faturamento_produto_codigo");
            entity.Property(e => e.FaturamentoProdutoDescricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("faturamento_produto_descricao");
            entity.Property(e => e.FaturamentoRegraTipoCodigo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("faturamento_regra_tipo_codigo");
            entity.Property(e => e.FaturamentoRegraTipoDescricao)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("faturamento_regra_tipo_descricao");
            entity.Property(e => e.FaturamentoRegraTipoFlagAtivo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("faturamento_regra_tipo_flag_ativo");
            entity.Property(e => e.FaturamentoRegraTipoFlagPossuiValor)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("faturamento_regra_tipo_flag_possui_valor");
            entity.Property(e => e.FlagCobrarSomentePrimeiraFatura)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_cobrar_somente_primeira_fatura");
            entity.Property(e => e.FlagCobrarTelaGrv)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_cobrar_tela_grv");
            entity.Property(e => e.FlagImpressaoAgrupada)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_impressao_agrupada");
            entity.Property(e => e.FlagNaoCobrarSeNaoUsouReboque)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_nao_cobrar_se_nao_usou_reboque");
            entity.Property(e => e.FlagPermiteAlteracaoValor)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_permite_alteracao_valor");
            entity.Property(e => e.FlagPermiteDesconto)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_permite_desconto");
            entity.Property(e => e.FlagRebocada)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_rebocada");
            entity.Property(e => e.FlagServicoObrigatorio)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_servico_obrigatorio");
            entity.Property(e => e.FlagServicoObrigatorioGlobal)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_servico_obrigatorio_global");
            entity.Property(e => e.FlagTributacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_tributacao");
            entity.Property(e => e.FormaCobranca)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("forma_cobranca");
            entity.Property(e => e.GrvLimiteMinimoDatahoraGuarda).HasColumnName("grv_limite_minimo_datahora_guarda");
            entity.Property(e => e.GrvMinimoFotosExigidas).HasColumnName("grv_minimo_fotos_exigidas");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdFaturamentoRegra).HasColumnName("id_faturamento_regra");
            entity.Property(e => e.IdFaturamentoRegraTipo).HasColumnName("id_faturamento_regra_tipo");
            entity.Property(e => e.IdFaturamentoServicoAssociado).HasColumnName("id_faturamento_servico_associado");
            entity.Property(e => e.IdFaturamentoServicoTipo).HasColumnName("id_faturamento_servico_tipo");
            entity.Property(e => e.IdFaturamentoServicoTipoVeiculo).HasColumnName("id_faturamento_servico_tipo_veiculo");
            entity.Property(e => e.IdSapCondicaoPagamento).HasColumnName("id_sap_condicao_pagamento");
            entity.Property(e => e.IdSapTipoComposicao).HasColumnName("id_sap_tipo_composicao");
            entity.Property(e => e.IdTipoMeioCobranca).HasColumnName("id_tipo_meio_cobranca");
            entity.Property(e => e.IdTipoVeiculo).HasColumnName("id_tipo_veiculo");
            entity.Property(e => e.NomeUsuarioAlteracao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("nome_usuario_alteracao");
            entity.Property(e => e.NomeUsuarioCadastro)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("nome_usuario_cadastro");
            entity.Property(e => e.OrdemImpressao).HasColumnName("ordem_impressao");
            entity.Property(e => e.PrecoPadrao)
                .HasColumnType("smallmoney")
                .HasColumnName("preco_padrao");
            entity.Property(e => e.PrecoValorMinimo)
                .HasColumnType("smallmoney")
                .HasColumnName("preco_valor_minimo");
            entity.Property(e => e.SapCodigoDescricao)
                .IsRequired()
                .HasMaxLength(63)
                .IsUnicode(false)
                .HasColumnName("sap_codigo_descricao");
            entity.Property(e => e.SapCondicaoPagamentoCodigo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("sap_condicao_pagamento_codigo");
            entity.Property(e => e.SapCondicaoPagamentoDescricao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sap_condicao_pagamento_descricao");
            entity.Property(e => e.SapDescricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sap_descricao");
            entity.Property(e => e.ServicoDescricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("servico_descricao");
            entity.Property(e => e.TipoCobranca)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo_cobranca");
            entity.Property(e => e.TipoVeiculosFlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo_veiculos_flag_ativo");
            entity.Property(e => e.TipoVeiculosFlagNaoRequerCnhNaLiberacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo_veiculos_flag_nao_requer_cnh_na_liberacao");
            entity.Property(e => e.TipoVeiculosNome)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipo_veiculos_nome");
            entity.Property(e => e.TiposMeiosCobrancasCodigoSap)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipos_meios_cobrancas_codigo_sap");
            entity.Property(e => e.TiposMeiosCobrancasDescricao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipos_meios_cobrancas_descricao");
            entity.Property(e => e.TiposMeiosCobrancasFlagBanco)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipos_meios_cobrancas_flag_banco");
            entity.Property(e => e.TiposMeiosCobrancasFlagPossuiCodigoAutorizacaoCartao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipos_meios_cobrancas_flag_possui_codigo_autorizacao_cartao");
            entity.Property(e => e.VeiculoDescricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("veiculo_descricao");
        });

        modelBuilder.Entity<VwDepFaturamentoServicosGrv>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_faturamento_servicos_grv");

            entity.Property(e => e.ClienteCnpj)
                .IsRequired()
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("cliente_cnpj");
            entity.Property(e => e.ClienteCodigoSap)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("cliente_codigo_sap");
            entity.Property(e => e.ClienteFlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_flag_ativo");
            entity.Property(e => e.ClienteFlagClienteRealizaFaturamentoArrecadacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_flag_cliente_realiza_faturamento_arrecadacao");
            entity.Property(e => e.ClienteFlagCobrarDiariasDiasCorridos)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_flag_cobrar_diarias_dias_corridos");
            entity.Property(e => e.ClienteFlagEmissaoNotaFiscalSap)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_flag_emissao_nota_fiscal_sap");
            entity.Property(e => e.ClienteFlagUsarHoraDiaria)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_flag_usar_hora_diaria");
            entity.Property(e => e.ClienteHoraDiaria)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("cliente_hora_diaria");
            entity.Property(e => e.ClienteIdAgenciaBancaria).HasColumnName("cliente_id_agencia_bancaria");
            entity.Property(e => e.ClienteIdEmpresa).HasColumnName("cliente_id_empresa");
            entity.Property(e => e.ClienteIdTipoMeioCobranca).HasColumnName("cliente_id_tipo_meio_cobranca");
            entity.Property(e => e.ClienteMaximoDiariasParaCobranca).HasColumnName("cliente_maximo_diarias_para_cobranca");
            entity.Property(e => e.ClienteMaximoDiasVencimento).HasColumnName("cliente_maximo_dias_vencimento");
            entity.Property(e => e.ClienteMetragemGuarda)
                .HasColumnType("numeric(5, 2)")
                .HasColumnName("cliente_metragem_guarda");
            entity.Property(e => e.ClienteMetragemTotal)
                .HasColumnType("numeric(5, 2)")
                .HasColumnName("cliente_metragem_total");
            entity.Property(e => e.ClienteNome)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cliente_nome");
            entity.Property(e => e.CodigoMaterial)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codigo_material");
            entity.Property(e => e.DataVigenciaFinal)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vigencia_final");
            entity.Property(e => e.DataVigenciaInicial)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vigencia_inicial");
            entity.Property(e => e.DepositoFlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("deposito_flag_ativo");
            entity.Property(e => e.DepositoNome)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("deposito_nome");
            entity.Property(e => e.Descricao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.FaturamentoProdutoCodigo)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("faturamento_produto_codigo");
            entity.Property(e => e.FaturamentoProdutoDescricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("faturamento_produto_descricao");
            entity.Property(e => e.FaturamentoRegraTipoCodigo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("faturamento_regra_tipo_codigo");
            entity.Property(e => e.FaturamentoRegraTipoDescricao)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("faturamento_regra_tipo_descricao");
            entity.Property(e => e.FaturamentoRegraTipoFlagAtivo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("faturamento_regra_tipo_flag_ativo");
            entity.Property(e => e.FaturamentoRegraTipoFlagPossuiValor)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("faturamento_regra_tipo_flag_possui_valor");
            entity.Property(e => e.FlagCobrarSomentePrimeiraFatura)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_cobrar_somente_primeira_fatura");
            entity.Property(e => e.FlagCobrarTelaGrv)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_cobrar_tela_grv");
            entity.Property(e => e.FlagImpressaoAgrupada)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_impressao_agrupada");
            entity.Property(e => e.FlagNaoCobrarSeNaoUsouReboque)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_nao_cobrar_se_nao_usou_reboque");
            entity.Property(e => e.FlagPermiteAlteracaoValor)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_permite_alteracao_valor");
            entity.Property(e => e.FlagPermiteDesconto)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_permite_desconto");
            entity.Property(e => e.FlagRealizarCobranca)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_realizar_cobranca");
            entity.Property(e => e.FlagRebocada)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_rebocada");
            entity.Property(e => e.FlagServicoObrigatorio)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_servico_obrigatorio");
            entity.Property(e => e.FlagServicoObrigatorioGlobal)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_servico_obrigatorio_global");
            entity.Property(e => e.FlagTributacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_tributacao");
            entity.Property(e => e.FormaCobranca)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("forma_cobranca");
            entity.Property(e => e.GrvLimiteMinimoDatahoraGuarda).HasColumnName("grv_limite_minimo_datahora_guarda");
            entity.Property(e => e.GrvMinimoFotosExigidas).HasColumnName("grv_minimo_fotos_exigidas");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdFaturamentoRegraTipo).HasColumnName("id_faturamento_regra_tipo");
            entity.Property(e => e.IdFaturamentoServicoAssociado).HasColumnName("id_faturamento_servico_associado");
            entity.Property(e => e.IdFaturamentoServicoGrv).HasColumnName("id_faturamento_servico_grv");
            entity.Property(e => e.IdFaturamentoServicoTipo).HasColumnName("id_faturamento_servico_tipo");
            entity.Property(e => e.IdFaturamentoServicoTipoVeiculo).HasColumnName("id_faturamento_servico_tipo_veiculo");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdSapCondicaoPagamento).HasColumnName("id_sap_condicao_pagamento");
            entity.Property(e => e.IdSapTipoComposicao).HasColumnName("id_sap_tipo_composicao");
            entity.Property(e => e.IdTipoMeioCobranca).HasColumnName("id_tipo_meio_cobranca");
            entity.Property(e => e.IdTipoVeiculo).HasColumnName("id_tipo_veiculo");
            entity.Property(e => e.IdUsuarioDesconto).HasColumnName("id_usuario_desconto");
            entity.Property(e => e.NomeUsuarioDesconto)
                .HasMaxLength(152)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("nome_usuario_desconto");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("numero_formulario_grv");
            entity.Property(e => e.ObservacaoDesconto)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("observacao_desconto");
            entity.Property(e => e.OrdemImpressao).HasColumnName("ordem_impressao");
            entity.Property(e => e.PrecoPadrao)
                .HasColumnType("smallmoney")
                .HasColumnName("preco_padrao");
            entity.Property(e => e.PrecoValorMinimo)
                .HasColumnType("smallmoney")
                .HasColumnName("preco_valor_minimo");
            entity.Property(e => e.QuantidadeDesconto).HasColumnName("quantidade_desconto");
            entity.Property(e => e.SapCodigoDescricao)
                .IsRequired()
                .HasMaxLength(63)
                .IsUnicode(false)
                .HasColumnName("sap_codigo_descricao");
            entity.Property(e => e.SapCondicaoPagamentoCodigo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("sap_condicao_pagamento_codigo");
            entity.Property(e => e.SapCondicaoPagamentoDescricao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sap_condicao_pagamento_descricao");
            entity.Property(e => e.SapDescricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sap_descricao");
            entity.Property(e => e.ServicoDescricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("servico_descricao");
            entity.Property(e => e.TempoTrabalhado)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("tempo_trabalhado");
            entity.Property(e => e.TipoCobranca)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo_cobranca");
            entity.Property(e => e.TipoDesconto)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo_desconto");
            entity.Property(e => e.TipoVeiculosFlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo_veiculos_flag_ativo");
            entity.Property(e => e.TipoVeiculosFlagNaoRequerCnhNaLiberacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo_veiculos_flag_nao_requer_cnh_na_liberacao");
            entity.Property(e => e.TipoVeiculosNome)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipo_veiculos_nome");
            entity.Property(e => e.TiposMeiosCobrancasCodigoSap)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipos_meios_cobrancas_codigo_sap");
            entity.Property(e => e.TiposMeiosCobrancasDescricao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipos_meios_cobrancas_descricao");
            entity.Property(e => e.TiposMeiosCobrancasFlagBanco)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipos_meios_cobrancas_flag_banco");
            entity.Property(e => e.TiposMeiosCobrancasFlagPossuiCodigoAutorizacaoCartao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipos_meios_cobrancas_flag_possui_codigo_autorizacao_cartao");
            entity.Property(e => e.Valor)
                .HasColumnType("smallmoney")
                .HasColumnName("valor");
            entity.Property(e => e.ValorDesconto)
                .HasColumnType("money")
                .HasColumnName("valor_desconto");
            entity.Property(e => e.VeiculoDescricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("veiculo_descricao");
        });

        modelBuilder.Entity<VwDepGrvAptoEmissaoNfe>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_grv_apto_emissao_nfe");

            entity.Property(e => e.Cliente)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DataLiberacao).HasColumnType("smalldatetime");
            entity.Property(e => e.Deposito)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Empresa)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.InscricaoEstadual)
                .HasMaxLength(13)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.InscricaoMunicipal)
                .HasMaxLength(15)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.Token)
                .HasMaxLength(32)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS");
        });

        modelBuilder.Entity<VwDepGrvAptoFaturamento>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_grv_apto_faturamento");

            entity.Property(e => e.Chassi)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("chassi");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdGrv)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_grv");
            entity.Property(e => e.IdStatusOperacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_status_operacao");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("numero_formulario_grv");
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa");
            entity.Property(e => e.Renavam)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("renavam");
        });

        modelBuilder.Entity<VwDepGrvDocumento>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_grv_documentos");

            entity.Property(e => e.ArquivoNomeReal)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ArquivoRemoto)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.DataCadastro).HasColumnType("smalldatetime");
            entity.Property(e => e.DataExclusao).HasColumnType("smalldatetime");
            entity.Property(e => e.DiretorioRemoto)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GrvDocumentosId).HasColumnName("GrvDocumentosID");
            entity.Property(e => e.GrvId).HasColumnName("GrvID");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.Qualificacao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UsuarioCadastroId).HasColumnName("UsuarioCadastroID");
            entity.Property(e => e.UsuarioExclusaoId).HasColumnName("UsuarioExclusaoID");
        });

        modelBuilder.Entity<VwDepGrvEquipamento>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_grv_equipamentos");

            entity.Property(e => e.AvariaDescricao)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("avaria_descricao");
            entity.Property(e => e.Avariado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("avariado");
            entity.Property(e => e.EquipamentoItemObrigatorio)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("equipamento_item_obrigatorio");
            entity.Property(e => e.EquipamentoOpcionalDescricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("equipamento_opcional_descricao");
            entity.Property(e => e.EquipamentoOrdemVistoria).HasColumnName("equipamento_ordem_vistoria");
            entity.Property(e => e.FlagPossuiEquipamento)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_possui_equipamento");
            entity.Property(e => e.IdCondutorEquipamentoOpcional).HasColumnName("id_condutor_equipamento_opcional");
            entity.Property(e => e.IdEquipamentoOpcional)
                .HasColumnType("numeric(3, 0)")
                .HasColumnName("id_equipamento_opcional");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdPreGrvAvarias).HasColumnName("id_pre_grv_avarias");
            entity.Property(e => e.IdTipoVeiculo).HasColumnName("id_tipo_veiculo");
            entity.Property(e => e.IdUsuarioNaoConformidade).HasColumnName("id_usuario_nao_conformidade");
            entity.Property(e => e.NaoConformidadeDataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("nao_conformidade_data_cadastro");
            entity.Property(e => e.NaoConformidadeExplicacao)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("nao_conformidade_explicacao");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("numero_formulario_grv");
            entity.Property(e => e.TipoVeiculoDescricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipo_veiculo_descricao");
            entity.Property(e => e.UsuarioNaoConformidadeLogin)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("usuario_nao_conformidade_login");
            entity.Property(e => e.UsuarioNaoConformidadeNome)
                .HasMaxLength(152)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("usuario_nao_conformidade_nome");
        });

        modelBuilder.Entity<VwDepGrvEquipamentosPorTipoVeiculo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_grv_equipamentos_por_tipo_veiculo");

            entity.Property(e => e.EquipamentoItemObrigatorio)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("equipamento_item_obrigatorio");
            entity.Property(e => e.EquipamentoOpcionalDescricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("equipamento_opcional_descricao");
            entity.Property(e => e.EquipamentoOrdemVistoria).HasColumnName("equipamento_ordem_vistoria");
            entity.Property(e => e.IdEquipamentoOpcional)
                .HasColumnType("numeric(3, 0)")
                .HasColumnName("id_equipamento_opcional");
            entity.Property(e => e.IdTipoVeiculo).HasColumnName("id_tipo_veiculo");
            entity.Property(e => e.TipoVeiculoDescricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipo_veiculo_descricao");
        });

        modelBuilder.Entity<VwDepLeilaoArrematante>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_leilao_arrematante");

            entity.Property(e => e.ArrematanteBairro)
                .IsUnicode(false)
                .HasColumnName("arrematante_bairro");
            entity.Property(e => e.ArrematanteCep)
                .IsUnicode(false)
                .HasColumnName("arrematante_cep");
            entity.Property(e => e.ArrematanteCidade)
                .IsUnicode(false)
                .HasColumnName("arrematante_cidade");
            entity.Property(e => e.ArrematanteComplemento)
                .IsUnicode(false)
                .HasColumnName("arrematante_complemento");
            entity.Property(e => e.ArrematanteCpfCnpj)
                .IsUnicode(false)
                .HasColumnName("arrematante_cpf_cnpj");
            entity.Property(e => e.ArrematanteEmail)
                .IsUnicode(false)
                .HasColumnName("arrematante_email");
            entity.Property(e => e.ArrematanteEstado)
                .IsUnicode(false)
                .HasColumnName("arrematante_estado");
            entity.Property(e => e.ArrematanteLogradouro)
                .IsUnicode(false)
                .HasColumnName("arrematante_logradouro");
            entity.Property(e => e.ArrematanteNomeArrematante)
                .IsUnicode(false)
                .HasColumnName("arrematante_nome_arrematante");
            entity.Property(e => e.ArrematanteNumero)
                .IsUnicode(false)
                .HasColumnName("arrematante_numero");
            entity.Property(e => e.ArrematanteTelefoneCelular)
                .IsUnicode(false)
                .HasColumnName("arrematante_telefone_celular");
            entity.Property(e => e.ArrematanteTelefoneFixo)
                .IsUnicode(false)
                .HasColumnName("arrematante_telefone_fixo");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
        });

        modelBuilder.Entity<VwDepLeilaoArrematanteOld>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_leilao_arrematante_old");

            entity.Property(e => e.ArrematanteBairro)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("arrematante_bairro");
            entity.Property(e => e.ArrematanteCep)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("arrematante_cep");
            entity.Property(e => e.ArrematanteCidade)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("arrematante_cidade");
            entity.Property(e => e.ArrematanteComplemento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("arrematante_complemento");
            entity.Property(e => e.ArrematanteCpfCnpj)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("arrematante_cpf_cnpj");
            entity.Property(e => e.ArrematanteEmail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("arrematante_email");
            entity.Property(e => e.ArrematanteEstado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("arrematante_estado");
            entity.Property(e => e.ArrematanteLogradouro)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("arrematante_logradouro");
            entity.Property(e => e.ArrematanteNomeArrematante)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("arrematante_nome_arrematante");
            entity.Property(e => e.ArrematanteNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("arrematante_numero");
            entity.Property(e => e.ArrematanteTelefoneCelular)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("arrematante_telefone_celular");
            entity.Property(e => e.ArrematanteTelefoneFixo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("arrematante_telefone_fixo");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
        });

        modelBuilder.Entity<VwDepLiberacaoLeilao>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_liberacao_leilao");

            entity.Property(e => e.Ano)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("ano");
            entity.Property(e => e.ArrematanteCpfCnpj)
                .IsUnicode(false)
                .HasColumnName("arrematante_cpf_cnpj");
            entity.Property(e => e.ArrematanteNomeArrematante)
                .IsUnicode(false)
                .HasColumnName("arrematante_nome_arrematante");
            entity.Property(e => e.Chassi)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("chassi");
            entity.Property(e => e.CodigoLote)
                .IsUnicode(false)
                .HasColumnName("codigo_lote");
            entity.Property(e => e.Cor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cor");
            entity.Property(e => e.DataAtual)
                .HasColumnType("datetime")
                .HasColumnName("data_atual");
            entity.Property(e => e.EnderecoCompleto)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasColumnName("endereco_completo");
            entity.Property(e => e.GrvEstacionamentoNumeroVaga)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("grv_estacionamento_numero_vaga");
            entity.Property(e => e.GrvEstacionamentoSetor)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("grv_estacionamento_setor");
            entity.Property(e => e.GrvNumeroChave)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("grv_numero_chave");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.MarcaModelo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("marca_modelo");
            entity.Property(e => e.Mensagem1)
                .IsUnicode(false)
                .HasColumnName("mensagem1");
            entity.Property(e => e.Mensagem2)
                .IsUnicode(false)
                .HasColumnName("mensagem2");
            entity.Property(e => e.Mensagem3)
                .IsRequired()
                .HasMaxLength(94)
                .IsUnicode(false)
                .HasColumnName("mensagem3");
            entity.Property(e => e.Mensagem4)
                .IsRequired()
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("mensagem4");
            entity.Property(e => e.Mensagem5)
                .IsRequired()
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("mensagem5");
            entity.Property(e => e.Mensagem6)
                .HasMaxLength(252)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("mensagem6");
            entity.Property(e => e.Nome)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nome");
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("placa");
            entity.Property(e => e.Processo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("processo");
            entity.Property(e => e.Registro)
                .IsRequired()
                .HasMaxLength(19)
                .IsUnicode(false)
                .HasColumnName("registro");
            entity.Property(e => e.Renavam)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("renavam");
        });

        modelBuilder.Entity<VwDepLiberacaoLeilaoOld>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_liberacao_leilao_old");

            entity.Property(e => e.Ano)
                .HasMaxLength(9)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("ano");
            entity.Property(e => e.ArrematanteCpfCnpj)
                .HasMaxLength(105)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("arrematante_cpf_cnpj");
            entity.Property(e => e.ArrematanteNomeArrematante)
                .HasMaxLength(125)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("arrematante_nome_arrematante");
            entity.Property(e => e.Chassi)
                .HasMaxLength(17)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("chassi");
            entity.Property(e => e.CodigoLote).HasColumnName("codigo_lote");
            entity.Property(e => e.Cor)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cor");
            entity.Property(e => e.DataAtual)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("data_atual");
            entity.Property(e => e.EnderecoCompleto)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasColumnName("endereco_completo");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.MarcaModelo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("marca_modelo");
            entity.Property(e => e.Mensagem1)
                .HasMaxLength(770)
                .IsUnicode(false)
                .HasColumnName("mensagem1");
            entity.Property(e => e.Mensagem2)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("mensagem2");
            entity.Property(e => e.Mensagem3)
                .IsRequired()
                .HasMaxLength(94)
                .IsUnicode(false)
                .HasColumnName("mensagem3");
            entity.Property(e => e.Mensagem4)
                .IsRequired()
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("mensagem4");
            entity.Property(e => e.Mensagem5)
                .IsRequired()
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("mensagem5");
            entity.Property(e => e.Mensagem6)
                .HasMaxLength(252)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("mensagem6");
            entity.Property(e => e.Nome)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nome");
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("placa");
            entity.Property(e => e.Registro)
                .IsRequired()
                .HasMaxLength(19)
                .IsUnicode(false)
                .HasColumnName("registro");
            entity.Property(e => e.Renavam)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("renavam");
        });

        modelBuilder.Entity<VwDepLiberacoesGrv>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_liberacoes_grv");

            entity.Property(e => e.DataPagamento)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_pagamento");
            entity.Property(e => e.DescricaoServico)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.IdAutoridadeResponsavel).HasColumnName("id_autoridade_responsavel");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdReboque).HasColumnName("id_reboque");
            entity.Property(e => e.IdReboquista).HasColumnName("id_reboquista");
            entity.Property(e => e.IdTarifaTipoVeiculo).HasColumnName("id_tarifa_tipo_veiculo");
            entity.Property(e => e.NomeCliente)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NomeDeposito)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("numero_formulario_grv");
            entity.Property(e => e.QuantidadeComposicao).HasColumnName("quantidade_composicao");
            entity.Property(e => e.ValorTipoComposicao)
                .HasColumnType("money")
                .HasColumnName("valor_tipo_composicao");
        });

        modelBuilder.Entity<VwDepMaxNumeroGrvPorClidep>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_max_numero_grv_por_clidep");

            entity.Property(e => e.Cliente)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Depósito)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ÚltimoNúmeroFormulárioGrv)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("ÚltimoNúmeroFormulárioGRV");
        });

        modelBuilder.Entity<VwDepNfe>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_nfe");

            entity.Property(e => e.Cliente)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Cnpj)
                .IsRequired()
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("CNPJ");
            entity.Property(e => e.DataCadastro).HasColumnType("smalldatetime");
            entity.Property(e => e.DataEmissao).HasColumnType("datetime");
            entity.Property(e => e.Deposito)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Empresa)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StatusDescricao)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwDepNfeErro>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_nfe_erros");

            entity.Property(e => e.Cliente)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cliente");
            entity.Property(e => e.CodigoErro)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CorrecaoErro)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.DataHoraCadastro).HasColumnType("smalldatetime");
            entity.Property(e => e.Deposito)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("deposito");
            entity.Property(e => e.MensagemErro)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("numero_formulario_grv");
            entity.Property(e => e.OrigemErro)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwDepNfeFaturamentoComposicao>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_nfe_faturamento_composicao");

            entity.Property(e => e.Cnae)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.DescricaoConfiguracaoNfe)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.Servico)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS");
        });

        modelBuilder.Entity<VwDepNfeFaturamentoComposicaoAgrupado>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_nfe_faturamento_composicao_agrupado");

            entity.Property(e => e.Cnae)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.FlagEnviarInscricaoEstadual)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FlagEnviarValorIss)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.Servico)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.TotalComDesconto).HasColumnType("money");
        });

        modelBuilder.Entity<VwDepNfeFaturamentoComposicaoAgrupadoDescricao>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_nfe_faturamento_composicao_agrupado_descricao");

            entity.Property(e => e.Cnae)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.DescricaoConfiguracaoNfe)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FlagEnviarInscricaoEstadual)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FlagEnviarValorIss)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.QuantidadeComposicao).HasColumnType("money");
            entity.Property(e => e.Servico)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.TipoDesconto)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TotalComDesconto).HasColumnType("money");
            entity.Property(e => e.ValorCalculadoSemDesconto).HasColumnType("money");
            entity.Property(e => e.ValorDesconto).HasColumnType("money");
            entity.Property(e => e.ValorTipoComposicao).HasColumnType("money");
        });

        modelBuilder.Entity<VwDepNfeFaturamentoComposicaoAgrupadoDescricaoPorFaturamento>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_nfe_faturamento_composicao_agrupado_descricao_por_faturamento");

            entity.Property(e => e.Cnae)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.DescricaoConfiguracaoNfe)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FlagEnviarInscricaoEstadual)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FlagEnviarValorIss)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.QuantidadeComposicao).HasColumnType("money");
            entity.Property(e => e.Servico)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.TipoDesconto)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TotalComDesconto).HasColumnType("money");
            entity.Property(e => e.ValorCalculadoSemDesconto).HasColumnType("money");
            entity.Property(e => e.ValorDesconto).HasColumnType("money");
            entity.Property(e => e.ValorTipoComposicao).HasColumnType("money");
        });

        modelBuilder.Entity<VwDepNfeFaturamentoComposicaoAgrupadoPorFaturamento>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_nfe_faturamento_composicao_agrupado_por_faturamento");

            entity.Property(e => e.Cnae)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.FlagEnviarInscricaoEstadual)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FlagEnviarValorIss)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.Servico)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.TotalComDesconto).HasColumnType("money");
        });

        modelBuilder.Entity<VwDepNfeFaturamentoComposicaoPorFatura>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_nfe_faturamento_composicao_por_fatura");

            entity.Property(e => e.Cnae)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.DescricaoConfiguracaoNfe)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.Servico)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS");
        });

        modelBuilder.Entity<VwDepNfeFaturamentoComposicaoTipo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_nfe_faturamento_composicao_tipo");

            entity.Property(e => e.CnaeCodigo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.CnaeDescricao)
                .HasMaxLength(200)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.ListaServicoAliquotaIss)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.ListaServicoDescricao)
                .HasMaxLength(500)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.ListaServicoItemLista)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.QuantidadeAlterada).HasColumnType("smallmoney");
            entity.Property(e => e.QuantidadeCobranca).HasColumnType("smallmoney");
            entity.Property(e => e.ServicoAssociadoDataVigenciaFinal).HasColumnType("smalldatetime");
            entity.Property(e => e.ServicoAssociadoDataVigenciaInicial).HasColumnType("smalldatetime");
            entity.Property(e => e.ServicoAssociadoDescricao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ServicoTipoCobrancaDescricao)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.TipoCobranca)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TipoDesconto)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TipoServicoDescricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ValorComposicao).HasColumnType("money");
            entity.Property(e => e.ValorDesconto).HasColumnType("money");
            entity.Property(e => e.ValorFaturado).HasColumnType("money");
            entity.Property(e => e.ValorTipoComposicao).HasColumnType("money");
        });

        modelBuilder.Entity<VwDepNfeImagen>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_nfe_imagens");

            entity.Property(e => e.Cnpj)
                .IsRequired()
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.DataAlteracao).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCadastro).HasColumnType("smalldatetime");
            entity.Property(e => e.GrvId).HasColumnName("GrvID");
            entity.Property(e => e.NfeId).HasColumnName("NfeID");
            entity.Property(e => e.NfeImagemId).HasColumnName("NfeImagemID");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UsuarioCadastroId).HasColumnName("UsuarioCadastroID");
        });

        modelBuilder.Entity<VwDepNfeRegra>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_nfe_regras");

            entity.Property(e => e.Cliente)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DataAlteracao).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCadastro).HasColumnType("smalldatetime");
            entity.Property(e => e.Deposito)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RegraCodigo)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RegraDescricao)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UsuarioAlteracao)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UsuarioCadastro)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Valor)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwDepObterTermoBa>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_obter_termo_ba");

            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.TermoRemocao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("termoRemocao");
        });

        modelBuilder.Entity<VwDepPerfilAcessoSubModulo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_perfil_acesso_sub_modulos");

            entity.Property(e => e.Crud)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("crud");
            entity.Property(e => e.IdModulo).HasColumnName("id_modulo");
            entity.Property(e => e.IdPerfilAcesso).HasColumnName("id_perfil_acesso");
            entity.Property(e => e.IdPerfilAcessoSubModulo).HasColumnName("id_perfil_acesso_sub_modulo");
            entity.Property(e => e.IdSubModulo).HasColumnName("id_sub_modulo");
            entity.Property(e => e.ModulosDescricao)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("modulos_descricao");
            entity.Property(e => e.ModulosOrdenacao).HasColumnName("modulos_ordenacao");
            entity.Property(e => e.PerfilAcessoDescricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("perfil_acesso_descricao");
            entity.Property(e => e.PerfilAcessoFlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("perfil_acesso_flag_ativo");
            entity.Property(e => e.SubModulosDescricao)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("sub_modulos_descricao");
            entity.Property(e => e.SubModulosFlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("sub_modulos_flag_ativo");
            entity.Property(e => e.SubModulosOrdenacao).HasColumnName("sub_modulos_ordenacao");
        });

        modelBuilder.Entity<VwDepPerfilAcessoUsuario>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_perfil_acesso_usuarios");

            entity.Property(e => e.IdModulo).HasColumnName("id_modulo");
            entity.Property(e => e.IdPerfilAcesso).HasColumnName("id_perfil_acesso");
            entity.Property(e => e.IdSubModulo).HasColumnName("id_sub_modulo");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.ModulosDescricao)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("modulos_descricao");
            entity.Property(e => e.ModulosMenu)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("modulos_menu");
            entity.Property(e => e.ModulosOrdenacao).HasColumnName("modulos_ordenacao");
            entity.Property(e => e.PerfilAcessoDescricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("perfil_acesso_descricao");
            entity.Property(e => e.SubModuloDescricao)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("sub_modulo_descricao");
            entity.Property(e => e.SubModuloFormulario)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("sub_modulo_formulario");
            entity.Property(e => e.SubModuloMenu)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("sub_modulo_menu");
            entity.Property(e => e.SubModuloOrdenacao).HasColumnName("sub_modulo_ordenacao");
            entity.Property(e => e.TipoAcesso)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo_acesso");
        });

        modelBuilder.Entity<VwDepRelatFaturamentoSap>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_relat_faturamento_sap");

            entity.Property(e => e.CodigoClienteSap)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codigo_cliente_sap");
            entity.Property(e => e.CodigoMaterial)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codigo_material");
            entity.Property(e => e.DataLiberacao)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("data_liberacao");
            entity.Property(e => e.DescricaoNotaFiscal)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("descricao_nota_fiscal");
            entity.Property(e => e.Documento)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("documento");
            entity.Property(e => e.IdAtendimento).HasColumnName("id_atendimento");
            entity.Property(e => e.IdDocumentoSap)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_documento_sap");
            entity.Property(e => e.Processo)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("processo");
            entity.Property(e => e.QuantidadeComposicao)
                .HasColumnType("money")
                .HasColumnName("quantidade_composicao");
            entity.Property(e => e.TipoDocumentoVenda)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo_documento_venda");
            entity.Property(e => e.ValorComposicao)
                .HasColumnType("money")
                .HasColumnName("valor_composicao");
            entity.Property(e => e.ValorDesconto)
                .HasColumnType("money")
                .HasColumnName("valor_desconto");
        });

        modelBuilder.Entity<VwDepRelatorioEspelhoGrv>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_relatorio_espelho_grv");

            entity.Property(e => e.Chassi)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("chassi");
            entity.Property(e => e.DataHoraGuarda)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_hora_guarda");
            entity.Property(e => e.DataHoraRemocao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_hora_remocao");
            entity.Property(e => e.DataLiberacao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_liberacao");
            entity.Property(e => e.Divisao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("divisao");
            entity.Property(e => e.FlagComboio)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_comboio");
            entity.Property(e => e.IdAutoridadeResponsavel).HasColumnName("id_autoridade_responsavel");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.LiberacaoTipoDescricao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("liberacao_tipo_descricao");
            entity.Property(e => e.MarcaModelo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("marca_modelo");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("numero_formulario_grv");
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa");
            entity.Property(e => e.Renavam)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("renavam");
            entity.Property(e => e.TipoVeiculo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipo_veiculo");
            entity.Property(e => e.ValorFaturado)
                .HasColumnType("money")
                .HasColumnName("valor_faturado");
            entity.Property(e => e.ValorPagamento)
                .HasColumnType("money")
                .HasColumnName("valor_pagamento");
        });

        modelBuilder.Entity<VwDepRelatorioLiberacao>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_relatorio_liberacao");

            entity.Property(e => e.Chassi)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("chassi");
            entity.Property(e => e.DataHoraGuarda)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_hora_guarda");
            entity.Property(e => e.DataHoraRemocao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_hora_remocao");
            entity.Property(e => e.DataLiberacao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_liberacao");
            entity.Property(e => e.Divisao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("divisao");
            entity.Property(e => e.FlagComboio)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_comboio");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.LiberacaoTipoDescricao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("liberacao_tipo_descricao");
            entity.Property(e => e.MarcaModelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("marca_modelo");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("numero_formulario_grv");
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa");
            entity.Property(e => e.TipoVeiculo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipo_veiculo");
            entity.Property(e => e.ValorFaturado)
                .HasColumnType("money")
                .HasColumnName("valor_faturado");
            entity.Property(e => e.ValorPagamento)
                .HasColumnType("money")
                .HasColumnName("valor_pagamento");
        });

        modelBuilder.Entity<VwDepRelatorioLiberacaoLeilaoSite>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_relatorio_liberacao_leilao_site");

            entity.Property(e => e.Chassi)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("chassi");
            entity.Property(e => e.DataHoraGuarda)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_hora_guarda");
            entity.Property(e => e.DataHoraRemocao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_hora_remocao");
            entity.Property(e => e.DataLiberacao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_liberacao");
            entity.Property(e => e.Divisao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("divisao");
            entity.Property(e => e.FlagComboio)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_comboio");
            entity.Property(e => e.IdAutoridadeResponsavel).HasColumnName("id_autoridade_responsavel");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.LiberacaoTipoDescricao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("liberacao_tipo_descricao");
            entity.Property(e => e.MarcaModelo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("marca_modelo");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("numero_formulario_grv");
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa");
            entity.Property(e => e.TipoVeiculo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipo_veiculo");
            entity.Property(e => e.ValorFaturado)
                .HasColumnType("money")
                .HasColumnName("valor_faturado");
            entity.Property(e => e.ValorPagamento)
                .HasColumnType("money")
                .HasColumnName("valor_pagamento");
        });

        modelBuilder.Entity<VwDepRelatorioLiberacaoSite>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_relatorio_liberacao_site");

            entity.Property(e => e.Chassi)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("chassi");
            entity.Property(e => e.DataHoraGuarda)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_hora_guarda");
            entity.Property(e => e.DataHoraRemocao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_hora_remocao");
            entity.Property(e => e.DataLiberacao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_liberacao");
            entity.Property(e => e.DataVencimento)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vencimento");
            entity.Property(e => e.Divisao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("divisao");
            entity.Property(e => e.FlagComboio)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_comboio");
            entity.Property(e => e.FlagPagamentoFinanciado)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_pagamento_financiado");
            entity.Property(e => e.FormaLiberacaoCpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("forma_liberacao_cpf");
            entity.Property(e => e.IdAutoridadeResponsavel).HasColumnName("id_autoridade_responsavel");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdDocumentoSap)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_documento_sap");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdStatusOperacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_status_operacao");
            entity.Property(e => e.LiberacaoTipoDescricao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("liberacao_tipo_descricao");
            entity.Property(e => e.MarcaModelo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("marca_modelo");
            entity.Property(e => e.NomeNotafiscal)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nome_notafiscal");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("numero_formulario_grv");
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa");
            entity.Property(e => e.ProprietarioDocumento)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("proprietario_documento");
            entity.Property(e => e.Renavam)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("renavam");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status");
            entity.Property(e => e.TipoVeiculo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipo_veiculo");
            entity.Property(e => e.ValorFaturado)
                .HasColumnType("money")
                .HasColumnName("valor_faturado");
            entity.Property(e => e.ValorPagamento)
                .HasColumnType("money")
                .HasColumnName("valor_pagamento");
        });

        modelBuilder.Entity<VwDepRelatorioLiberacaoSiteNovo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_relatorio_liberacao_site_novo");

            entity.Property(e => e.BoletoCdx)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("boletoCDX");
            entity.Property(e => e.Chassi)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("chassi");
            entity.Property(e => e.ClassificacaoNome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("classificacao_nome");
            entity.Property(e => e.DataHoraGuarda)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_hora_guarda");
            entity.Property(e => e.DataHoraRemocao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_hora_remocao");
            entity.Property(e => e.DataLiberacao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_liberacao");
            entity.Property(e => e.DataTransbordo)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_transbordo");
            entity.Property(e => e.DataVencimento)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vencimento");
            entity.Property(e => e.Divisao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("divisao");
            entity.Property(e => e.FlagComboio)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_comboio");
            entity.Property(e => e.FlagPagamentoFinanciado)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_pagamento_financiado");
            entity.Property(e => e.FlagTransbordo)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("flag_transbordo");
            entity.Property(e => e.FormaLiberacaoCpf)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("forma_liberacao_cpf");
            entity.Property(e => e.Frota)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("FROTA");
            entity.Property(e => e.IdAutoridadeResponsavel).HasColumnName("id_autoridade_responsavel");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdDocumentoSap)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_documento_sap");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdStatusOperacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_status_operacao");
            entity.Property(e => e.LiberacaoTipoDescricao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("liberacao_tipo_descricao");
            entity.Property(e => e.MarcaModelo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("marca_modelo");
            entity.Property(e => e.Nome)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nome");
            entity.Property(e => e.NomeNotafiscal)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nome_notafiscal");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("numero_formulario_grv");
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa");
            entity.Property(e => e.ProprietarioDocumento)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("proprietario_documento");
            entity.Property(e => e.Renavam)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("renavam");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status");
            entity.Property(e => e.TipoVeiculo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipo_veiculo");
            entity.Property(e => e.ValorFaturado)
                .HasColumnType("money")
                .HasColumnName("valor_faturado");
            entity.Property(e => e.ValorPagamento)
                .HasColumnType("money")
                .HasColumnName("valor_pagamento");
        });

        modelBuilder.Entity<VwDepRepGrv>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_rep_grv");

            entity.Property(e => e.ClienteBairro)
                .HasMaxLength(150)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_bairro");
            entity.Property(e => e.ClienteBanco)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_banco");
            entity.Property(e => e.ClienteCep)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_cep");
            entity.Property(e => e.ClienteCnpj)
                .IsRequired()
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("cliente_cnpj");
            entity.Property(e => e.ClienteComplementoLogradouro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cliente_complemento_logradouro");
            entity.Property(e => e.ClienteEstado)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_estado");
            entity.Property(e => e.ClienteLogradouro)
                .HasMaxLength(150)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_logradouro");
            entity.Property(e => e.ClienteMunicipio)
                .IsRequired()
                .HasMaxLength(75)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_municipio");
            entity.Property(e => e.ClienteNome)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cliente_nome");
            entity.Property(e => e.ClienteNumeroLogradouro)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("cliente_numero_logradouro");
            entity.Property(e => e.ClienteTipoLogradouro)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_tipo_logradouro");
            entity.Property(e => e.ClienteUf)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_uf");
            entity.Property(e => e.CodigoAgencia)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("codigo_agencia");
            entity.Property(e => e.ContaCorrente)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("conta_corrente");
            entity.Property(e => e.Cor)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cor");
            entity.Property(e => e.DataHoraAtual)
                .HasColumnType("datetime")
                .HasColumnName("data_hora_atual");
            entity.Property(e => e.DepositoBairro)
                .HasMaxLength(150)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("deposito_bairro");
            entity.Property(e => e.DepositoCep)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("deposito_cep");
            entity.Property(e => e.DepositoComplementoLogradouro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("deposito_complemento_logradouro");
            entity.Property(e => e.DepositoDescricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("deposito_descricao");
            entity.Property(e => e.DepositoEstado)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("deposito_estado");
            entity.Property(e => e.DepositoLogradouro)
                .HasMaxLength(150)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("deposito_logradouro");
            entity.Property(e => e.DepositoMunicipio)
                .IsRequired()
                .HasMaxLength(75)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("deposito_municipio");
            entity.Property(e => e.DepositoNumeroLogradouro)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("deposito_numero_logradouro");
            entity.Property(e => e.DepositoTipoLogradouro)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("deposito_tipo_logradouro");
            entity.Property(e => e.DepositoUf)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("deposito_uf");
            entity.Property(e => e.GrvChassi)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("grv_chassi");
            entity.Property(e => e.GrvDataHoraGuarda)
                .HasColumnType("smalldatetime")
                .HasColumnName("grv_data_hora_guarda");
            entity.Property(e => e.GrvDataHoraRemocao)
                .HasColumnType("smalldatetime")
                .HasColumnName("grv_data_hora_remocao");
            entity.Property(e => e.GrvNumeroFormulario)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("grv_numero_formulario");
            entity.Property(e => e.GrvPlaca)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("grv_placa");
            entity.Property(e => e.GrvRenavam)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("grv_renavam");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdTarifa).HasColumnName("id_tarifa");
            entity.Property(e => e.IdTarifaTipoVeiculo).HasColumnName("id_tarifa_tipo_veiculo");
            entity.Property(e => e.MarcaModelo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("marca_modelo");
            entity.Property(e => e.ReboquePlaca)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("reboque_placa");
            entity.Property(e => e.ReboquistaNome)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("reboquista_nome");
            entity.Property(e => e.TarifasDescricao)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tarifas_descricao");
            entity.Property(e => e.TipoVeiculo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipo_veiculo");
        });

        modelBuilder.Entity<VwDepRepGrvRelatorio>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_rep_grv_relatorios");

            entity.Property(e => e.AgenciaCodigo)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("agencia_codigo");
            entity.Property(e => e.AgenciaCodigoCedente)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("agencia_codigo_cedente");
            entity.Property(e => e.AgenciaContaCorrente)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("agencia_conta_corrente");
            entity.Property(e => e.AgenciaDigitoVerificador)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("agencia_digito_verificador");
            entity.Property(e => e.AgenteApreensorMatricula)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("agente_apreensor_matricula");
            entity.Property(e => e.AgenteApreensorNome)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("agente_apreensor_nome");
            entity.Property(e => e.AgenteApreensorTipo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("agente_apreensor_tipo");
            entity.Property(e => e.BancoCodigoFebraban)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("banco_codigo_febraban");
            entity.Property(e => e.BancoNome)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("banco_nome");
            entity.Property(e => e.ChaveVeiculo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("chave_veiculo");
            entity.Property(e => e.ClienteBairro)
                .HasMaxLength(150)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_bairro");
            entity.Property(e => e.ClienteCep)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_cep");
            entity.Property(e => e.ClienteCnpj)
                .IsRequired()
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("cliente_cnpj");
            entity.Property(e => e.ClienteComplementoLogradouro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cliente_complemento_logradouro");
            entity.Property(e => e.ClienteEstado)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_estado");
            entity.Property(e => e.ClienteLogradouro)
                .HasMaxLength(150)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_logradouro");
            entity.Property(e => e.ClienteMunicipio)
                .HasMaxLength(75)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_municipio");
            entity.Property(e => e.ClienteNome)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cliente_nome");
            entity.Property(e => e.ClienteNumeroLogradouro)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("cliente_numero_logradouro");
            entity.Property(e => e.ClienteTipoLogradouro)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_tipo_logradouro");
            entity.Property(e => e.ClienteUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_uf");
            entity.Property(e => e.CondutorDocumento)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("condutor_documento");
            entity.Property(e => e.CondutorIdentidade)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("condutor_identidade");
            entity.Property(e => e.CondutorNome)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("condutor_nome");
            entity.Property(e => e.CondutorOrgaoExpedidor)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("condutor_orgao_expedidor");
            entity.Property(e => e.Cor)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cor");
            entity.Property(e => e.DepositoBairro)
                .HasMaxLength(150)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("deposito_bairro");
            entity.Property(e => e.DepositoCep)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("deposito_cep");
            entity.Property(e => e.DepositoComplementoLogradouro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("deposito_complemento_logradouro");
            entity.Property(e => e.DepositoEstado)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("deposito_estado");
            entity.Property(e => e.DepositoLogradouro)
                .HasMaxLength(150)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("deposito_logradouro");
            entity.Property(e => e.DepositoMunicipio)
                .HasMaxLength(75)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("deposito_municipio");
            entity.Property(e => e.DepositoNome)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("deposito_nome");
            entity.Property(e => e.DepositoNumeroLogradouro)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("deposito_numero_logradouro");
            entity.Property(e => e.DepositoTipoLogradouro)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("deposito_tipo_logradouro");
            entity.Property(e => e.DepositoUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("deposito_uf");
            entity.Property(e => e.EstacionamentoNumeroVaga)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("estacionamento_numero_vaga");
            entity.Property(e => e.EstacionamentoSetor)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("estacionamento_setor");
            entity.Property(e => e.GrvChassi)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("grv_chassi");
            entity.Property(e => e.GrvDataGuarda)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("grv_data_guarda");
            entity.Property(e => e.GrvDataRemocao)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("grv_data_remocao");
            entity.Property(e => e.GrvHoraGuarda)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("grv_hora_guarda");
            entity.Property(e => e.GrvHoraRemocao)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("grv_hora_remocao");
            entity.Property(e => e.GrvNumeroFormulario)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("grv_numero_formulario");
            entity.Property(e => e.GrvPlaca)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("grv_placa");
            entity.Property(e => e.GrvRenavam)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("grv_renavam");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.LogradouroApreensao)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("logradouro_apreensao");
            entity.Property(e => e.MarcaModelo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("marca_modelo");
            entity.Property(e => e.NumeroChaveVeiculo)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("numero_chave_veiculo");
            entity.Property(e => e.ReboquePlaca)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("reboque_placa");
            entity.Property(e => e.ReboquistaNome)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("reboquista_nome");
            entity.Property(e => e.TipoVeiculo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipo_veiculo");
            entity.Property(e => e.VeiculoAnoFabricacao).HasColumnName("veiculo_ano_fabricacao");
            entity.Property(e => e.VeiculoAnoModelo).HasColumnName("veiculo_ano_modelo");
            entity.Property(e => e.VeiculoUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("veiculo_uf");
        });

        modelBuilder.Entity<VwDepRepGrvRelatoriosGrv>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_rep_grv_relatorios_grv");

            entity.Property(e => e.AgenciaCodigo)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("agencia_codigo");
            entity.Property(e => e.AgenciaCodigoCedente)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("agencia_codigo_cedente");
            entity.Property(e => e.AgenciaContaCorrente)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("agencia_conta_corrente");
            entity.Property(e => e.AgenciaDigitoVerificador)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("agencia_digito_verificador");
            entity.Property(e => e.AgenteApreensorMatricula)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("agente_apreensor_matricula");
            entity.Property(e => e.AgenteApreensorNome)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("agente_apreensor_nome");
            entity.Property(e => e.AgenteApreensorTipo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("agente_apreensor_tipo");
            entity.Property(e => e.BancoCodigoFebraban)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("banco_codigo_febraban");
            entity.Property(e => e.BancoNome)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("banco_nome");
            entity.Property(e => e.ChaveVeiculo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("chave_veiculo");
            entity.Property(e => e.ClienteBairro)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_bairro");
            entity.Property(e => e.ClienteCep)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_cep");
            entity.Property(e => e.ClienteCnpj)
                .IsRequired()
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("cliente_cnpj");
            entity.Property(e => e.ClienteComplementoLogradouro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cliente_complemento_logradouro");
            entity.Property(e => e.ClienteEstado)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_estado");
            entity.Property(e => e.ClienteLogradouro)
                .HasMaxLength(150)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_logradouro");
            entity.Property(e => e.ClienteMunicipio)
                .IsRequired()
                .HasMaxLength(75)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_municipio");
            entity.Property(e => e.ClienteNome)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cliente_nome");
            entity.Property(e => e.ClienteNumeroLogradouro)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("cliente_numero_logradouro");
            entity.Property(e => e.ClienteTipoLogradouro)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_tipo_logradouro");
            entity.Property(e => e.ClienteUf)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_uf");
            entity.Property(e => e.CondutorDocumento)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("condutor_documento");
            entity.Property(e => e.CondutorIdentidade)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("condutor_identidade");
            entity.Property(e => e.CondutorNome)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("condutor_nome");
            entity.Property(e => e.CondutorOrgaoExpedidor)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("condutor_orgao_expedidor");
            entity.Property(e => e.Cor)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cor");
            entity.Property(e => e.DepositoBairro)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("deposito_bairro");
            entity.Property(e => e.DepositoCep)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("deposito_cep");
            entity.Property(e => e.DepositoComplementoLogradouro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("deposito_complemento_logradouro");
            entity.Property(e => e.DepositoEstado)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("deposito_estado");
            entity.Property(e => e.DepositoLogradouro)
                .HasMaxLength(150)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("deposito_logradouro");
            entity.Property(e => e.DepositoMunicipio)
                .IsRequired()
                .HasMaxLength(75)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("deposito_municipio");
            entity.Property(e => e.DepositoNome)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("deposito_nome");
            entity.Property(e => e.DepositoNumeroLogradouro)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("deposito_numero_logradouro");
            entity.Property(e => e.DepositoTipoLogradouro)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("deposito_tipo_logradouro");
            entity.Property(e => e.DepositoUf)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("deposito_uf");
            entity.Property(e => e.EnquadramentoInfracaoCodigo)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("enquadramento_infracao_codigo");
            entity.Property(e => e.EnquadramentoInfracaoDescricao)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("enquadramento_infracao_descricao");
            entity.Property(e => e.EstacionamentoNumeroVaga)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("estacionamento_numero_vaga");
            entity.Property(e => e.EstacionamentoSetor)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("estacionamento_setor");
            entity.Property(e => e.GrvChassi)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("grv_chassi");
            entity.Property(e => e.GrvDataGuarda)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("grv_data_guarda");
            entity.Property(e => e.GrvDataRemocao)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("grv_data_remocao");
            entity.Property(e => e.GrvHoraGuarda)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("grv_hora_guarda");
            entity.Property(e => e.GrvHoraRemocao)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("grv_hora_remocao");
            entity.Property(e => e.GrvPlaca)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("grv_placa");
            entity.Property(e => e.GrvRenavam)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("grv_renavam");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdTarifaTipoVeiculo).HasColumnName("id_tarifa_tipo_veiculo");
            entity.Property(e => e.LogradouroApreensao)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("logradouro_apreensao");
            entity.Property(e => e.MarcaModelo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("marca_modelo");
            entity.Property(e => e.NumeroChaveVeiculo)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("numero_chave_veiculo");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("numero_formulario_grv");
            entity.Property(e => e.ReboquePlaca)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("reboque_placa");
            entity.Property(e => e.ReboquistaNome)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("reboquista_nome");
            entity.Property(e => e.TarifasDescricao)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tarifas_descricao");
            entity.Property(e => e.TipoVeiculo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipo_veiculo");
            entity.Property(e => e.VeiculoAnoFabricacao).HasColumnName("veiculo_ano_fabricacao");
            entity.Property(e => e.VeiculoAnoModelo).HasColumnName("veiculo_ano_modelo");
            entity.Property(e => e.VeiculoUf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("veiculo_uf");
        });

        modelBuilder.Entity<VwDepRepGuiaPagamentoEstadiaReboque>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_rep_guia_pagamento_estadia_reboque");

            entity.Property(e => e.AtendimentoFormaLiberacao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("atendimento_forma_liberacao");
            entity.Property(e => e.AtendimentoFormaLiberacaoCnh)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("atendimento_forma_liberacao_cnh");
            entity.Property(e => e.AtendimentoFormaLiberacaoCpf)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("atendimento_forma_liberacao_cpf");
            entity.Property(e => e.AtendimentoFormaLiberacaoNome)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("atendimento_forma_liberacao_nome");
            entity.Property(e => e.AtendimentoFormaLiberacaoPlaca)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("atendimento_forma_liberacao_placa");
            entity.Property(e => e.AtendimentoResponsavelDocumento)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("atendimento_responsavel_documento");
            entity.Property(e => e.AtendimentoResponsavelNome)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("atendimento_responsavel_nome");
            entity.Property(e => e.ClienteBairro)
                .HasMaxLength(150)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_bairro");
            entity.Property(e => e.ClienteBanco)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_banco");
            entity.Property(e => e.ClienteCep)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_cep");
            entity.Property(e => e.ClienteCnpj)
                .IsRequired()
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("cliente_cnpj");
            entity.Property(e => e.ClienteComplementoLogradouro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cliente_complemento_logradouro");
            entity.Property(e => e.ClienteEstado)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_estado");
            entity.Property(e => e.ClienteLogradouro)
                .HasMaxLength(150)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_logradouro");
            entity.Property(e => e.ClienteMunicipio)
                .IsRequired()
                .HasMaxLength(75)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_municipio");
            entity.Property(e => e.ClienteNome)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cliente_nome");
            entity.Property(e => e.ClienteNumeroLogradouro)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("cliente_numero_logradouro");
            entity.Property(e => e.ClienteTipoLogradouro)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_tipo_logradouro");
            entity.Property(e => e.ClienteUf)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_uf");
            entity.Property(e => e.CodigoAgencia)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("codigo_agencia");
            entity.Property(e => e.ContaCorrente)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("conta_corrente");
            entity.Property(e => e.Cor)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cor");
            entity.Property(e => e.DataHoraAtual)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("data_hora_atual");
            entity.Property(e => e.DepositoBairro)
                .HasMaxLength(150)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("deposito_bairro");
            entity.Property(e => e.DepositoCep)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("deposito_cep");
            entity.Property(e => e.DepositoComplementoLogradouro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("deposito_complemento_logradouro");
            entity.Property(e => e.DepositoDescricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("deposito_descricao");
            entity.Property(e => e.DepositoEstado)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("deposito_estado");
            entity.Property(e => e.DepositoLogradouro)
                .HasMaxLength(150)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("deposito_logradouro");
            entity.Property(e => e.DepositoMunicipio)
                .IsRequired()
                .HasMaxLength(75)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("deposito_municipio");
            entity.Property(e => e.DepositoNumeroLogradouro)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("deposito_numero_logradouro");
            entity.Property(e => e.DepositoTipoLogradouro)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("deposito_tipo_logradouro");
            entity.Property(e => e.DepositoUf)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("deposito_uf");
            entity.Property(e => e.DigitoVerificador)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("digito_verificador");
            entity.Property(e => e.EmpresaAssociadaCnpj)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("empresa_associada_cnpj");
            entity.Property(e => e.EmpresaAssociadaNome)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("empresa_associada_nome");
            entity.Property(e => e.FlagClienteRealizaFaturamentoArrecadacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_cliente_realiza_faturamento_arrecadacao");
            entity.Property(e => e.GrvChassi)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("grv_chassi");
            entity.Property(e => e.GrvDataHoraGuarda)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("grv_data_hora_guarda");
            entity.Property(e => e.GrvDataHoraRemocao)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("grv_data_hora_remocao");
            entity.Property(e => e.GrvEstacionamentoNumeroVaga)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("grv_estacionamento_numero_vaga");
            entity.Property(e => e.GrvEstacionamentoSetor)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("grv_estacionamento_setor");
            entity.Property(e => e.GrvNumeroChave)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("grv_numero_chave");
            entity.Property(e => e.GrvNumeroFormulario)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("grv_numero_formulario");
            entity.Property(e => e.GrvPlaca)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("grv_placa");
            entity.Property(e => e.GrvRenavam)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("grv_renavam");
            entity.Property(e => e.IdAtendimento).HasColumnName("id_atendimento");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.MarcaModelo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("marca_modelo");
            entity.Property(e => e.QualificacaoResponsavelDescricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("qualificacao_responsavel_descricao");
            entity.Property(e => e.ReboquePlaca)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("reboque_placa");
            entity.Property(e => e.ReboquistaNome)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("reboquista_nome");
            entity.Property(e => e.TipoVeiculo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipo_veiculo");
        });

        modelBuilder.Entity<VwDepRepGuiaPagamentoEstadiaReboqueSite>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_rep_guia_pagamento_estadia_reboque_site");

            entity.Property(e => e.AtendimentoFormaLiberacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("atendimento_forma_liberacao");
            entity.Property(e => e.AtendimentoFormaLiberacaoCnh)
                .IsRequired()
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("atendimento_forma_liberacao_cnh");
            entity.Property(e => e.AtendimentoFormaLiberacaoCpf)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("atendimento_forma_liberacao_cpf");
            entity.Property(e => e.AtendimentoFormaLiberacaoNome)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("atendimento_forma_liberacao_nome");
            entity.Property(e => e.AtendimentoFormaLiberacaoPlaca)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("atendimento_forma_liberacao_placa");
            entity.Property(e => e.AtendimentoResponsavelDocumento)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("atendimento_responsavel_documento");
            entity.Property(e => e.AtendimentoResponsavelNome)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("atendimento_responsavel_nome");
            entity.Property(e => e.ClienteBairro)
                .HasMaxLength(150)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_bairro");
            entity.Property(e => e.ClienteBanco)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_banco");
            entity.Property(e => e.ClienteCep)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_cep");
            entity.Property(e => e.ClienteCnpj)
                .IsRequired()
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("cliente_cnpj");
            entity.Property(e => e.ClienteComplementoLogradouro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cliente_complemento_logradouro");
            entity.Property(e => e.ClienteEstado)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_estado");
            entity.Property(e => e.ClienteLogradouro)
                .HasMaxLength(150)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_logradouro");
            entity.Property(e => e.ClienteMunicipio)
                .IsRequired()
                .HasMaxLength(75)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_municipio");
            entity.Property(e => e.ClienteNome)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cliente_nome");
            entity.Property(e => e.ClienteNumeroLogradouro)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("cliente_numero_logradouro");
            entity.Property(e => e.ClienteTipoLogradouro)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_tipo_logradouro");
            entity.Property(e => e.ClienteUf)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cliente_uf");
            entity.Property(e => e.CodigoAgencia)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("codigo_agencia");
            entity.Property(e => e.ContaCorrente)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("conta_corrente");
            entity.Property(e => e.Cor)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cor");
            entity.Property(e => e.DataHoraAtual)
                .HasColumnType("datetime")
                .HasColumnName("data_hora_atual");
            entity.Property(e => e.DepositoBairro)
                .HasMaxLength(150)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("deposito_bairro");
            entity.Property(e => e.DepositoCep)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("deposito_cep");
            entity.Property(e => e.DepositoComplementoLogradouro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("deposito_complemento_logradouro");
            entity.Property(e => e.DepositoDescricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("deposito_descricao");
            entity.Property(e => e.DepositoEstado)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("deposito_estado");
            entity.Property(e => e.DepositoLogradouro)
                .HasMaxLength(150)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("deposito_logradouro");
            entity.Property(e => e.DepositoMunicipio)
                .IsRequired()
                .HasMaxLength(75)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("deposito_municipio");
            entity.Property(e => e.DepositoNumeroLogradouro)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("deposito_numero_logradouro");
            entity.Property(e => e.DepositoTipoLogradouro)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("deposito_tipo_logradouro");
            entity.Property(e => e.DepositoUf)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("deposito_uf");
            entity.Property(e => e.GrvChassi)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("grv_chassi");
            entity.Property(e => e.GrvDataHoraGuarda)
                .HasColumnType("smalldatetime")
                .HasColumnName("grv_data_hora_guarda");
            entity.Property(e => e.GrvDataHoraRemocao)
                .HasColumnType("smalldatetime")
                .HasColumnName("grv_data_hora_remocao");
            entity.Property(e => e.GrvEstacionamentoNumeroVaga)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("grv_estacionamento_numero_vaga");
            entity.Property(e => e.GrvEstacionamentoSetor)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("grv_estacionamento_setor");
            entity.Property(e => e.GrvNumeroChave)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("grv_numero_chave");
            entity.Property(e => e.GrvNumeroFormulario)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("grv_numero_formulario");
            entity.Property(e => e.GrvPlaca)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("grv_placa");
            entity.Property(e => e.GrvRenavam)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("grv_renavam");
            entity.Property(e => e.IdAtendimento).HasColumnName("id_atendimento");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdTarifa).HasColumnName("id_tarifa");
            entity.Property(e => e.IdTarifaTipoVeiculo).HasColumnName("id_tarifa_tipo_veiculo");
            entity.Property(e => e.MarcaModelo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("marca_modelo");
            entity.Property(e => e.QualificacaoResponsavelDescricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("qualificacao_responsavel_descricao");
            entity.Property(e => e.ReboquePlaca)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("reboque_placa");
            entity.Property(e => e.ReboquistaNome)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("reboquista_nome");
            entity.Property(e => e.TarifasDescricao)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tarifas_descricao");
            entity.Property(e => e.TipoVeiculo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipo_veiculo");
        });

        modelBuilder.Entity<VwDepStatusOperaco>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_status_operacoes");

            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.FlagVeiculoApreendido)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_veiculo_apreendido");
            entity.Property(e => e.IdStatusOperacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_status_operacao");
            entity.Property(e => e.Sequencia).HasColumnName("sequencia");
        });

        modelBuilder.Entity<VwDepStatusOperacoesGrv>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_status_operacoes_grv");

            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.FlagVeiculoApreendido)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_veiculo_apreendido");
            entity.Property(e => e.IdStatusOperacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_status_operacao");
            entity.Property(e => e.Sequencia).HasColumnName("sequencia");
        });

        modelBuilder.Entity<VwDepTarifa>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_tarifas");

            entity.Property(e => e.ClienteDepositoFlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_deposito_flag_ativo");
            entity.Property(e => e.ClienteFlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_flag_ativo");
            entity.Property(e => e.ClienteFlagCadastrarQuilometragem)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_flag_cadastrar_quilometragem");
            entity.Property(e => e.ClienteFlagClienteRealizaFaturamentoArrecadacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_flag_cliente_realiza_faturamento_arrecadacao");
            entity.Property(e => e.ClienteFlagCobrarDiariasDiasCorridos)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_flag_cobrar_diarias_dias_corridos");
            entity.Property(e => e.ClienteFlagEmissaoNotaFiscalSap)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_flag_emissao_nota_fiscal_sap");
            entity.Property(e => e.ClienteFlagUsarHoraDiaria)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_flag_usar_hora_diaria");
            entity.Property(e => e.ClienteHoraDiaria)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("cliente_hora_diaria");
            entity.Property(e => e.ClienteMaximoDiariasParaCobranca).HasColumnName("cliente_maximo_diarias_para_cobranca");
            entity.Property(e => e.ClienteMaximoDiasVencimento).HasColumnName("cliente_maximo_dias_vencimento");
            entity.Property(e => e.ClienteNome)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cliente_nome");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataVigenciaFinal)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vigencia_final");
            entity.Property(e => e.DataVigenciaInicial)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vigencia_inicial");
            entity.Property(e => e.DepositoFlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("deposito_flag_ativo");
            entity.Property(e => e.DepositoNome)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("deposito_nome");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdClienteDeposito).HasColumnName("id_cliente_deposito");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdTarifa).HasColumnName("id_tarifa");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.NomeUsuarioAlteracao)
                .HasMaxLength(152)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("nome_usuario_alteracao");
            entity.Property(e => e.NomeUsuarioCadastro)
                .IsRequired()
                .HasMaxLength(152)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("nome_usuario_cadastro");
            entity.Property(e => e.TarifaDescricao)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tarifa_descricao");
            entity.Property(e => e.TarifaPrecoDiaria)
                .HasColumnType("money")
                .HasColumnName("tarifa_preco_diaria");
            entity.Property(e => e.TarifaPrecoQuilometragem)
                .HasColumnType("money")
                .HasColumnName("tarifa_preco_quilometragem");
            entity.Property(e => e.TarifaPrecoRebocada)
                .HasColumnType("money")
                .HasColumnName("tarifa_preco_rebocada");
        });

        modelBuilder.Entity<VwDepTarifasAtivo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_tarifas_ativos");

            entity.Property(e => e.ClienteDepositoFlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_deposito_flag_ativo");
            entity.Property(e => e.ClienteFlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_flag_ativo");
            entity.Property(e => e.ClienteFlagCadastrarQuilometragem)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_flag_cadastrar_quilometragem");
            entity.Property(e => e.ClienteFlagCobrarDiariasDiasCorridos)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_flag_cobrar_diarias_dias_corridos");
            entity.Property(e => e.ClienteFlagEmissaoNotaFiscalSap)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_flag_emissao_nota_fiscal_sap");
            entity.Property(e => e.ClienteFlagUsarHoraDiaria)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_flag_usar_hora_diaria");
            entity.Property(e => e.ClienteHoraDiaria)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("cliente_hora_diaria");
            entity.Property(e => e.ClienteMaximoDiariasParaCobranca).HasColumnName("cliente_maximo_diarias_para_cobranca");
            entity.Property(e => e.ClienteMaximoDiasVencimento).HasColumnName("cliente_maximo_dias_vencimento");
            entity.Property(e => e.ClienteNome)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cliente_nome");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataVigenciaFinal)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vigencia_final");
            entity.Property(e => e.DataVigenciaInicial)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vigencia_inicial");
            entity.Property(e => e.DepositoFlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("deposito_flag_ativo");
            entity.Property(e => e.DepositoNome)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("deposito_nome");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdClienteDeposito).HasColumnName("id_cliente_deposito");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdTarifa).HasColumnName("id_tarifa");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.NomeUsuarioAlteracao)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("nome_usuario_alteracao");
            entity.Property(e => e.NomeUsuarioCadastro)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("nome_usuario_cadastro");
            entity.Property(e => e.TarifaDescricao)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tarifa_descricao");
            entity.Property(e => e.TarifaPrecoDiaria)
                .HasColumnType("money")
                .HasColumnName("tarifa_preco_diaria");
            entity.Property(e => e.TarifaPrecoQuilometragem)
                .HasColumnType("money")
                .HasColumnName("tarifa_preco_quilometragem");
            entity.Property(e => e.TarifaPrecoRebocada)
                .HasColumnType("money")
                .HasColumnName("tarifa_preco_rebocada");
        });

        modelBuilder.Entity<VwDepTarifasBasico>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_tarifas_basico");

            entity.Property(e => e.ClienteDepositoFlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_deposito_flag_ativo");
            entity.Property(e => e.ClienteFlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_flag_ativo");
            entity.Property(e => e.ClienteNome)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cliente_nome");
            entity.Property(e => e.DataVigenciaFinal)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vigencia_final");
            entity.Property(e => e.DataVigenciaInicial)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vigencia_inicial");
            entity.Property(e => e.DepositoFlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("deposito_flag_ativo");
            entity.Property(e => e.DepositoNome)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("deposito_nome");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdClienteDeposito).HasColumnName("id_cliente_deposito");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdTarifa).HasColumnName("id_tarifa");
            entity.Property(e => e.TarifaDescricao)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tarifa_descricao");
        });

        modelBuilder.Entity<VwDepTarifasTipoVeiculo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_tarifas_tipo_veiculos");

            entity.Property(e => e.ClienteDepositoFlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_deposito_flag_ativo");
            entity.Property(e => e.ClienteFlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_flag_ativo");
            entity.Property(e => e.ClienteFlagCadastrarQuilometragem)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_flag_cadastrar_quilometragem");
            entity.Property(e => e.ClienteFlagClienteRealizaFaturamentoArrecadacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_flag_cliente_realiza_faturamento_arrecadacao");
            entity.Property(e => e.ClienteFlagCobrarDiariasDiasCorridos)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_flag_cobrar_diarias_dias_corridos");
            entity.Property(e => e.ClienteFlagEmissaoNotaFiscalSap)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_flag_emissao_nota_fiscal_sap");
            entity.Property(e => e.ClienteFlagUsarHoraDiaria)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_flag_usar_hora_diaria");
            entity.Property(e => e.ClienteHoraDiaria)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("cliente_hora_diaria");
            entity.Property(e => e.ClienteMaximoDiariasParaCobranca).HasColumnName("cliente_maximo_diarias_para_cobranca");
            entity.Property(e => e.ClienteMaximoDiasVencimento).HasColumnName("cliente_maximo_dias_vencimento");
            entity.Property(e => e.ClienteNome)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cliente_nome");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataVigenciaFinal)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vigencia_final");
            entity.Property(e => e.DataVigenciaInicial)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vigencia_inicial");
            entity.Property(e => e.DepositoFlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("deposito_flag_ativo");
            entity.Property(e => e.DepositoNome)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("deposito_nome");
            entity.Property(e => e.GrvLimiteMinimoDatahoraGuarda).HasColumnName("grv_limite_minimo_datahora_guarda");
            entity.Property(e => e.GrvMinimoFotosExigidas).HasColumnName("grv_minimo_fotos_exigidas");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdClienteDeposito).HasColumnName("id_cliente_deposito");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdSapCondicaoPagamento).HasColumnName("id_sap_condicao_pagamento");
            entity.Property(e => e.IdTarifa).HasColumnName("id_tarifa");
            entity.Property(e => e.IdTarifaTipoVeiculo).HasColumnName("id_tarifa_tipo_veiculo");
            entity.Property(e => e.IdTipoMeioCobranca).HasColumnName("id_tipo_meio_cobranca");
            entity.Property(e => e.IdTipoVeiculo).HasColumnName("id_tipo_veiculo");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.NomeUsuarioAlteracao)
                .HasMaxLength(152)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("nome_usuario_alteracao");
            entity.Property(e => e.NomeUsuarioCadastro)
                .IsRequired()
                .HasMaxLength(152)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("nome_usuario_cadastro");
            entity.Property(e => e.SapCondicaoPagamentoCodigo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("sap_condicao_pagamento_codigo");
            entity.Property(e => e.SapCondicaoPagamentoDescricao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sap_condicao_pagamento_descricao");
            entity.Property(e => e.TarifaDescricao)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tarifa_descricao");
            entity.Property(e => e.TarifaPrecoDiaria)
                .HasColumnType("money")
                .HasColumnName("tarifa_preco_diaria");
            entity.Property(e => e.TarifaPrecoQuilometragem)
                .HasColumnType("money")
                .HasColumnName("tarifa_preco_quilometragem");
            entity.Property(e => e.TarifaPrecoRebocada)
                .HasColumnType("money")
                .HasColumnName("tarifa_preco_rebocada");
            entity.Property(e => e.TipoVeiculosFlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo_veiculos_flag_ativo");
            entity.Property(e => e.TipoVeiculosFlagNaoRequerCnhNaLiberacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo_veiculos_flag_nao_requer_cnh_na_liberacao");
            entity.Property(e => e.TipoVeiculosNome)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipo_veiculos_nome");
            entity.Property(e => e.TiposMeiosCobrancasCodigoSap)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipos_meios_cobrancas_codigo_sap");
            entity.Property(e => e.TiposMeiosCobrancasDescricao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipos_meios_cobrancas_descricao");
            entity.Property(e => e.TiposMeiosCobrancasFlagBanco)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipos_meios_cobrancas_flag_banco");
            entity.Property(e => e.TiposMeiosCobrancasFlagPossuiCodigoAutorizacaoCartao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipos_meios_cobrancas_flag_possui_codigo_autorizacao_cartao");
        });

        modelBuilder.Entity<VwDepTarifasTipoVeiculosVigente>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_tarifas_tipo_veiculos_vigente");

            entity.Property(e => e.DataVigenciaFinal)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vigencia_final");
            entity.Property(e => e.DataVigenciaInicial)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vigencia_inicial");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdTarifa).HasColumnName("id_tarifa");
            entity.Property(e => e.IdTarifaTipoVeiculoVigente).HasColumnName("id_tarifa_tipo_veiculo_vigente");
            entity.Property(e => e.IdTipoVeiculo).HasColumnName("id_tipo_veiculo");
            entity.Property(e => e.TarifaDescricao)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tarifa_descricao");
            entity.Property(e => e.TarifaPrecoDiaria)
                .HasColumnType("money")
                .HasColumnName("tarifa_preco_diaria");
            entity.Property(e => e.TarifaPrecoQuilometragem)
                .HasColumnType("money")
                .HasColumnName("tarifa_preco_quilometragem");
            entity.Property(e => e.TarifaPrecoRebocada)
                .HasColumnType("money")
                .HasColumnName("tarifa_preco_rebocada");
            entity.Property(e => e.TipoVeiculosFlagNaoRequerCnhNaLiberacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo_veiculos_flag_nao_requer_cnh_na_liberacao");
            entity.Property(e => e.TipoVeiculosNome)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipo_veiculos_nome");
        });

        modelBuilder.Entity<VwDepUltimoAtendimento>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_ultimo_atendimento");

            entity.Property(e => e.UltimoAtendimento).HasColumnName("ultimo_atendimento");
        });

        modelBuilder.Entity<VwDepUltimoFaturamento>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_ultimo_faturamento");

            entity.Property(e => e.UltimoFaturamento).HasColumnName("ultimo_faturamento");
        });

        modelBuilder.Entity<VwDepUltimoGrv>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_ultimo_grv");

            entity.Property(e => e.UltimoGrv).HasColumnName("ultimo_grv");
        });

        modelBuilder.Entity<VwDepUsuariosCliente>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_usuarios_clientes");

            entity.Property(e => e.FlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_ativo");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.IdUsuarioCliente).HasColumnName("id_usuario_cliente");
            entity.Property(e => e.Nome)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nome");
        });

        modelBuilder.Entity<VwDepUsuariosClientesDeposito>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_usuarios_clientes_depositos");

            entity.Property(e => e.ClienteFlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cliente_flag_ativo");
            entity.Property(e => e.ClienteNome)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cliente_nome");
            entity.Property(e => e.DepositoFlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("deposito_flag_ativo");
            entity.Property(e => e.DepositoNome)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("deposito_nome");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.IdUsuarioCliente).HasColumnName("id_usuario_cliente");
            entity.Property(e => e.IdUsuarioDeposito).HasColumnName("id_usuario_deposito");
            entity.Property(e => e.Login)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("login");
            entity.Property(e => e.Matricula)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("matricula");
            entity.Property(e => e.PessoaId).HasColumnName("PessoaID");
            entity.Property(e => e.Senha1)
                .IsRequired()
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("senha1");
            entity.Property(e => e.UsuarioFlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("usuario_flag_ativo");
        });

        modelBuilder.Entity<VwDepUsuariosDeposito>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_usuarios_depositos");

            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.FlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_ativo");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.IdUsuarioDeposito).HasColumnName("id_usuario_deposito");
        });

        modelBuilder.Entity<VwDepUsuariosNome>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_dep_usuarios_nome");

            entity.Property(e => e.Cpf)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cpf");
            entity.Property(e => e.CpfFormatado)
                .HasMaxLength(14)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cpf_formatado");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_alteracao");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataCadastroSenha)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro_senha");
            entity.Property(e => e.DataUltimoAcesso)
                .HasColumnType("datetime")
                .HasColumnName("data_ultimo_acesso");
            entity.Property(e => e.FlagAtivo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_ativo");
            entity.Property(e => e.FlagPermissaoDataRetroativaFaturamento)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_permissao_data_retroativa_faturamento");
            entity.Property(e => e.FlagPermissaoDesconto)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_permissao_desconto");
            entity.Property(e => e.FlagReceberEmailErro)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_receber_email_erro");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("id_usuario_alteracao");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.Login)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("login");
            entity.Property(e => e.Matricula)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Nome)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("nome");
            entity.Property(e => e.NomeCompleto)
                .IsRequired()
                .HasMaxLength(152)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("nome_completo");
            entity.Property(e => e.NomeMeio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("nome_meio");
            entity.Property(e => e.PessoaId).HasColumnName("PessoaID");
            entity.Property(e => e.Senha1)
                .IsRequired()
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("senha1");
            entity.Property(e => e.Senha2)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("senha2");
            entity.Property(e => e.Senha3)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("senha3");
            entity.Property(e => e.Senha4)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("senha4");
            entity.Property(e => e.Senha5)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("senha5");
            entity.Property(e => e.SenhaAndroid)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("senha_android");
            entity.Property(e => e.Sobrenome)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("sobrenome");
        });

        modelBuilder.Entity<VwDetranBaAnaliseApreensaoEnvio>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_detran_ba_analise_apreensao_envio");

            entity.Property(e => e.AitAssinado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("aitAssinado");
            entity.Property(e => e.Argumento)
                .HasMaxLength(21)
                .IsUnicode(false)
                .HasColumnName("argumento");
            entity.Property(e => e.Artigo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("artigo");
            entity.Property(e => e.Chassi)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("chassi");
            entity.Property(e => e.Cliente)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cliente");
            entity.Property(e => e.CodigoErro).HasColumnName("codigoErro");
            entity.Property(e => e.CodigoMunicipio)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("codigoMunicipio");
            entity.Property(e => e.CodigoOperacao)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codigoOperacao");
            entity.Property(e => e.CodigoPatio)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("codigoPatio");
            entity.Property(e => e.CodigoReboque)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("codigoReboque");
            entity.Property(e => e.CodigoRetExec).HasColumnName("codigoRetExec");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataEntrada)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("dataEntrada");
            entity.Property(e => e.DataOficio)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("dataOficio");
            entity.Property(e => e.Deposito)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("deposito");
            entity.Property(e => e.DescricaoErro)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("descricaoErro");
            entity.Property(e => e.HoraEntrada)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("horaEntrada");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.IndChassiAdulter)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("indChassiAdulter");
            entity.Property(e => e.IndNaoEmplacado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("indNaoEmplacado");
            entity.Property(e => e.LocalInfracao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("localInfracao");
            entity.Property(e => e.MatricComand)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("matricComand");
            entity.Property(e => e.MotivoApreensao)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("motivoApreensao");
            entity.Property(e => e.NovaPlaca)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("novaPlaca");
            entity.Property(e => e.NovoChassi)
                .HasMaxLength(21)
                .IsUnicode(false)
                .HasColumnName("novoChassi");
            entity.Property(e => e.NumeroGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("numero_grv");
            entity.Property(e => e.NumeroOficio)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("numeroOficio");
            entity.Property(e => e.NumeroTrav)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("numeroTrav");
            entity.Property(e => e.OcorrItens)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("ocorrItens");
            entity.Property(e => e.OrigemApreensao)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("origemApreensao");
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa");
            entity.Property(e => e.SituacaoVeicP2)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("situacaoVeicP2");
            entity.Property(e => e.SituacaoVeicP3)
                .HasMaxLength(72)
                .IsUnicode(false)
                .HasColumnName("situacaoVeicP3");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status");
            entity.Property(e => e.StatusRouboFurto)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("statusRouboFurto");
            entity.Property(e => e.TipoArgumento)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipoArgumento");
            entity.Property(e => e.Usuario)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("usuario");
        });

        modelBuilder.Entity<VwDetranBaAnaliseLiberacaoEnvio>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_detran_ba_analise_liberacao_envio");

            entity.Property(e => e.CdMeioPag).HasColumnName("cdMeioPag");
            entity.Property(e => e.Chassi)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("chassi");
            entity.Property(e => e.Cliente)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cliente");
            entity.Property(e => e.CodigoErro).HasColumnName("codigoErro");
            entity.Property(e => e.CodigoOperacao)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codigoOperacao");
            entity.Property(e => e.CodigoPatio)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("codigoPatio");
            entity.Property(e => e.CodigoRetExec).HasColumnName("codigoRetExec");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataEntrega)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("dataEntrega");
            entity.Property(e => e.Deposito)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("deposito");
            entity.Property(e => e.DescricaoErro)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("descricaoErro");
            entity.Property(e => e.HoraEntrega)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("horaEntrega");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.IndProprietario)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("indProprietario");
            entity.Property(e => e.NomeCondutor)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("nomeCondutor");
            entity.Property(e => e.NomeLibera)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("nomeLibera");
            entity.Property(e => e.NumDocLibera)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("numDocLibera");
            entity.Property(e => e.NumeroCnh)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("numeroCNH");
            entity.Property(e => e.NumeroGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("numero_grv");
            entity.Property(e => e.NumeroTermo)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("numeroTermo");
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status");
            entity.Property(e => e.Usuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("usuario");
        });

        modelBuilder.Entity<VwDetranRjAnaliseLogEnvio>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_detran_rj_analise_log_envio");

            entity.Property(e => e.Chassi)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("chassi");
            entity.Property(e => e.Cliente)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cliente");
            entity.Property(e => e.CodigoOperacao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codigo_operacao");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.Deposito)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("deposito");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdMotivoApreensao).HasColumnName("id_motivo_apreensao");
            entity.Property(e => e.IdTransacaoClienteDeposito).HasColumnName("id_transacao_cliente_deposito");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa");
            entity.Property(e => e.Resultado)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasColumnName("resultado");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status");
        });

        modelBuilder.Entity<VwEstoqueVeiculo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_estoque_veiculos");

            entity.Property(e => e.AutoridadeDivisao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("autoridade_divisao");
            entity.Property(e => e.AutoridadeOrgao)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("autoridade_orgao");
            entity.Property(e => e.AutoridadeSigla)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("autoridade_sigla");
            entity.Property(e => e.Chassi)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("chassi");
            entity.Property(e => e.Classificação)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("classificação");
            entity.Property(e => e.Cliente)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cliente");
            entity.Property(e => e.Cor)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cor");
            entity.Property(e => e.CorOstentada)
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cor_ostentada");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataHoraGuarda)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_hora_guarda");
            entity.Property(e => e.DataHoraRemocao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_hora_remocao");
            entity.Property(e => e.DataPagamento)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_pagamento");
            entity.Property(e => e.Deposito)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("deposito");
            entity.Property(e => e.Diarias)
                .HasColumnType("smallmoney")
                .HasColumnName("diarias");
            entity.Property(e => e.EmpresaReboque)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("empresa_reboque");
            entity.Property(e => e.EstacionamentoNumeroVaga)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("estacionamento_numero_vaga");
            entity.Property(e => e.EstacionamentoSetor)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("estacionamento_setor");
            entity.Property(e => e.Expr1).HasColumnType("money");
            entity.Property(e => e.FlagChaveDeposito)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_chave_deposito");
            entity.Property(e => e.FlagComboio)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_comboio");
            entity.Property(e => e.Frota)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("frota");
            entity.Property(e => e.IdAutoridadeResponsavel).HasColumnName("id_autoridade_responsavel");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdCor).HasColumnName("id_cor");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdDetranMarcaModelo).HasColumnName("id_detran_marca_modelo");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdOrgaoEmissor).HasColumnName("id_orgao_emissor");
            entity.Property(e => e.IdReboque).HasColumnName("id_reboque");
            entity.Property(e => e.IdReboquista).HasColumnName("id_reboquista");
            entity.Property(e => e.IdTarifaTipoVeiculo).HasColumnName("id_tarifa_tipo_veiculo");
            entity.Property(e => e.IdUsuarioCadastro).HasColumnName("id_usuario_cadastro");
            entity.Property(e => e.Logradouro)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("logradouro");
            entity.Property(e => e.MarcaModelo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("marca_modelo");
            entity.Property(e => e.MatriculaAutoridadeResponsavel)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("matricula_autoridade_responsavel");
            entity.Property(e => e.Municipio)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("municipio");
            entity.Property(e => e.NomeAutoridadeResponsavel)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("nome_autoridade_responsavel");
            entity.Property(e => e.NomeReboquista)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nomeReboquista");
            entity.Property(e => e.NumeroChave)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("numero_chave");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("numero_formulario_grv");
            entity.Property(e => e.NumeroNotaFiscal)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("numero_nota_fiscal");
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa");
            entity.Property(e => e.PlacaOstentada)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("placa_ostentada");
            entity.Property(e => e.Quilometragem).HasColumnName("quilometragem");
            entity.Property(e => e.Reboque)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("reboque");
            entity.Property(e => e.Renavam)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("renavam");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status");
            entity.Property(e => e.TarifaReboqueTerceirizado)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("tarifa_reboque_terceirizado");
            entity.Property(e => e.TipoComposicao)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo_composicao");
            entity.Property(e => e.TipoVeiculo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipo_veiculo");
            entity.Property(e => e.Uf)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("uf");
            entity.Property(e => e.ValorFaturado)
                .HasColumnType("money")
                .HasColumnName("valor_faturado");
        });

        modelBuilder.Entity<VwFaturamentoAssociadoCnae>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_faturamento_associado_cnae");

            entity.Property(e => e.AtendimentoId).HasColumnName("AtendimentoID");
            entity.Property(e => e.Cnae)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.CnaeId).HasColumnName("CnaeID");
            entity.Property(e => e.DescricaoConfiguracaoNfe)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FlagEnviarInscricaoEstadual)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FlagEnviarValorIss)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GrvId).HasColumnName("GrvID");
            entity.Property(e => e.ListaServicoId).HasColumnName("ListaServicoID");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.Servico)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.ServicoAssociadoDescricao)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TotalComDesconto).HasColumnType("money");
        });

        modelBuilder.Entity<VwGloDetranBaDadosProprietario>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_glo_detran_ba_dados_proprietario");

            entity.Property(e => e.AnoFabricacao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("anoFabricacao");
            entity.Property(e => e.AnoModelo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("anoModelo");
            entity.Property(e => e.CapacidadeCarga)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("capacidadeCarga");
            entity.Property(e => e.CapacidadePassag)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("capacidadePassag");
            entity.Property(e => e.Carroceria)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("carroceria");
            entity.Property(e => e.CategoriaVeiculo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("categoriaVeiculo");
            entity.Property(e => e.Chassi)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("chassi");
            entity.Property(e => e.Cilindrada)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cilindrada");
            entity.Property(e => e.CodigoCarroceria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("codigoCarroceria");
            entity.Property(e => e.CodigoCategoria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("codigoCategoria");
            entity.Property(e => e.CodigoCombustive)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("codigoCombustive");
            entity.Property(e => e.CodigoCor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("codigoCor");
            entity.Property(e => e.CodigoEspecie)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("codigoEspecie");
            entity.Property(e => e.CodigoMarcaMod)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("codigoMarcaMod");
            entity.Property(e => e.CodigoMunicipio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("codigoMunicipio");
            entity.Property(e => e.CodigoOperacao)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("codigoOperacao");
            entity.Property(e => e.CodigoRetExec)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("codigoRetExec");
            entity.Property(e => e.CodigoTipVeic)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("codigoTipVeic");
            entity.Property(e => e.CodigoUsuario)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("codigoUsuario");
            entity.Property(e => e.Combustivel)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("combustivel");
            entity.Property(e => e.ComplemEndereco)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("complemEndereco");
            entity.Property(e => e.ComunicacaoVenda)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("comunicacaoVenda");
            entity.Property(e => e.Cor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cor");
            entity.Property(e => e.DataAlteracao)
                .HasColumnType("smalldatetime")
                .HasColumnName("dataAlteracao");
            entity.Property(e => e.DataAtualizacao)
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("dataAtualizacao");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("dataCadastro");
            entity.Property(e => e.DescricaoEspecie)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("descricaoEspecie");
            entity.Property(e => e.Endereco)
                .HasMaxLength(200)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("endereco");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdProprietario).HasColumnName("idProprietario");
            entity.Property(e => e.IdStatusOperacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_status_operacao");
            entity.Property(e => e.IndRouboFurto)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("indRouboFurto");
            entity.Property(e => e.MarcaModelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("marcaModelo");
            entity.Property(e => e.MotorDifAcesso)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("motorDifAcesso");
            entity.Property(e => e.NomeBairro)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("nomeBairro");
            entity.Property(e => e.NomeMunicipio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("nomeMunicipio");
            entity.Property(e => e.NomeProprietario)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("nomeProprietario");
            entity.Property(e => e.NomeUf)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("nomeUf");
            entity.Property(e => e.NumeroCep)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("numeroCep");
            entity.Property(e => e.NumeroCpfCgc)
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("numeroCpfCgc");
            entity.Property(e => e.NumeroEixos)
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("numeroEixos");
            entity.Property(e => e.NumeroEndereco)
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("numeroEndereco");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("numero_formulario_grv");
            entity.Property(e => e.NumeroMotor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("numeroMotor");
            entity.Property(e => e.NumeroTelefone)
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("numeroTelefone");
            entity.Property(e => e.ParamChassi)
                .HasMaxLength(40)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("paramChassi");
            entity.Property(e => e.ParamPlaca)
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("paramPlaca");
            entity.Property(e => e.ParamRenavam)
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("paramRenavam");
            entity.Property(e => e.ParamUf)
                .HasMaxLength(4)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("paramUF");
            entity.Property(e => e.PesoBrutoTotal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("pesoBrutoTotal");
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa");
            entity.Property(e => e.Potencia)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("potencia");
            entity.Property(e => e.Procedencia)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("procedencia");
            entity.Property(e => e.RegravChassi)
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("regravChassi");
            entity.Property(e => e.Restricao1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("restricao1");
            entity.Property(e => e.Restricao2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("restricao2");
            entity.Property(e => e.Restricao3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("restricao3");
            entity.Property(e => e.Restricao4)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("restricao4");
            entity.Property(e => e.Restricao5)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("restricao5");
            entity.Property(e => e.Restricao6)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("restricao6");
            entity.Property(e => e.SenhaUsuario)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("senhaUsuario");
            entity.Property(e => e.Situacao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("situacao");
            entity.Property(e => e.TipoDocumento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("tipoDocumento");
            entity.Property(e => e.TipoVeiculo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("tipoVeiculo");
            entity.Property(e => e.TracaoMax)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("tracaoMax");
            entity.Property(e => e.UnidadeFederacao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("unidadeFederacao");
            entity.Property(e => e.ValorDebDpvat)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("valorDebDpvat");
            entity.Property(e => e.ValorDebInfTrami)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("valorDebInfTrami");
            entity.Property(e => e.ValorDebIpva)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("valorDebIpva");
            entity.Property(e => e.ValorDebLicenc)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("valorDebLicenc");
            entity.Property(e => e.ValorDebMulta)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("valorDebMulta");
            entity.Property(e => e.WebService)
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("webService");
        });

        modelBuilder.Entity<VwGrvAptoEmissaoNfe>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_grv_apto_emissao_nfe");

            entity.Property(e => e.Cliente)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DataLiberacao).HasColumnType("smalldatetime");
            entity.Property(e => e.Deposito)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NumeroFormulárioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwGrvDigitalManual>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_GrvDigitalManual");

            entity.Property(e => e.Data)
                .HasColumnType("smalldatetime")
                .HasColumnName("DATA");
            entity.Property(e => e.Deposito)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("deposito");
            entity.Property(e => e.Operacao)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwLeilao060117v2BoletosEmitido>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_leilao_060117v2_boletos_emitidos");

            entity.Property(e => e.BoletoValor)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("boleto_valor");
            entity.Property(e => e.BoletoVencimento)
                .IsRequired()
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("boleto_vencimento");
            entity.Property(e => e.CedenteNossoNumeroBoleto)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("cedente_nossoNumeroBoleto");
            entity.Property(e => e.DataCadastroBoleto)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro_boleto");
            entity.Property(e => e.IdBoleto)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_boleto");
            entity.Property(e => e.Lote)
                .IsUnicode(false)
                .HasColumnName("LOTE");
        });

        modelBuilder.Entity<VwLeilaoBoletosPago>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_leilao_boletos_pagos");

            entity.Property(e => e.DataCadastroBoleto)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro_boleto");
            entity.Property(e => e.DataCredito)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_credito");
            entity.Property(e => e.DataVencimento)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_vencimento");
            entity.Property(e => e.IdBoleto).HasColumnName("id_boleto");
            entity.Property(e => e.Lote)
                .IsUnicode(false)
                .HasColumnName("LOTE");
            entity.Property(e => e.NossoNumero)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("nosso_numero");
            entity.Property(e => e.RetornoBancarioCef)
                .HasColumnType("money")
                .HasColumnName("retorno_bancario_cef");
            entity.Property(e => e.SacadoCpfCnpj)
                .IsRequired()
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("sacado_cpfCnpj");
            entity.Property(e => e.SacadoNome)
                .IsUnicode(false)
                .HasColumnName("sacado_nome");
            entity.Property(e => e.ValorLiquidoAserCreditado)
                .HasColumnType("money")
                .HasColumnName("valor_liquido_aser_creditado");
        });

        modelBuilder.Entity<VwLiberacaoGrv>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_liberacao_grv");

            entity.Property(e => e.DataPagamento)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_pagamento");
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.Expr1)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Nome)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nome");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("numero_formulario_grv");
            entity.Property(e => e.QuantidadeComposicao).HasColumnName("quantidade_composicao");
            entity.Property(e => e.ValorTipoComposicao)
                .HasColumnType("money")
                .HasColumnName("valor_tipo_composicao");
        });

        modelBuilder.Entity<VwNewSapNotasEmitida>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_new_sap_notas_emitidas");

            entity.Property(e => e.Chassi)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("chassi");
            entity.Property(e => e.CodigoClienteSap)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codigo_cliente_sap");
            entity.Property(e => e.DataLiberacao)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("data_liberacao");
            entity.Property(e => e.DocSapDiaria)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("doc_sap_diaria");
            entity.Property(e => e.DocSapQuilometragem)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("doc_sap_quilometragem");
            entity.Property(e => e.DocSapRemocao)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("doc_sap_remocao");
            entity.Property(e => e.Documento)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("documento");
            entity.Property(e => e.Endereco)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasColumnName("endereco");
            entity.Property(e => e.FormaPagamento)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("forma_pagamento");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.Identificacao)
                .IsRequired()
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("identificacao");
            entity.Property(e => e.Nome)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nome");
            entity.Property(e => e.NotaSap)
                .IsRequired()
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("nota_sap");
            entity.Property(e => e.OrgaoEmissor)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("orgao_emissor");
            entity.Property(e => e.Patio).HasColumnName("patio");
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa");
            entity.Property(e => e.Processo)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("processo");
            entity.Property(e => e.ValorDiarias)
                .HasColumnType("numeric(15, 2)")
                .HasColumnName("valor_diarias");
            entity.Property(e => e.ValorQuilometragem)
                .HasColumnType("numeric(15, 2)")
                .HasColumnName("valor_quilometragem");
            entity.Property(e => e.ValorRebocada)
                .HasColumnType("numeric(15, 2)")
                .HasColumnName("valor_rebocada");
            entity.Property(e => e.ValorTotal)
                .HasColumnType("numeric(15, 2)")
                .HasColumnName("valor_total");
        });

        modelBuilder.Entity<VwReboquesTerceirizado>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_reboques_terceirizados");

            entity.Property(e => e.Empresa)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("empresa");
            entity.Property(e => e.IdReboque).HasColumnName("id_reboque");
            entity.Property(e => e.IdReboqueTerceirizado).HasColumnName("id_reboque_terceirizado");
            entity.Property(e => e.IdTipoVeiculoClassificacaoNome).HasColumnName("id_tipo_veiculo_classificacao_nome");
            entity.Property(e => e.ValorTarifa)
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("valor_tarifa");
        });

        modelBuilder.Entity<VwRelatEstimativaArrecadacao>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_relat_estimativa_arrecadacao");

            entity.Property(e => e.Autoridade)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("autoridade");
            entity.Property(e => e.Chassi)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("chassi");
            entity.Property(e => e.Cliente)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cliente");
            entity.Property(e => e.DataHoraRemocao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_hora_remocao");
            entity.Property(e => e.Deposito)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("deposito");
            entity.Property(e => e.Dias).HasColumnName("dias");
            entity.Property(e => e.FlagComboio)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_comboio");
            entity.Property(e => e.IdAutoridadeResponsavel).HasColumnName("id_autoridade_responsavel");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("numero_formulario_grv");
            entity.Property(e => e.Placa)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa");
            entity.Property(e => e.TarifaDescricao)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tarifa_descricao");
            entity.Property(e => e.TarifaPrecoDiaria)
                .HasColumnType("money")
                .HasColumnName("tarifa_preco_diaria");
            entity.Property(e => e.TarifaPrecoRebocada)
                .HasColumnType("money")
                .HasColumnName("tarifa_preco_rebocada");
            entity.Property(e => e.TipoVeiculosNome)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipo_veiculos_nome");
            entity.Property(e => e.TotalDevido)
                .HasColumnType("money")
                .HasColumnName("totalDevido");
            entity.Property(e => e.TotalDiaria)
                .HasColumnType("money")
                .HasColumnName("totalDiaria");
        });

        modelBuilder.Entity<VwRelatEstoqueVeiculo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_relat_estoque_veiculo");

            entity.Property(e => e.Chassi)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("chassi");
            entity.Property(e => e.Cliente)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cliente");
            entity.Property(e => e.Cor)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cor");
            entity.Property(e => e.DataHoraRemocao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_hora_remocao");
            entity.Property(e => e.Deposito)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("deposito");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.MarcaModelo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("numero_formulario_grv");
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa");
            entity.Property(e => e.StatusOperacao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Tipoveiculo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipoveiculo");
        });

        modelBuilder.Entity<VwRelatRecolhimentoVeicular>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_relat_recolhimento_veicular");

            entity.Property(e => e.AutoridadesResponsaveisDivisao)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("autoridades_responsaveis_divisao");
            entity.Property(e => e.Chassi)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("chassi");
            entity.Property(e => e.Cliente)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cliente");
            entity.Property(e => e.Cor)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cor");
            entity.Property(e => e.DataHoraRemocao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_hora_remocao");
            entity.Property(e => e.Deposito)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("deposito");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.MarcaModelo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("numero_formulario_grv");
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa");
            entity.Property(e => e.Reboquista)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("reboquista");
            entity.Property(e => e.Tipoveiculo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipoveiculo");
        });

        modelBuilder.Entity<VwRelatVeiculosLiberado>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_relat_veiculos_liberados");

            entity.Property(e => e.Chassi)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("chassi");
            entity.Property(e => e.Cliente)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cliente");
            entity.Property(e => e.Cor)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cor");
            entity.Property(e => e.DataHoraRemocao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_hora_remocao");
            entity.Property(e => e.Deposito)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("deposito");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.MarcaModelo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("numero_formulario_grv");
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa");
            entity.Property(e => e.StatusOperacao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Tipoveiculo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipoveiculo");
        });

        modelBuilder.Entity<VwRelatVeiculosRecolhido>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_relat_veiculos_recolhidos");

            entity.Property(e => e.AutoridadesResponsaveisDivisao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("autoridades_responsaveis_divisao");
            entity.Property(e => e.Chassi)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("chassi");
            entity.Property(e => e.Cliente)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cliente");
            entity.Property(e => e.Cor)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cor");
            entity.Property(e => e.DataHoraRemocao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_hora_remocao");
            entity.Property(e => e.Deposito)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("deposito");
            entity.Property(e => e.MarcaModelo)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("numero_formulario_grv");
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa");
            entity.Property(e => e.StatusOperacao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Tipoveiculo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipoveiculo");
        });

        modelBuilder.Entity<VwRelatorioEstoque>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_relatorio_estoque");

            entity.Property(e => e.AutoridadeDivisao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("autoridade_divisao");
            entity.Property(e => e.AutoridadeOrgao)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("autoridade_orgao");
            entity.Property(e => e.AutoridadeSigla)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("autoridade_sigla");
            entity.Property(e => e.Chassi)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("chassi");
            entity.Property(e => e.Cliente)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cliente");
            entity.Property(e => e.Cor)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cor");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataHoraGuarda)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_hora_guarda");
            entity.Property(e => e.DataHoraRemocao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_hora_remocao");
            entity.Property(e => e.Deposito)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("deposito");
            entity.Property(e => e.EstacionamentoNumeroVaga)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("estacionamento_numero_vaga");
            entity.Property(e => e.EstacionamentoSetor)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("estacionamento_setor");
            entity.Property(e => e.FlagChaveDeposito)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_chave_deposito");
            entity.Property(e => e.FlagComboio)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_comboio");
            entity.Property(e => e.IdAutoridadeResponsavel).HasColumnName("id_autoridade_responsavel");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdCor).HasColumnName("id_cor");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdDetranMarcaModelo).HasColumnName("id_detran_marca_modelo");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdOrgaoEmissor).HasColumnName("id_orgao_emissor");
            entity.Property(e => e.IdReboque).HasColumnName("id_reboque");
            entity.Property(e => e.IdReboquista).HasColumnName("id_reboquista");
            entity.Property(e => e.IdTarifaTipoVeiculo).HasColumnName("id_tarifa_tipo_veiculo");
            entity.Property(e => e.Logradouro)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("logradouro");
            entity.Property(e => e.MarcaModelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("marca_modelo");
            entity.Property(e => e.MatriculaAutoridadeResponsavel)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("matricula_autoridade_responsavel");
            entity.Property(e => e.Municipio)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("municipio");
            entity.Property(e => e.NomeAutoridadeResponsavel)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("nome_autoridade_responsavel");
            entity.Property(e => e.NumeroChave)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("numero_chave");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("numero_formulario_grv");
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa");
            entity.Property(e => e.Quilometragem).HasColumnName("quilometragem");
            entity.Property(e => e.Reboque)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("reboque");
            entity.Property(e => e.Renavam)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("renavam");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status");
            entity.Property(e => e.TipoVeiculo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipo_veiculo");
        });

        modelBuilder.Entity<VwRelatorioEstoque04072017>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_relatorio_estoque_04072017");

            entity.Property(e => e.AutoridadeDivisao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("autoridade_divisao");
            entity.Property(e => e.AutoridadeOrgao)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("autoridade_orgao");
            entity.Property(e => e.AutoridadeSigla)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("autoridade_sigla");
            entity.Property(e => e.Chassi)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("chassi");
            entity.Property(e => e.Cliente)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cliente");
            entity.Property(e => e.Cor)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cor");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataHoraGuarda)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_hora_guarda");
            entity.Property(e => e.DataHoraRemocao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_hora_remocao");
            entity.Property(e => e.Deposito)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("deposito");
            entity.Property(e => e.EstacionamentoNumeroVaga)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("estacionamento_numero_vaga");
            entity.Property(e => e.EstacionamentoSetor)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("estacionamento_setor");
            entity.Property(e => e.FlagComboio)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_comboio");
            entity.Property(e => e.IdAutoridadeResponsavel).HasColumnName("id_autoridade_responsavel");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdCor).HasColumnName("id_cor");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdDetranMarcaModelo).HasColumnName("id_detran_marca_modelo");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdOrgaoEmissor).HasColumnName("id_orgao_emissor");
            entity.Property(e => e.IdReboque).HasColumnName("id_reboque");
            entity.Property(e => e.IdReboquista).HasColumnName("id_reboquista");
            entity.Property(e => e.IdTarifaTipoVeiculo).HasColumnName("id_tarifa_tipo_veiculo");
            entity.Property(e => e.Logradouro)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("logradouro");
            entity.Property(e => e.MarcaModelo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("marca_modelo");
            entity.Property(e => e.MatriculaAutoridadeResponsavel)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("matricula_autoridade_responsavel");
            entity.Property(e => e.Municipio)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("municipio");
            entity.Property(e => e.NomeAutoridadeResponsavel)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("nome_autoridade_responsavel");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("numero_formulario_grv");
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa");
            entity.Property(e => e.Quilometragem).HasColumnName("quilometragem");
            entity.Property(e => e.Reboque)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("reboque");
            entity.Property(e => e.Renavam)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("renavam");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status");
            entity.Property(e => e.TipoVeiculo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipo_veiculo");
        });

        modelBuilder.Entity<VwSapCadastroClienteFinalizado>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_sap_cadastro_cliente_finalizado");

            entity.Property(e => e.DataParametro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_parametro");
            entity.Property(e => e.DataRetornoSap)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_retorno_sap");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdDocumentoSap)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_documento_sap");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdStatusOperacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_status_operacao");
            entity.Property(e => e.Mensagem)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("mensagem");
            entity.Property(e => e.NotaFiscalNome)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_nome");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("numero_formulario_grv");
            entity.Property(e => e.StatusCadastroOrdensVendaSap)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status_cadastro_ordens_venda_sap");
            entity.Property(e => e.StatusCadastroSap)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status_cadastro_sap");
        });

        modelBuilder.Entity<VwSapCadastroOrdemVendaFinalizado>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_sap_cadastro_ordem_venda_finalizado");

            entity.Property(e => e.DataParametro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_parametro");
            entity.Property(e => e.DataRetornoSap)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_retorno_sap");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdDocumentoSap)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("id_documento_sap");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdStatusOperacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_status_operacao");
            entity.Property(e => e.Mensagem)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("mensagem");
            entity.Property(e => e.NotaFiscalNome)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_nome");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("numero_formulario_grv");
            entity.Property(e => e.StatusCadastroOrdensVendaSap)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status_cadastro_ordens_venda_sap");
            entity.Property(e => e.StatusCadastroSap)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status_cadastro_sap");
        });

        modelBuilder.Entity<VwSapClientesEnviado>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_sap_clientes_enviados");

            entity.Property(e => e.ClienteNome)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cliente_nome");
            entity.Property(e => e.DataEnvioSap)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_envio_sap");
            entity.Property(e => e.DepositoNome)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("deposito_nome");
            entity.Property(e => e.IdAtendimento).HasColumnName("id_atendimento");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdDocumentoSap)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_documento_sap");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdStatusOperacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_status_operacao");
            entity.Property(e => e.NotaFiscalNome)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_nome");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("numero_formulario_grv");
            entity.Property(e => e.StatusCadastroOrdensVendaSap)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status_cadastro_ordens_venda_sap");
            entity.Property(e => e.StatusCadastroSap)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status_cadastro_sap");
        });

        modelBuilder.Entity<VwSapClientesRetorno>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_sap_clientes_retorno");

            entity.Property(e => e.DataHoraRegistro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_hora_registro");
            entity.Property(e => e.FlagErroWsSap)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_erro_ws_sap");
            entity.Property(e => e.IdDocumento)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("id_documento");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdSapClientes).HasColumnName("id_sap_clientes");
            entity.Property(e => e.IdSapRetorno).HasColumnName("id_sap_retorno");
            entity.Property(e => e.IdTransacaoSap).HasColumnName("id_transacao_sap");
            entity.Property(e => e.Mensagens)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("mensagens");
            entity.Property(e => e.Nota)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("nota");
        });

        modelBuilder.Entity<VwSapCriacaoCliente>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_sap_criacao_clientes");

            entity.Property(e => e.Cnpj)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("cnpj");
            entity.Property(e => e.Cpf)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("cpf");
            entity.Property(e => e.DataHoraRegistro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_hora_registro");
            entity.Property(e => e.IdDocumento)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("id_documento");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdTransacaoSap).HasColumnName("id_transacao_sap");
            entity.Property(e => e.Mensagens)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("mensagens");
        });

        modelBuilder.Entity<VwSapErroCadastroCliente>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_sap_erro_cadastro_cliente");

            entity.Property(e => e.DataParametro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_parametro");
            entity.Property(e => e.DataRetornoSap)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_retorno_sap");
            entity.Property(e => e.FlagErroWsSap)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_erro_ws_sap");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdDocumentoSap)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_documento_sap");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdStatusOperacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_status_operacao");
            entity.Property(e => e.Mensagem)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("mensagem");
            entity.Property(e => e.NotaFiscalNome)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_nome");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("numero_formulario_grv");
            entity.Property(e => e.StatusCadastroOrdensVendaSap)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status_cadastro_ordens_venda_sap");
            entity.Property(e => e.StatusCadastroSap)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status_cadastro_sap");
        });

        modelBuilder.Entity<VwSapErroCadastroOrdemVendum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_sap_erro_cadastro_ordem_venda");

            entity.Property(e => e.DataParametro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_parametro");
            entity.Property(e => e.DataRetornoSap)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_retorno_sap");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdDocumentoSap)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_documento_sap");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdStatusOperacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_status_operacao");
            entity.Property(e => e.Mensagem)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("mensagem");
            entity.Property(e => e.NotaFiscalNome)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_nome");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("numero_formulario_grv");
            entity.Property(e => e.StatusCadastroOrdensVendaSap)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status_cadastro_ordens_venda_sap");
            entity.Property(e => e.StatusCadastroSap)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status_cadastro_sap");
        });

        modelBuilder.Entity<VwSapNotasEmitida>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_sap_notas_emitidas");

            entity.Property(e => e.Chassi)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("chassi");
            entity.Property(e => e.CodigoClienteSap)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("codigo_cliente_sap");
            entity.Property(e => e.DataLiberacao)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("data_liberacao");
            entity.Property(e => e.Documento)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("documento");
            entity.Property(e => e.DocumentosSap)
                .HasMaxLength(34)
                .IsUnicode(false)
                .HasColumnName("documentos_sap");
            entity.Property(e => e.Endereco)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasColumnName("endereco");
            entity.Property(e => e.FormaPagamento)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("forma_pagamento");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.Identificacao)
                .IsRequired()
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("identificacao");
            entity.Property(e => e.Nome)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nome");
            entity.Property(e => e.OrgaoEmissor)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("orgao_emissor");
            entity.Property(e => e.Patio).HasColumnName("patio");
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa");
            entity.Property(e => e.Processo)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("processo");
            entity.Property(e => e.ValorDiarias)
                .HasColumnType("numeric(15, 2)")
                .HasColumnName("valor_diarias");
            entity.Property(e => e.ValorQuilometragem)
                .HasColumnType("numeric(15, 2)")
                .HasColumnName("valor_quilometragem");
            entity.Property(e => e.ValorRebocada)
                .HasColumnType("numeric(15, 2)")
                .HasColumnName("valor_rebocada");
            entity.Property(e => e.ValorTotal)
                .HasColumnType("numeric(15, 2)")
                .HasColumnName("valor_total");
        });

        modelBuilder.Entity<VwSapOrdensVendasEnviada>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_sap_ordens_vendas_enviadas");

            entity.Property(e => e.ClienteNome)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cliente_nome");
            entity.Property(e => e.DataEnvioSap)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_envio_sap");
            entity.Property(e => e.DepositoNome)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("deposito_nome");
            entity.Property(e => e.IdAtendimento).HasColumnName("id_atendimento");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdDocumentoSap)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_documento_sap");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdStatusOperacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_status_operacao");
            entity.Property(e => e.NotaFiscalNome)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_nome");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("numero_formulario_grv");
            entity.Property(e => e.StatusCadastroOrdensVendaSap)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status_cadastro_ordens_venda_sap");
            entity.Property(e => e.StatusCadastroSap)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status_cadastro_sap");
        });

        modelBuilder.Entity<VwSapOrdensVendasYb01>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_sap_ordens_vendas_yb01");

            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.IdDocumento)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("id_documento");
            entity.Property(e => e.IdFaturamentoComposicao).HasColumnName("id_faturamento_composicao");
            entity.Property(e => e.IdTransacaoSap).HasColumnName("id_transacao_sap");
            entity.Property(e => e.Mensagens)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("mensagens");
            entity.Property(e => e.Nota)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("nota");
            entity.Property(e => e.TipoDocumento)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo_documento");
        });

        modelBuilder.Entity<VwSapOrdensVendasYb02>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_sap_ordens_vendas_yb02");

            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.IdDocumento)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("id_documento");
            entity.Property(e => e.IdFaturamentoComposicao).HasColumnName("id_faturamento_composicao");
            entity.Property(e => e.IdTransacaoSap).HasColumnName("id_transacao_sap");
            entity.Property(e => e.Mensagens)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("mensagens");
            entity.Property(e => e.Nota)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("nota");
            entity.Property(e => e.TipoDocumento)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipo_documento");
        });

        modelBuilder.Entity<VwSapVeiculoLiberado>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_sap_veiculo_liberado");

            entity.Property(e => e.ClienteNome)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cliente_nome");
            entity.Property(e => e.DataParametro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_parametro");
            entity.Property(e => e.DepositoNome)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("deposito_nome");
            entity.Property(e => e.IdAtendimento).HasColumnName("id_atendimento");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdDocumentoSap)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_documento_sap");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdStatusOperacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_status_operacao");
            entity.Property(e => e.NotaFiscalNome)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nota_fiscal_nome");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("numero_formulario_grv");
            entity.Property(e => e.StatusCadastroOrdensVendaSap)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status_cadastro_ordens_venda_sap");
            entity.Property(e => e.StatusCadastroSap)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status_cadastro_sap");
        });

        modelBuilder.Entity<VwTableDashboardQliksense>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_table_dashboard_qliksense");

            entity.Property(e => e.CategoriaVeiculo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("categoria veiculo");
            entity.Property(e => e.Chassi)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("chassi");
            entity.Property(e => e.DataGuarda)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("data guarda");
            entity.Property(e => e.DataLiberacao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_liberacao");
            entity.Property(e => e.DataRecolhimento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("data recolhimento");
            entity.Property(e => e.DiaMesApreensao).HasColumnName("dia mes apreensao");
            entity.Property(e => e.DiaMesLiberacao).HasColumnName("dia mes liberacao");
            entity.Property(e => e.DiaSemanaApreensao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("dia semana apreensao");
            entity.Property(e => e.DiaSemanaLiberacao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("dia semana liberacao");
            entity.Property(e => e.Dias).HasColumnName("dias");
            entity.Property(e => e.DiasConsiderados).HasColumnName("dias considerados");
            entity.Property(e => e.Estado)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("estado");
            entity.Property(e => e.FormaLiberacao)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("forma_liberacao");
            entity.Property(e => e.Frota)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("frota");
            entity.Property(e => e.HoraCheiaApreensao).HasColumnName("hora cheia apreensao");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.MarcaModelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("marca modelo");
            entity.Property(e => e.OrgaoApreensor)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("orgao apreensor");
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa");
            entity.Property(e => e.PlacaReboque)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa reboque");
            entity.Property(e => e.Processo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("processo");
            entity.Property(e => e.Reboque)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("reboque");
            entity.Property(e => e.Reboquista)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("reboquista");
            entity.Property(e => e.Regiao)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("regiao");
            entity.Property(e => e.ResponsavelApreensao)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("responsavel apreensao");
            entity.Property(e => e.StatusLote)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("statusLote");
            entity.Property(e => e.TipoCobranca)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tipo cobranca");
            entity.Property(e => e.TipoVeiculo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipo_veiculo");
            entity.Property(e => e.Unidade)
                .HasMaxLength(21)
                .IsUnicode(false)
                .HasColumnName("unidade");
            entity.Property(e => e.ValorDiaria)
                .HasColumnType("money")
                .HasColumnName("valor_diaria");
            entity.Property(e => e.ValorDiariaDesconto)
                .HasColumnType("money")
                .HasColumnName("valor_diaria_desconto");
            entity.Property(e => e.ValorOutrosServicos)
                .HasColumnType("money")
                .HasColumnName("valor_outros_servicos");
            entity.Property(e => e.ValorOutrosServicosDesconto)
                .HasColumnType("money")
                .HasColumnName("valor_outros_servicos_desconto");
            entity.Property(e => e.ValorPago)
                .HasColumnType("money")
                .HasColumnName("valor_pago");
            entity.Property(e => e.ValorReboque)
                .HasColumnType("money")
                .HasColumnName("valor_reboque");
            entity.Property(e => e.ValorReboqueDesconto)
                .HasColumnType("money")
                .HasColumnName("valor_reboque_desconto");
            entity.Property(e => e.ValorTotal)
                .HasColumnType("money")
                .HasColumnName("valor total");
            entity.Property(e => e.ValorTotalSemDesconto)
                .HasColumnType("money")
                .HasColumnName("valor_total_sem_desconto");
            entity.Property(e => e.VeiculoAnoFabricacao).HasColumnName("veiculo_ano_fabricacao");
            entity.Property(e => e.VeiculoAnoModelo).HasColumnName("veiculo_ano_modelo");
        });

        modelBuilder.Entity<VwTableDashboardQliksenseDetro>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_table_dashboard_qliksense_detro");

            entity.Property(e => e.CategoriaVeiculo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("categoria veiculo");
            entity.Property(e => e.Chassi)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("chassi");
            entity.Property(e => e.DataGuarda)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("data guarda");
            entity.Property(e => e.DataLiberacao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_liberacao");
            entity.Property(e => e.DataRecolhimento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("data recolhimento");
            entity.Property(e => e.DiaMesApreensao).HasColumnName("dia mes apreensao");
            entity.Property(e => e.DiaMesLiberacao).HasColumnName("dia mes liberacao");
            entity.Property(e => e.DiaSemanaApreensao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("dia semana apreensao");
            entity.Property(e => e.DiaSemanaLiberacao)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("dia semana liberacao");
            entity.Property(e => e.Dias).HasColumnName("dias");
            entity.Property(e => e.DiasConsiderados).HasColumnName("dias considerados");
            entity.Property(e => e.Estado)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("estado");
            entity.Property(e => e.FormaLiberacao)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("forma_liberacao");
            entity.Property(e => e.Frota)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("frota");
            entity.Property(e => e.HoraCheiaApreensao).HasColumnName("hora cheia apreensao");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.MarcaModelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("marca modelo");
            entity.Property(e => e.OrgaoApreensor)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("orgao apreensor");
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa");
            entity.Property(e => e.PlacaReboque)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa reboque");
            entity.Property(e => e.Processo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("processo");
            entity.Property(e => e.Reboque)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("reboque");
            entity.Property(e => e.Reboquista)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("reboquista");
            entity.Property(e => e.Regiao)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("regiao");
            entity.Property(e => e.ResponsavelApreensao)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("responsavel apreensao");
            entity.Property(e => e.TipoCobranca)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tipo cobranca");
            entity.Property(e => e.TipoVeiculo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipo_veiculo");
            entity.Property(e => e.Unidade)
                .HasMaxLength(21)
                .IsUnicode(false)
                .HasColumnName("unidade");
            entity.Property(e => e.ValorDiaria)
                .HasColumnType("money")
                .HasColumnName("valor_diaria");
            entity.Property(e => e.ValorDiariaDesconto)
                .HasColumnType("money")
                .HasColumnName("valor_diaria_desconto");
            entity.Property(e => e.ValorOutrosServicos)
                .HasColumnType("money")
                .HasColumnName("valor_outros_servicos");
            entity.Property(e => e.ValorOutrosServicosDesconto)
                .HasColumnType("money")
                .HasColumnName("valor_outros_servicos_desconto");
            entity.Property(e => e.ValorPago)
                .HasColumnType("money")
                .HasColumnName("valor_pago");
            entity.Property(e => e.ValorReboque)
                .HasColumnType("money")
                .HasColumnName("valor_reboque");
            entity.Property(e => e.ValorReboqueDesconto)
                .HasColumnType("money")
                .HasColumnName("valor_reboque_desconto");
            entity.Property(e => e.ValorTotal)
                .HasColumnType("money")
                .HasColumnName("valor total");
            entity.Property(e => e.ValorTotalSemDesconto)
                .HasColumnType("money")
                .HasColumnName("valor_total_sem_desconto");
        });

        modelBuilder.Entity<VwTeste>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_teste");

            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.IdFaturamentoServicoTipo).HasColumnName("id_faturamento_servico_tipo");
            entity.Property(e => e.Total)
                .HasColumnType("money")
                .HasColumnName("total");
        });

        modelBuilder.Entity<VwTipoVeiculoClassificacao>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_tipo_veiculo_classificacao");

            entity.Property(e => e.ClassificacaoNome)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("classificacao_nome");
            entity.Property(e => e.Descricao)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descricao");
            entity.Property(e => e.IdTipoVeiculo).HasColumnName("id_tipo_veiculo");
            entity.Property(e => e.IdTipoVeiculoClassificacaoNome).HasColumnName("id_tipo_veiculo_classificacao_nome");
        });

        modelBuilder.Entity<VwTransacoesDetranBaDadosProprietario>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_transacoes_detran_ba_dados_proprietarios");

            entity.Property(e => e.Chassi)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("chassi");
            entity.Property(e => e.CodigoRetExec)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("codigoRetExec");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdStatusOperacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_status_operacao");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("numero_formulario_grv");
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa");
        });

        modelBuilder.Entity<VwTransacoesDetranBaStatus>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_transacoes_detran_ba_status");

            entity.Property(e => e.Chassi)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("chassi");
            entity.Property(e => e.CodigoDetran)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("codigo_detran");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataEnvioLog)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_envio_log");
            entity.Property(e => e.FlagClienteRealizaFaturamentoArrecadacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_cliente_realiza_faturamento_arrecadacao");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdMotivoApreensao).HasColumnName("id_motivo_apreensao");
            entity.Property(e => e.IdStatusOperacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_status_operacao");
            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("numero_formulario_grv");
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa");
            entity.Property(e => e.RegistrarApreensao).HasColumnName("registrar_apreensao");
            entity.Property(e => e.RegistrarEntrega).HasColumnName("registrar_entrega");
            entity.Property(e => e.RegistrarLiberacao).HasColumnName("registrar_liberacao");
            entity.Property(e => e.TermoRemocaoApreensao)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("termoRemocao_Apreensao");
        });

        modelBuilder.Entity<VwTransacoesDetranRjDadosProprietario>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_transacoes_detran_rj_dados_proprietarios");

            entity.Property(e => e.Chassi)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("chassi");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataGuarda)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_guarda");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdStatusOperacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_status_operacao");
            entity.Property(e => e.Login)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("login");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("numero_formulario_grv");
            entity.Property(e => e.Operador)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("operador");
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa");
            entity.Property(e => e.Uf)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("UF");
        });

        modelBuilder.Entity<VwTransacoesDetranRjStatus>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_transacoes_detran_rj_status");

            entity.Property(e => e.AGua).HasColumnName("a_gua");
            entity.Property(e => e.ARec).HasColumnName("a_rec");
            entity.Property(e => e.Chassi)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("chassi");
            entity.Property(e => e.ConsultarLiberacao).HasColumnName("consultar_liberacao");
            entity.Property(e => e.DataEnvioLog)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_envio_log");
            entity.Property(e => e.DataGuarda)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("data_guarda");
            entity.Property(e => e.DataHoraGuarda)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_hora_guarda");
            entity.Property(e => e.DataHoraRemocao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_hora_remocao");
            entity.Property(e => e.DataRemocao)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("data_remocao");
            entity.Property(e => e.Guardar).HasColumnName("guardar");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdLiberacao).HasColumnName("id_liberacao");
            entity.Property(e => e.IdStatusOperacao)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("id_status_operacao");
            entity.Property(e => e.IdUsuarioGgv).HasColumnName("id_usuario_ggv");
            entity.Property(e => e.IdUsuarioGrv).HasColumnName("id_usuario_grv");
            entity.Property(e => e.Liberar).HasColumnName("liberar");
            entity.Property(e => e.LoginGgv)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("login_ggv");
            entity.Property(e => e.LoginGrv)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("login_grv");
            entity.Property(e => e.NumeroGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("numero_grv");
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa");
            entity.Property(e => e.Recolher).HasColumnName("recolher");
        });

        modelBuilder.Entity<VwTransacoesRelatorioPrf>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_transacoes_relatorio_prf");

            entity.Property(e => e.Chassi)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("chassi");
            entity.Property(e => e.Cor)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cor");
            entity.Property(e => e.DataCadastro)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_cadastro");
            entity.Property(e => e.DataHoraGuarda)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_hora_guarda");
            entity.Property(e => e.DataHoraRemocao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_hora_remocao");
            entity.Property(e => e.FlagComboio)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("flag_comboio");
            entity.Property(e => e.IdAutoridadeResponsavel).HasColumnName("id_autoridade_responsavel");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdCor).HasColumnName("id_cor");
            entity.Property(e => e.IdDeposito).HasColumnName("id_deposito");
            entity.Property(e => e.IdDetranMarcaModelo).HasColumnName("id_detran_marca_modelo");
            entity.Property(e => e.IdGrv).HasColumnName("id_grv");
            entity.Property(e => e.IdReboque).HasColumnName("id_reboque");
            entity.Property(e => e.IdReboquista).HasColumnName("id_reboquista");
            entity.Property(e => e.IdTarifaTipoVeiculo).HasColumnName("id_tarifa_tipo_veiculo");
            entity.Property(e => e.MarcaModelo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("marca_modelo");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("numero_formulario_grv");
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status");
            entity.Property(e => e.TipoVeiculo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipo_veiculo");
        });

        modelBuilder.Entity<VwVeiculosLiberado>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_veiculos_liberados");

            entity.Property(e => e.Chassi)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("chassi");
            entity.Property(e => e.Cor)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("cor");
            entity.Property(e => e.DataEmissaoNotaFiscal)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_emissao_nota_fiscal");
            entity.Property(e => e.DataHoraGuarda)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_hora_guarda");
            entity.Property(e => e.DataHoraRemocao)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_hora_remocao");
            entity.Property(e => e.DataPagamento)
                .HasColumnType("smalldatetime")
                .HasColumnName("data_pagamento");
            entity.Property(e => e.Diarias).HasColumnName("diarias");
            entity.Property(e => e.MarcaModelo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AS")
                .HasColumnName("marca_modelo");
            entity.Property(e => e.NumeroFormularioGrv)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("numero_formulario_grv");
            entity.Property(e => e.NumeroNotaFiscal)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("numero_nota_fiscal");
            entity.Property(e => e.Placa)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("placa");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("status");
            entity.Property(e => e.Tarifa)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tarifa");
            entity.Property(e => e.TipoVeiculo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipo_veiculo");
            entity.Property(e => e.ValorFaturado)
                .HasColumnType("money")
                .HasColumnName("valor_faturado");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
